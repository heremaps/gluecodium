package navigation

import navigation.* from "classpath:/navigation/BuiltIn.fidl"
import navigation.* from "NavigationTypes.fidl"
import navigation.* from "Module.fidl"
import navigation.* from "ModuleFactory.fidl"
import navigation.* from "ProfileManager.fidl"
import navigation.* from "SystemInformation.fidl"
import navigation.* from "NetworkConfiguration.fidl"


<** @description:
 The main entry point to the navigation services.

 You can use the Runtime class to request an instances of the components and
 services available here or in the factory. Results are propagated through
 RuntimeListener which is set when creating an instance via create_runtime().

 The copy constructor allows you to have many instances of Runtime but each
 instance points to the same reference counted implementation instance.

 If the last instance of the Runtime gets deleted, the whole legacy stack gets shut down and cannot
 be used anymore (equivalent to calling Runtime::shutdown()). Thus at least on copy of the
 Runtime object must be kept while using legacy.
 **>
interface Runtime {
    version {
        major 1
        minor 0
    }

    <** @description: Creates a Runtime instance with the default configuration. Sets the language to en-GB **>
    method createRuntime:Defaults {
        in { }
        out {
            <** @description: The Runtime object created. **>
            Runtime.Instance runtime
        }
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description: Creates a Runtime instance with a particular configuration. Sets the language to en-GB **>
    method createRuntime:WithConfig {
        in {
            <** @description: Path to a json config file that configures the system. **>
            String configFile
        }
        out {
            <** @description: The Runtime object created. **>
            Runtime.Instance runtime
        }
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description: Creates a Runtime instance with a particular configuration and initial profile. **>
    method createRuntime:Full {
        in {
            <** @description: Path to a json config file that configures the system. **>
            String configFile
            <** @description: Identifier of the initial profile. **>
            String initialProfile
            <** @description: BCP47 language tag of the initial language. **>
            String initialLanguage
        }
        out {
            <** @description: The Runtime object created. **>
            Runtime.Instance runtime
        }
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description:
      Shuts down the Runtime object and all modules created from it. This call will free held
      resources, but not necessarily memory. No more callbacks will happen after this
      call returns and this Runtime object and all modules created from it must not be used
      anymore. It is not possible to restore the instance. Calling methods on object that were
      created using this instance results in undefined behavior after this call.

      Memory will be released when the last instance of the respective objects gets deleted.

      Although a shutdown happens implicitly when the last Runtime object instance gets deleted,
      it is advisable to explicitly call this method.

      NOTE: The caller should not hold any locks when this gets called to prevent deadlocks.
    **>
    method shutdown {
        in {}
        out {}
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description: Returns whether shutdown has been completed. **>
    method shutdownCompleted {
        in {}
        out {
            <** @description: true, if shutdown is done. **>
            Boolean done
        }
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description: This is a HERE-internal testing method. DO NOT USE! **>
    method resume {
        in {}
        out {}
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description: This is a HERE-internal testing method. DO NOT USE! **>
    method stop {
        in {}
        out {}
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description: Register a factory which can be used to create or load a module.**>
    method registerModuleFactory {
        in {
            <** @description: The reference to a factory instance. **>
            ModuleFactory.ModuleFactoryInstance moduleFactory
        }
        out {}
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description: This method creates a new module instance. **>
    method createModule {
        in {
            <** @description: The name of the module. The name should be mentioned in the specific module
                  documentation. Module may also have a static name method that returns the name. **>
            String name
        }
        out {
            <** @description: The created Module **>
            Module.ModuleInstance module
        }
        <** @description: ErrorNone on success, or another error code otherwise. **>
        error NavigationTypes.ErrorCode
    }

    <** @description: The ProfileManager. **>
    attribute ProfileManager.Instance profileManager readonly noSubscriptions

    <** @description: The SystemInformation. **>
    attribute SystemInformation.Instance systemInformation readonly noSubscriptions

    <** @description: The NetworkConfiguration. **>
    attribute NetworkConfiguration.Instance networkConfiguration readonly noSubscriptions

    <** @description: The runtime version. **>
    attribute String ^version readonly noSubscriptions

    <** @description:
      The application ID as defined in the system configuration file.
      The application ID will serve together with the application code as unique
      application-specific credentials to the HERE web services.
      See https://developer.here.com/plans for more information.
    **>
    attribute String applicationId readonly noSubscriptions

    <** @description:
      The application code as defined in the system configuration file.
      The application code will serve together with the application ID as unique
      application-specific credentials to the HERE web services.
      See https://developer.here.com/plans for more information.
    **>
    attribute String applicationCode readonly noSubscriptions

    <** @description: The brand variant to be passed to the Modules.
      Needs to be set before a module is created.
    **>
    attribute String brandVariant

    <** @description:
      The currently active region.
      Puts restriction on the map so only specific map parts corresponding to that region are shown to the client.
      For example, the map owner can be configured, that a user in Australia is not be able to see and use Asia maps,
      even if the regions physically exist in the deployed map database.

      Restriction sets are defined inside the map database and only those values must be used.
      Please check the database documentation for more details.

      If this attribute is not set, the default restriction will apply.

      NOTE: This attribute must be set before creating Modules otherwise default features and restrictions will apply.
    **>
    attribute Int16 restrictedSetId

    <** @description: The current political view for the map.
      NOTE: Depending on the political view, map content such as border lines can differ.
    **>
    attribute NavigationTypes.CountryCode politicalMapView

    <** @description: The system language **>
    attribute NavigationTypes.Language language

    public typedef Instance is BuiltIn.InstanceId
}
