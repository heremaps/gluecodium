package navigation.guidance

import navigation.* from "classpath:/navigation/BuiltIn.fidl"
import navigation.* from "../NavigationTypes.fidl"

typeCollection GuidanceTypes {
  version {
    major 1
    minor 0
  }

  // FIXME: The following entries are workarounds to allow Guidance to work with the existing legacy APIs
  // These will be references to other fidl files in the final version

  <** @source-uri: legacy/navcore/GuidanceSession.h **>
  typedef GuidanceSession is BuiltIn.ExternalType  // Not generated, use legacy
  <** @source-uri: legacy/navcore/MapMatcher.h **>
  typedef MapMatcher is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/NavigationOptions.h **>
  typedef NavigationOptions is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/MainRouteOptions.h
      @source-alias: nocomplex **>
  typedef MainRouteOptions is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/Route.h **>
  typedef Route is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/ChangePointInfo.h **>
  typedef ChangePointInfo is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/LaneInfo.h **>
  typedef LaneInfo is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/RouteAlternativeInfo.h **>
  typedef RouteAlternativeInfo is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/common/RoutePlan.h **>
  typedef RoutePlan is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/RouteTta.h **>
  typedef RouteTta is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/Maneuver.h **>
  typedef Maneuver is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/CountryInfo.h **>
  typedef CountryInfo is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/GuidanceProgress.h **>
  typedef GuidanceProgress is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/RouterPenalty.h **>
  typedef RouterPenalty is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/VoicePackage.h **>
  typedef VoicePackage is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/VoiceOutput.h **>
  typedef VoiceOutput is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-alias: nocomplex **>
  typedef VoiceOutputType is BuiltIn.ExternalType // Not generated, use legacy
  <** @source-uri: legacy/navcore/RouterOptions.h **>
  typedef RouterOptions is BuiltIn.ExternalType // Not generated, use legacy

  map RouteToCompute {
    Route to Boolean
  }

  enumeration GuidanceMode {
    Undefined
    Tracking
    Observation
    Navigation
  }

  enumeration GuidanceState // TODO enum class in fdepl
  {
      Unknown
      Onroad
      Offroad
  }

  enumeration RouteScope
  {
      CurrentRouteLeg
      WholeRoute
  }

  enumeration MainRouteChangedReason
  {
      MainRouteChangedDeviation
      MainRouteChangedUpdateRoute
      MainRouteChangedTrafficAvoidance
  }

  enumeration AlternativeRoutesChangedReason
  {
      AlternativeAddedTrafficAvoidance
      AlternativeAddedPreviousMainRoute
      AlternativeRemovedAfterDecisionPoint
      AlternativeAddedAfterDecisionPoint
      AlternativeRemovedPromotedToMainRoute
  }

  enumeration BreakOutManeuver
  {
      NextManeuver
      AfterNextManeuver
  }

  enumeration BreakOutType
  {
      LeftBreakOut
      RightBreakOut
      HighwayExit
  }

  const UInt16 InvalidBreakCount = -1
  const UInt16 InvalidHeading = -1
  const UInt32 InvalidDistance = -1
  const UInt32 InvalidTime = -1
  const UInt32 TtaBlocked = -2
  const Float InvalidSpeed = BuiltIn.MaxFloat

  array RouteAlternatives of GuidanceTypes.Route

  typedef ManeuverWithDistance is Maneuver // typedef std::pair< Maneuver, uint32_t > ManeuverWithDistance;
}

interface Guidance {
  version {
    major 1
    minor 0
  }

  //////// Broadcasts    ////////

  // defined in VoiceOutputListener
  broadcast announcementNotification {
    out {
      GuidanceTypes.VoiceOutputType outputType
      GuidanceTypes.VoiceOutput output
    }
  }

  broadcast changePointInfosUpdated {
    out {
      GuidanceTypes.ChangePointInfo[] changePoints
    }
  }

  broadcast currentRoadNameChanged {
    out {
      String newRoadName
    }
  }

  broadcast currentSpeedChanged {
    out {
      Float newSpeedMS
    }
  }

  broadcast destinationReached { }

  broadcast distanceToNextManeuverChanged {
    out {
      UInt32 newDistance
    }
  }

  broadcast gpsLost { }

  broadcast gpsRestored { }

  broadcast headingToNextManeuverChanged {
    out {
      UInt16 newHeading
    }
  }

  broadcast laneInfoShow {
    out {
      GuidanceTypes.LaneInfo[] laneInfos
    }
  }

  broadcast maneuverAvailable {
    out {
      GuidanceTypes.ManeuverWithDistance maneuverWithDistance
    }
  }

  broadcast noDetourFound { }

  broadcast noRouteAlternativeAvailable { }

  broadcast optimalTtaRouteAvailable {
    out {
      GuidanceTypes.Route route
    }
  }

  broadcast remainingDistanceChanged {
    out {
      UInt32 newRemainingDistanceM
    }
  }

  broadcast rerouteBegin { }

  broadcast rerouteEnd { }

  broadcast rerouteFailed { }

  broadcast routeAlternativeTimeToArrivalChanged {
    out {
      GuidanceTypes.RouteAlternativeInfo routeInfo
    }
  }

  broadcast routeAlternativesChanged {
    out {
      GuidanceTypes.AlternativeRoutesChangedReason reason
      GuidanceTypes.Route route
    }
  }

  broadcast routeLeft {
  }

  broadcast routeUpdated:Base {
    out {
      GuidanceTypes.Route route
      GuidanceTypes.MainRouteChangedReason reason
    }
  }

  broadcast routeUpdated:LastStopOverReached {
    out {
      GuidanceTypes.Route route
      UInt32 lastReachedStopoverIndex
      GuidanceTypes.MainRouteChangedReason reason
    }
  }

  broadcast signpostShow {
    out {
      GuidanceTypes.Maneuver maneuver
    }
  }

  broadcast stopoverReached {
    out {
      GuidanceTypes.RoutePlan routePlan
      UInt32 stopover
    }
  }

  broadcast timeToArrivalChanged {
    out {
      GuidanceTypes.RouteTta newTtaWithPenalty
      GuidanceTypes.RouteTta newTtaWithoutPenalty
    }
  }

  broadcast timeToNextManeuverChanged {
    out {
      GuidanceTypes.RouteTta newTtaWithPenalty
      GuidanceTypes.RouteTta newTtaWithoutPenalty
    }
  }

  broadcast trackingDistanceChanged {
    out {
      UInt32 newDistanceM
    }
  }

  //////// Attributes    ////////

  attribute GuidanceTypes.NavigationOptions navigationOptions readonly
  attribute GuidanceTypes.GuidanceMode mode readonly
  attribute GuidanceTypes.GuidanceState ^state readonly  // state is a reserved keyword
  attribute GuidanceTypes.RouterPenalty penalty

  //////// Methods       ////////

  method checkForOptimalTtaRoute {
    in {}
    out {}
    error NavigationTypes.ErrorCode
  }

  method getAllManeuvers {
    in {}
    out {
      GuidanceTypes.ManeuverWithDistance[] maneuversWithDistancesM
    }
    error NavigationTypes.ErrorCode
  }

  // naming in impl and listener unaligned (getAverageSpeedMS)
  method getAverageSpeed {
    in {}
    out {
      Float avgSpeedMS
    }
    error NavigationTypes.ErrorCode
  }

  // naming in impl and listener unaligned (getBreakCountBeforeManeuver)
  method getBreakOutCountBeforeManeuver {
    in {
      GuidanceTypes.BreakOutManeuver maneuver
      GuidanceTypes.BreakOutType breakType
    }
    out {
      UInt16 breakCount
    }
    error NavigationTypes.ErrorCode
  }

  // missing in GuidanceImpl
  // method getChangePointInfos {
  //   in {}
  //   out {
  //     GuidanceTypes.ChangePointInfo[] changePointInfos
  //   }
  //   error NavigationTypes.ErrorCode
  //   // has no error in listener, surely a mistake
  // }

  method getCountryInfo {
    in {}
    out {
      GuidanceTypes.CountryInfo countryInfo
    }
    error NavigationTypes.ErrorCode
  }

  method getDistanceToNextDecisionPoint {
    in {}
    out {
      UInt32 distance
    }
    error NavigationTypes.ErrorCode
  }

  method getDistanceToNextManeuver {
    in {}
    out {
      UInt32 distance
    }
    error NavigationTypes.ErrorCode
  }

  // naming in impl and listener unaligned (getElapsedDistanceM)
  method getElapsedDistance {
    in {
      GuidanceTypes.RouteScope scope
    }
    out {
      UInt32 distance
    }
    error NavigationTypes.ErrorCode
  }

  // naming in impl and listener unaligned (getElapsedDistanceM)
  method getElapsedTime {
    in {}
    out {
      UInt32 elapsedTime
    }
    error NavigationTypes.ErrorCode
  }

  method getGuidanceProgress {
    in {}
    out {
      GuidanceTypes.GuidanceProgress progress
    }
    error NavigationTypes.ErrorCode
  }

  method getHeadingToNextManeuver {
    in {}
    out {
      UInt16 heading
    }
    error NavigationTypes.ErrorCode
  }

  method getLastSession {
    in {}
    out {
      GuidanceTypes.GuidanceSession session
    }
    error NavigationTypes.ErrorCode
  }

  method getNextManeuver {
    in {}
    out {
      GuidanceTypes.ManeuverWithDistance maneuverWithDistanceM
    }
    error NavigationTypes.ErrorCode
  }

  // naming in impl and listener unaligned (getRemainingDistanceM)
  method getRemainingDistance {
    in {
      GuidanceTypes.RouteScope scope
    }
    out {
      UInt32 distance
    }
    error NavigationTypes.ErrorCode
  }

  // uses the same callback as below
  method getRemainingManeuvers::Primary {
    in {}
    out {
      GuidanceTypes.ManeuverWithDistance[] maneuversWithDistancesM
    }
    error NavigationTypes.ErrorCode
  }

  // uses the same callback as above
  method getRemainingManeuvers::LimitManeuvers {
    in {
      UInt32 maxNumberOfRemainingManeuvers
    }
    out {
      GuidanceTypes.ManeuverWithDistance[] maneuversWithDistancesM
    }
    error NavigationTypes.ErrorCode
  }

  method getRoute {
    in {}
    out {
      GuidanceTypes.Route route
    }
    error NavigationTypes.ErrorCode
  }

  // uses the same callback as below
  method getTimeToArrival:ToManeuverOld {
    in {
      GuidanceTypes.Maneuver maneuver
    }
    out {
      GuidanceTypes.RouteTta tta
    }
    error NavigationTypes.ErrorCode
  }

  // uses the same callback as below
  method getTimeToArrival:ToManeuver {
    in {
      GuidanceTypes.Maneuver maneuver
      GuidanceTypes.RouterPenalty penalty
    }
    out {
      GuidanceTypes.RouteTta ttaWithPenalty
      GuidanceTypes.RouteTta ttaWithoutPenalty
    }
    error NavigationTypes.ErrorCode
  }

  // uses the same callback as above
  method getTimeToArrival:ToRoute {
    in {
      GuidanceTypes.RouteScope scope
      GuidanceTypes.RouterPenalty penalty
    }
    out {
      GuidanceTypes.RouteTta ttaWithPenalty
      GuidanceTypes.RouteTta ttaWithoutPenalty
    }
    error NavigationTypes.ErrorCode
  }

  // uses the same callback as above
  method getTimeToArrival:ToRouteOld {
    in {
      GuidanceTypes.RouteScope scope
    }
    out {
      GuidanceTypes.RouteTta tta
    }
    error NavigationTypes.ErrorCode
  }

  // defined in VoiceOutputListener
  method initVoiceOutput {
    in {
      GuidanceTypes.VoicePackage voicePackage
    }
    error NavigationTypes.ErrorCode
  }

  // async version is deprecated
  method pause {
    in {}
    out {}
    error NavigationTypes.ErrorCode
  }

  // async version is deprecated
  method resume {
    in {}
    out {}
    error NavigationTypes.ErrorCode
  }

  // defined in VoiceOutputListener
  method repeatLastOutput {
    in {}
    out {
      GuidanceTypes.VoiceOutput lastOutput
    }
    error NavigationTypes.ErrorCode
  }

  // missing in GuidanceImpl
  // ongoing request with request id, but callback in changePointInfosUpdated
  // method requestChangePointInfosNotifications {
  //  in {
  //  }
  //  error NavigationTypes.ErrorCode
  // }

  method startNavigation:WithSession {
    in {
      GuidanceTypes.GuidanceSession session
    }
    out {}
    error NavigationTypes.ErrorCode
  }

  method startNavigation:WithRoute {
    in {
      GuidanceTypes.Route route
      GuidanceTypes.RouteToCompute alternatives
      GuidanceTypes.NavigationOptions options
    }
    out {
      GuidanceTypes.RouteAlternatives acceptedAlternatives
    }
    error NavigationTypes.ErrorCode
  }

  // method missing in impl
  method startNavigation:WithRouteAndWaypoint {
    in {
      GuidanceTypes.Route route
      UInt32 startWaypointIndex
      GuidanceTypes.RouteToCompute alternatives
      GuidanceTypes.NavigationOptions options
    }
    out {
      GuidanceTypes.RouteAlternatives acceptedAlternatives
    }
    error NavigationTypes.ErrorCode
  }

  method startNavigation:WithRouteAndWaypointAndAdditionalOptions {
    in {
      GuidanceTypes.Route route
      UInt32 startWaypointIndex
      GuidanceTypes.RouteToCompute alternatives
      GuidanceTypes.NavigationOptions options
      GuidanceTypes.MainRouteOptions mainrouteOptions
    }
    out {
      GuidanceTypes.RouteAlternatives acceptedAlternatives
    }
    error NavigationTypes.ErrorCode
  }

  method startObservation {
    in {
      GuidanceTypes.Route route
      GuidanceTypes.RouteAlternatives alternatives
    }
    out {
      GuidanceTypes.RouteAlternatives acceptedAlternatives
    }
    error NavigationTypes.ErrorCode
  }

  method startTracking {
    in {}
    out {}
    error NavigationTypes.ErrorCode
  }

  method triggerAvoidanceRerouting {
    in {}
    out {}
    error NavigationTypes.ErrorCode
  }


  method updateNavigationOptions {
    in {
      GuidanceTypes.NavigationOptions options
    }
    out {}
    error NavigationTypes.ErrorCode
  }

  // method missing in impl
  method updateRoute:NoOptions {
    in {
      GuidanceTypes.Route route
      UInt32 startStopoverIndex
    }
    out {}
    error NavigationTypes.ErrorCode
  }

  method updateRoute:Primary {
    in {
      GuidanceTypes.Route route
      UInt32 startStopoverIndex
      GuidanceTypes.MainRouteOptions options
    }
    out {}
    error NavigationTypes.ErrorCode
  }

  method updateRouteAlternatives {
    in {
      GuidanceTypes.RouteToCompute newRouteAlternatives
    }
    out {
      GuidanceTypes.RouteAlternatives acceptedAlternatives
      GuidanceTypes.RouteAlternatives rejectedAlternatives
    }
    error NavigationTypes.ErrorCode
  }

  method updateRoutePlan:Primary {
    in {
      GuidanceTypes.RoutePlan routePlan
      GuidanceTypes.RouterOptions routerOptions
      GuidanceTypes.RouterPenalty penalty
      UInt32 startStopoverIndex
      GuidanceTypes.MainRouteOptions mainrouteOptions
    }
    out {}
    error NavigationTypes.ErrorCode
  }

  // method missing in impl
  method updateRoutePlan:NoMainRouteOptions {
    in {
      GuidanceTypes.RoutePlan routePlan
      GuidanceTypes.RouterOptions routerOptions
      GuidanceTypes.RouterPenalty penalty
      UInt32 startStopoverIndex
    }
    out {}
    error NavigationTypes.ErrorCode
  }

  //////// TypeDefs      ////////

  typedef Instance is BuiltIn.InstanceId
}