package com.here.navigation.guidance

import com.here.* from "classpath:/com/here/BuiltIn.fidl"
import com.here.navigation.* from "../NavigationTypes.fidl"

typeCollection GuidanceTypes {
  version {
    major 1
    minor 0
  }

  <** @source-uri: legacy/navcore/GuidanceSession.h **>
  typedef GuidanceSession is BuiltIn.ExternalType  // Not generated, use legacy

  <** @source-uri: legacy/navcore/GuidanceTypes.h **>
  typedef MainRouteChangedReason is BuiltIn.ExternalType // Not generated, use legacy

  <** @source-uri: legacy/navcore/MapMatcher.h **>
  typedef MapMatcher is BuiltIn.ExternalType // Not generated, use legacy

  <** @source-uri: legacy/navcore/NavigationOptions.h **>
  typedef NavigationOptions is BuiltIn.ExternalType // Not generated, use legacy

  <** @source-uri: legacy/navcore/MainRouteOptions.h **>
  typedef MainRouteOptions is BuiltIn.ExternalType // Not generated, use legacy

  <** @source-uri: legacy/navcore/Route.h **>
  typedef Route is BuiltIn.ExternalType // Not generated, use legacy

  map RouteToCompute {
    Route to Boolean
  }
}

interface Guidance {
  version {
    major 1
    minor 0
  }

  broadcast onRouteLeft {
    out {
    }
  }

  broadcast onRouteUpdated {
    out {
        GuidanceTypes.Route route // Not generated, use legacy object
        GuidanceTypes.MainRouteChangedReason reason // Not generated, use legacy object
    }
  }

  attribute NavigationTypes.NavigationOptions options
  attribute NavigationTypes.GuidanceMode mode readonly
  attribute NavigationTypes.GuidanceState state readonly
  attribute NavigationTypes.RouterPenalty penalty


  method startNavigation:OneParam {
    in {
      GuidanceTypes.GuidanceSession session // Not generated, use legacy object
    }
    error NavigationTypes.ErrorCode
  }

  method startNavigation:ThreeParams {
    in {
      GuidanceTypes.Route route // Not generated, use legacy object
      GuidanceTypes.RouteToCompute alternatives
      GuidanceTypes.NavigationOptions options // Not generated, use legacy
    }
    out {
      GuidanceTypes.RouteToCompute alternatives
    }
    error NavigationTypes.ErrorCode
  }

  method startTracking {
    in {
    }
    error NavigationTypes.ErrorCode
  }

  method pause {
    error NavigationTypes.ErrorCode
  }

  method resume {
    error NavigationTypes.ErrorCode
  }

  method getRoute{
    out {
        GuidanceTypes.Route route // Not generated, use legacy object
    }
  }

  method updateRoute{
    in {
        GuidanceTypes.Route route // Not generated, use legacy object
        UInt32 startStopoverIndex
        GuidanceTypes.MainRouteOptions options // Not generated, use legacy object
    }
  }

  method getNextManeuver{
  }

  // use existing legacy impl

  typedef Instance is BuiltIn.InstanceId
}