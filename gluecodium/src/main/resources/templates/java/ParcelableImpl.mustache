{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
private {{resolveName}}(final Parcel in_parcel) {
{{#fields}}
{{#set type=typeRef.type.actualType field=this}}{{prefixPartial "parcelRead" "    "}}{{/set}}
{{/fields}}
}

@Override
public int describeContents() {
    return 0;
}

@Override
public void writeToParcel(final Parcel out_parcel, final int flags) {
{{#fields}}
    out_parcel.write{{#set type=typeRef.type.actualType field=this}}{{>parcelWriteSuffix}}{{/set}};
{{/fields}}
}{{!!

}}{{+parcelRead}}{{!!
}}{{#instanceOf type "LimeList"}}this.{{resolveName field}} = new ArrayList<>();
in_parcel.readList(this.{{resolveName field}}, Thread.currentThread().getContextClassLoader());{{/instanceOf}}{{!!
}}{{#instanceOf type "LimeMap"}}this.{{resolveName field}} = new HashMap<>();
in_parcel.readMap(this.{{resolveName field}}, Thread.currentThread().getContextClassLoader());{{/instanceOf}}{{!!
}}{{#instanceOf type "LimeSet"}}java.util.ArrayList<{{resolveName type.elementType}}> __{{resolveName field}} = new java.util.ArrayList<>();
in_parcel.readList(__{{resolveName field}}, Thread.currentThread().getContextClassLoader());
{{#instanceOf type.elementType.type.actualType "LimeEnumeration"}}this.{{resolveName field}} = EnumSet.copyOf(__{{resolveName field}});{{/instanceOf}}{{!!
}}{{#notInstanceOf type.elementType.type.actualType "LimeEnumeration"}}this.{{resolveName field}} = new HashSet<>(__{{resolveName field}});{{/notInstanceOf}}{{/instanceOf}}{{!!
}}{{#instanceOf type "LimeStruct"}}this.{{resolveName field}} = in_parcel.readParcelable(Thread.currentThread().getContextClassLoader());{{/instanceOf}}{{!!
}}{{#instanceOf type "LimeEnumeration"}}this.{{resolveName field}} = {{resolveName typeRef}}.values()[in_parcel.readInt()];{{/instanceOf}}{{!!
}}{{#instanceOf type "LimeBasicType"}}{{#switch type.typeId.toString}}{{!!
}}{{#case "Boolean"}}this.{{resolveName field}} = in_parcel.readByte() != 0;{{/case}}{{!!
}}{{#case "Short"}}this.{{resolveName field}} = (short)in_parcel.readInt();{{/case}}{{!!
}}{{#case "String"}}this.{{resolveName field}} = in_parcel.readString();{{/case}}{{!!
}}{{#case "Blob"}}this.{{resolveName field}} = in_parcel.createByteArray();{{/case}}{{!!
}}{{#default}}this.{{resolveName field}} = in_parcel.read{{#resolveName type}}{{capitalize this}}{{/resolveName}}();{{/default}}{{!!
}}{{/switch}}{{/instanceOf}}{{!!
}}{{/parcelRead}}{{!!

}}{{+parcelWriteSuffix}}{{!!
}}{{#instanceOf type "LimeList"}}List({{resolveName field}}){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeMap"}}Map({{resolveName field}}){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeSet"}}List(java.util.Arrays.asList({{resolveName field}}.toArray())){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeStruct"}}Parcelable({{resolveName field}}, 0){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeEnumeration"}}Int({{resolveName field}}.ordinal()){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeBasicType"}}{{#switch type.typeId.toString}}{{!!
}}{{#case "Boolean"}}Byte((byte)({{resolveName field}} ? 1 : 0)){{/case}}{{!!
}}{{#case "Short"}}Int({{resolveName field}}){{/case}}{{!!
}}{{#case "String"}}String({{resolveName field}}){{/case}}{{!!
}}{{#case "Blob"}}ByteArray({{resolveName field}}){{/case}}{{!!
}}{{#default}}{{#resolveName type}}{{capitalize this}}{{/resolveName}}({{resolveName field}}){{/default}}{{!!
}}{{/switch}}{{/instanceOf}}{{!!
}}{{/parcelWriteSuffix}}
