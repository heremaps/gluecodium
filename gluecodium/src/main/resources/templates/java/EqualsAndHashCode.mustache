{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
@Override
public boolean equals(Object obj) {
    if (obj == this) return true;
    if (!(obj instanceof {{resolveName}})) return false;
    final {{resolveName}} other = ({{resolveName}}) obj;
    return {{joinPartial fields "fieldEq" " &&
            " }};
}

@Override
public int hashCode() {
    int hash = 7;
{{#fields}}
    hash = 31 * hash + {{>fieldHash}};
{{/fields}}
    return hash;
}{{!!

}}{{+fieldEq}}{{!!
    }}{{#set field=this type=typeRef.type.actualType}}{{#instanceOf type "LimeBasicType"}}{{!!
    }}{{#if typeRef.isNullable}}{{>instanceEquals}}{{/if}}{{!!
    }}{{#unless typeRef.isNullable}}{{!!
        }}{{#switch type.typeId.toString}}{{!!
        }}{{#case "Float"}}Float.compare(this.{{resolveName field}}, other.{{resolveName field}}) == 0{{/case}}{{!!
        }}{{#case "Double"}}Double.compare(this.{{resolveName field}}, other.{{resolveName field}}) == 0{{/case}}{{!!
        }}{{#case "Boolean"}}this.{{resolveName field}} == other.{{resolveName field}}{{/case}}{{!!
        }}{{#default}}{{#if type.typeId.isNumericType}}this.{{resolveName field}} == other.{{resolveName field}}{{/if}}{{!!
        }}{{#unless type.typeId.isNumericType}}{{>instanceEquals}}{{/unless}}{{/default}}{{!!
        }}{{/switch}}{{!!
    }}{{/unless}}{{/instanceOf}}{{!!
    }}{{#notInstanceOf type "LimeBasicType"}}{{>instanceEquals}}{{/notInstanceOf}}{{/set}}{{!!
}}{{/fieldEq}}{{!!

}}{{+fieldHash}}{{!!
    }}{{#set field=this type=typeRef.type.actualType}}{{#instanceOf type "LimeBasicType"}}{{!!
    }}{{#if typeRef.isNullable}}{{>instanceHash}}{{/if}}{{!!
    }}{{#unless typeRef.isNullable}}{{!!
        }}{{#switch type.typeId.toString}}{{!!
        }}{{#case "Boolean"}}(this.{{resolveName field}} ? 79 : 97){{/case}}{{!!
        }}{{#case "UInt"}}{{>longHash}}{{/case}}{{!!
        }}{{#case "Long"}}{{>longHash}}{{/case}}{{!!
        }}{{#case "ULong"}}{{>longHash}}{{/case}}{{!!
        }}{{#case "Float"}}Float.floatToIntBits(this.{{resolveName field}}){{/case}}{{!!
        }}{{#case "Double"}}(int) (Double.doubleToLongBits(this.{{resolveName field}}) ^ (Double.doubleToLongBits(this.{{resolveName field}}) >>> 32)){{/case}}{{!!
        }}{{#default}}{{#if type.typeId.isNumericType}}this.{{resolveName field}}{{/if}}{{!!
        }}{{#unless type.typeId.isNumericType}}{{>instanceHash}}{{/unless}}{{/default}}{{!!
        }}{{/switch}}{{!!
    }}{{/unless}}{{/instanceOf}}{{!!
    }}{{#notInstanceOf type "LimeBasicType"}}{{>instanceHash}}{{/notInstanceOf}}{{/set}}{{!!
}}{{/fieldHash}}{{!!

}}{{+instanceEquals}}java.util.Objects.equals(this.{{resolveName field}}, other.{{resolveName field}}){{/instanceEquals}}{{!!

}}{{+longHash}}(int) (this.{{resolveName field}} ^ (this.{{resolveName field}} >>> 32)){{/longHash}}{{!!

}}{{+instanceHash}}(this.{{resolveName field}} != null ? this.{{resolveName field}}.hashCode() : 0){{/instanceHash}}
