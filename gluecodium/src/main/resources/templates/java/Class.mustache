{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/DocComment}}
{{#annotations}}
@{{name}}
{{/annotations}}
{{#if visibility.toString}}{{visibility}} {{/if}}{{#qualifiers}}{{.}} {{/qualifiers}}class {{name}} {{#if this.extendedClass}}extends {{extendedClass.name}} {{/if}}{{#if parentInterfaces}}implements {{join parentInterfaces delimiter=", " }} {{/if}}{
{{#if isParcelable}}{{prefixPartial "java/ParcelableCreator" "    "}}

{{/if}}
{{#constants}}{{prefixPartial "java/Constant" "    "}}
{{/constants}}
{{#fields}}{{prefixPartial "java/Field" "    "}}
{{/fields}}
{{#enums}}{{prefixPartial "java/Enum" "    "}}
{{/enums}}
{{#exceptions}}{{#set static=true}}{{prefixPartial "java/ExceptionDefinition" "    "}}{{/set}}
{{/exceptions}}
{{#innerClasses}}{{prefixPartial "java/Class" "    "}}
{{/innerClasses}}
{{#innerInterfaces}}{{prefixPartial "java/Interface" "    "}}
{{/innerInterfaces}}
{{#set className=name}}{{#constructors}}
{{prefixPartial "java/MethodComment" "    "}}
    {{visibility}} {{className}}({{joinPartial parameters "java/Parameter" ", "}}){{#exception}} throws {{name}}{{/exception}} {
{{#if isImplClass}}
        this({{name}}({{join parameters delimiter=", " }}));
        cacheThisInstance();
{{/if}}{{#unless isImplClass}}
        {{className}} _other = {{name}}({{join parameters delimiter=", " }});
{{#fields}}        this.{{name}} = _other.{{name}};
{{/fields}}
{{/unless}}
    }
{{/constructors}}{{/set}}
{{#if isImplClass}}
{{prefixPartial "java/NativeConstructor" "    "}}
{{#if constructors}}
    private native void cacheThisInstance();
{{/if}}
{{/if}}
{{#if fields}}{{#unless constructors}}

{{#if generatedConstructorComment}}
    /**
{{prefix generatedConstructorComment "     * "}}
{{#uninitializedFields}}
     * @param {{name}} {{prefix comment.documentation "     * " skipFirstLine=true}}
{{/uninitializedFields}}
     */
{{/if}}
    {{#if freeArgsConstructorVisibility.toString}}{{freeArgsConstructorVisibility}} {{/if}}{{name}}{{!!
    }}({{joinPartial uninitializedFields "java/Parameter" ", "}}) {
{{#fields}}        this.{{name}} = {{#if initial.isCustom}}{{initial.name}}{{/if}}{{#unless initial.isCustom}}{{name}}{{/unless}};
{{/fields}}
    }{{#if hasDefaults}}

{{#if generatedConstructorComment}}
    /**
{{prefix generatedConstructorComment "     * "}}
{{#fields}}
     * @param {{name}} {{prefix comment.documentation "     * " skipFirstLine=true}}
{{/fields}}
     */
{{/if}}
    {{#if allArgsConstructorVisibility.toString}}{{allArgsConstructorVisibility}} {{/if}}{{name}}{{!!
    }}({{joinPartial fields "java/Parameter" ", "}}) {
{{#fields}}        this.{{name}} = {{name}};
{{/fields}}
    }{{/if}}
{{/unless}}{{/if}}
{{#if isParcelable}}{{prefixPartial "java/ParcelableImpl" "    "}}

{{/if}}
{{#if isEquatable}}{{prefixPartial "java/EqualsAndHashCode" "    "}}
{{/if}}
{{#hasNativeEquatable}}
    @Override
    public native boolean equals(Object rhs);

    @Override
    public native int hashCode();

{{/hasNativeEquatable}}
{{#if needsBuilder}}{{#unless constructors}}{{prefixPartial "java/FieldsBuilder" "    "}}

{{/unless}}{{/if}}
{{#methods}}{{#if isCached}}
    private {{#if isStatic}}static {{/if}}{{returnType.name}} cache_{{name}};
    private {{#if isStatic}}static {{/if}}boolean is_cached_{{name}} = false;

{{prefixPartial "java/MethodComment" "    "}}
{{#allAnnotations}}
    @{{name}}
{{/allAnnotations}}
    {{#if visibility.toString}}{{visibility}} {{/if}}{{!!
}}{{#if isStatic}}static {{/if}}{{returnType.name}} {{name}}({{joinPartial parameters "java/Parameter" ", "}}) {
        if (!is_cached_{{name}}) {
            cache_{{name}} = {{name}}_private({{#parameters}}{{name}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
            is_cached_{{name}} = true;
        }
        return cache_{{name}};
    }

    private {{#if isStatic}}static {{/if}}native {{returnType.name}} {{name}}_private{{!!
}}({{joinPartial parameters "java/Parameter" ", "}});
{{/if}}{{!!
}}{{#unless isCached}}{{prefixPartial "java/MethodSignature" "    "}}{{/unless}}
{{/methods}}
}
