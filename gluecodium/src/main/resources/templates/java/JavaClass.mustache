{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/JavaDocComment}}{{>java/JavaAttributes}}
{{resolveName "visibility"}}{{#if forceStatic}}static {{/if}}{{!!
}}{{#unless this.isOpen visibility.isInternal logic="and"}}final {{/unless}}{{!!
}}class {{resolveName}} extends {{#if this.parentClass}}{{resolveName this.parentClass "" "ref"}}{{/if}}{{!!
}}{{#unless this.parentClass}}NativeBase{{/unless}}{{#if this.parentInterfaces}} implements {{!!
}}{{#this.parentInterfaces}}{{resolveName this "" "ref"}}{{#if iter.hasNext}}, {{/if}}{{/this.parentInterfaces}}{{/if}} {
{{#constants}}{{prefixPartial "java/JavaConstant" "    "}}
{{/constants}}
{{>java/JavaContainerContents}}
{{#set classElement=this}}{{#constructors}}
{{prefixPartial "java/JavaMethodComment" "    "}}
    {{resolveName "visibility"}}{{resolveName classElement}}({{joinPartial parameters "java/JavaParameter" ", "}}){{!!
    }}{{#thrownType}} throws {{resolveName typeRef}}{{/thrownType}} {
        this({{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}), (Object)null);
{{#unless classElement.attributes.nocache}}
        cacheThisInstance();
{{/unless}}
    }
{{/constructors}}{{/set}}
{{#unless visibility.isInternal}}
    /**
     * For internal use only.
     * @hidden
     */{{/unless}}
    protected {{resolveName}}(final long nativeHandle, final Object dummy) {
        super(nativeHandle, {{#ifPredicate "needsDisposer"}}new Disposer() {
            @Override
            public void disposeNative(long handle) {
                disposeNativeHandle(handle);
            }
        }{{/ifPredicate}}{{#unlessPredicate "needsDisposer"}}dummy{{/unlessPredicate}});
    }{{#ifPredicate "needsDisposer"}}

    private static native void disposeNativeHandle(long nativeHandle);{{/ifPredicate}}
{{#if constructors}}{{#unless this.attributes.nocache}}
    private native void cacheThisInstance();
{{/unless}}{{/if}}

{{#if attributes.equatable attributes.pointerEquatable logic="or"}}
    @Override
    public native boolean equals(Object rhs);

    @Override
    public native int hashCode();

{{/if}}

{{#set isClass=true}}{{#functions}}
{{prefixPartial "java/JavaFunction" "    "}}
{{/functions}}{{/set}}
{{#properties}}{{#set isCached=attributes.cached property=this}}
{{#set isGetter=true}}{{#getter}}
{{prefixPartial "java/JavaFunction" "    "}}
{{/getter}}{{/set}}
{{#setter}}
{{prefixPartial "java/JavaFunction" "    "}}
{{/setter}}{{/set}}
{{/properties}}

{{#if this.parentInterfaces}}{{#set override=true classElement=this forcePublic=true}}
{{#set isClass=true}}{{#classElement.interfaceInheritedFunctions}}
{{prefixPartial "java/JavaFunction" "    "}}
{{/classElement.interfaceInheritedFunctions}}{{/set}}
{{#classElement.interfaceInheritedProperties}}{{#set isCached=attributes.cached property=this}}
{{#set isGetter=true}}{{#getter}}
{{prefixPartial "java/JavaFunction" "    "}}
{{/getter}}{{/set}}
{{#setter}}
{{prefixPartial "java/JavaFunction" "    "}}
{{/setter}}{{/set}}
{{/classElement.interfaceInheritedProperties}}
{{/set}}{{/if}}

{{#eval "optimizedLists" path}}{{#this}}
{{#elementType}}{{prefixPartial "java/LazyNativeList" "    "}}{{/elementType}}
{{/this}}{{/eval}}
}
