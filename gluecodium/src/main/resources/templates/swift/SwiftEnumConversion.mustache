{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
internal func copyToCType(_ swiftEnum{{#if external.swift.converter}}_ext{{/if}}: {{resolveName this "" "ref"}}) -> PrimitiveHolder<UInt32> {
{{#if external.swift.converter}}
    let swiftEnum = {{external.swift.converter}}.convertToInternal(swiftEnum_ext)
{{/if}}
    return PrimitiveHolder({{#ifPredicate "skipDeclaration"}}UInt32({{/ifPredicate}}swiftEnum.rawValue{{#ifPredicate "skipDeclaration"}}){{/ifPredicate}})
}
internal func moveToCType(_ swiftEnum: {{resolveName this "" "ref"}}) -> PrimitiveHolder<UInt32> {
    return copyToCType(swiftEnum)
}

internal func copyToCType(_ swiftEnum{{#if external.swift.converter}}_ext{{/if}}: {{resolveName this "" "ref"}}?) -> RefHolder {
{{#ifPredicate "skipDeclaration"}}
    if let rawValue = swiftEnum?.rawValue {
        return copyToCType(UInt32(rawValue) as UInt32?)
    } else {
        return RefHolder(0)
    }
{{/ifPredicate}}{{#unlessPredicate "skipDeclaration"}}
{{#if external.swift.converter}}
    guard let swiftEnum_ext = swiftEnum_ext else {
        return RefHolder(0)
    }
    let swiftEnum = {{external.swift.converter}}.convertToInternal(swiftEnum_ext) as {{resolveName this "" "ref"}}_internal?
{{/if}}
    return copyToCType(swiftEnum?.rawValue)
{{/unlessPredicate}}
}
internal func moveToCType(_ swiftEnum{{#if external.swift.converter}}_ext{{/if}}: {{resolveName this "" "ref"}}?) -> RefHolder {
{{#ifPredicate "skipDeclaration"}}
    if let rawValue = swiftEnum?.rawValue {
        return moveToCType(UInt32(rawValue) as UInt32?)
    } else {
        return RefHolder(0)
    }
{{/ifPredicate}}{{#unlessPredicate "skipDeclaration"}}
{{#if external.swift.converter}}
    guard let swiftEnum_ext = swiftEnum_ext else {
        return RefHolder(0)
    }
    let swiftEnum = {{external.swift.converter}}.convertToInternal(swiftEnum_ext) as {{resolveName this "" "ref"}}_internal?
{{/if}}
    return moveToCType(swiftEnum?.rawValue)
{{/unlessPredicate}}
}

internal func copyFromCType(_ cValue: UInt32) -> {{resolveName this "" "ref"}} {
{{#if external.swift.converter}}
    return {{external.swift.converter}}.convertFromInternal({{resolveName this "" "ref"}}_internal(rawValue: cValue)!)
{{/if}}{{#unless external.swift.converter}}
    return {{resolveName this "" "ref"}}(rawValue: {{#ifPredicate "skipDeclaration"}}UInt({{/ifPredicate}}cValue{{#ifPredicate "skipDeclaration"}}){{/ifPredicate}})!
{{/unless}}
}
internal func moveFromCType(_ cValue: UInt32) -> {{resolveName this "" "ref"}} {
    return copyFromCType(cValue)
}

internal func copyFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}}? {
    guard handle != 0 else {
        return nil
    }
{{#if external.swift.converter}}
    return {{external.swift.converter}}.convertFromInternal({{resolveName this "" "ref"}}_internal(rawValue: uint32_t_value_get(handle))!)
{{/if}}{{#unless external.swift.converter}}
    return {{resolveName this "" "ref"}}(rawValue: {{#ifPredicate "skipDeclaration"}}UInt({{/ifPredicate}}uint32_t_value_get(handle){{#ifPredicate "skipDeclaration"}}){{/ifPredicate}})!
{{/unless}}
}
internal func moveFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}}? {
    defer {
        uint32_t_release_handle(handle)
    }
    return copyFromCType(handle)
}
