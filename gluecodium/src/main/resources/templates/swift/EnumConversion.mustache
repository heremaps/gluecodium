{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
internal func copyToCType(_ swiftEnum: {{name}}) -> PrimitiveHolder<UInt32> {
    return PrimitiveHolder({{#if isExternal}}UInt32({{/if}}swiftEnum.rawValue{{#if isExternal}}){{/if}})
}
internal func moveToCType(_ swiftEnum: {{name}}) -> PrimitiveHolder<UInt32> {
    return copyToCType(swiftEnum)
}

internal func copyToCType(_ swiftEnum: {{name}}?) -> RefHolder {
{{#if isExternal}}
    if let rawValue = swiftEnum?.rawValue {
        return copyToCType(UInt32(rawValue) as UInt32?)
    } else {
        return RefHolder(0)
    }
{{/if}}{{#unless isExternal}}
    return copyToCType(swiftEnum?.rawValue)
{{/unless}}
}
internal func moveToCType(_ swiftEnum: {{name}}?) -> RefHolder {
{{#if isExternal}}
    if let rawValue = swiftEnum?.rawValue {
        return moveToCType(UInt32(rawValue) as UInt32?)
    } else {
        return RefHolder(0)
    }
{{/if}}{{#unless isExternal}}
    return moveToCType(swiftEnum?.rawValue)
{{/unless}}
}

internal func copyFromCType(_ cValue: UInt32) -> {{name}} {
    return {{name}}(rawValue: {{#if isExternal}}UInt({{/if}}cValue{{#if isExternal}}){{/if}})!
}
internal func moveFromCType(_ cValue: UInt32) -> {{name}} {
    return copyFromCType(cValue)
}

internal func copyFromCType(_ handle: _baseRef) -> {{name}}? {
    guard handle != 0 else {
        return nil
    }
    return {{name}}(rawValue: {{#if isExternal}}UInt({{/if}}uint32_t_value_get(handle){{#if isExternal}}){{/if}})!
}
internal func moveFromCType(_ handle: _baseRef) -> {{name}}? {
    defer {
        uint32_t_release_handle(handle)
    }
    return copyFromCType(handle)
}
