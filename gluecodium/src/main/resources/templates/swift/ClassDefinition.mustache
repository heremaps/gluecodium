{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>swift/Comment}}{{!!
}}{{#isInterface}}{{>ClassWithProtocol}}{{/isInterface}}
{{^isInterface}}{{>ClassWithoutProtocol}}{{/isInterface}}{{!!

}}{{+ClassWithoutProtocol}}{{!!
}}{{#if isObjcInterface}}@objcMembers
{{/if}}{{!!
}}{{visibility}} class {{simpleName}}{{#if hasParents}}: {{/if}}{{#parentClass}}{{.}}{{#if implementsProtocols}}, {{/if}}{{/parentClass}}{{join implementsProtocols delimiter=', '}} {

{{#typedefs}}
{{prefixPartial 'swift/Typedefs' '    '}}
{{/typedefs}}{{!!
}}{{#closures}}
{{prefixPartial "swift/Closure" "    "}}
{{/closures}}{{#set className=simpleName}}{{#constructors}}{{#unless isSkipped}}
{{prefixPartial "swift/MethodComment" "    "}}
    {{visibility}} {{#if overriding}}override {{/if}}init({{>swift/MethodParameterDeclaration}}){{#if error}} throws{{/if}} {
        let _result = {{#if error}}try {{/if}}{{className}}.{{name}}({{#parameters}}{{!!
}}{{#argumentLabel}}{{#isNotEq . "_"}}{{.}}: {{/isNotEq}}{{/argumentLabel}}{{^argumentLabel}}{{name}}: {{/argumentLabel}}{{!!
}}{{name}}{{#if iter.hasNext}}, {{/if}}{{/parameters}})
        {{#if useParentCInstance}}super.init(c{{parentClass}}: _result){{/if}}{{!!
        }}{{#unless useParentCInstance}}guard _result != 0 else {
            fatalError("Nullptr value is not supported for initializers")
        }
        c_instance = _result{{/unless}}
        {{cInstance}}_cache_swift_object_wrapper(c_instance, Unmanaged<AnyObject>.passUnretained(self).toOpaque())
    }

{{/unless}}{{/constructors}}{{/set}}{{!!

}}{{>CommonClassParts}}
}
{{/ClassWithoutProtocol}}{{!!

}}{{+ClassWithProtocol}}{{!!
}}{{#if isObjcInterface}}@objc
{{/if}}{{!!
}}{{visibility}} protocol {{simpleName}} : {{#if implementsProtocols}}{{join implementsProtocols delimiter=', '}}{{/if}}{{#unless implementsProtocols}}AnyObject{{/unless}} {
{{#typedefs}}{{prefixPartial 'swift/Typedefs' '    '}}
{{/typedefs}}{{!!
}}{{#closures}}
{{prefixPartial "swift/Closure" "    "}}
{{/closures}}
{{#properties}}{{#unless isSkipped}}
{{prefixPartial "swift/Comment" "    "}}
    {{#if isStatic}}static {{/if}}var {{name}}: {{type.publicName}}{{#if type.optional}}?{{/if}} { get {{#setter}}set {{/setter}}}
{{/unless}}{{/properties}}
{{#methods}}{{#unless isSkipped}}{{prefixPartial 'swift/MethodSignature' '    '}}
{{/unless}}{{/methods}}
}

internal class _{{simpleName}}: {{simpleName}} {

{{>CommonClassParts}}
}
{{/ClassWithProtocol}}{{!!

}}{{+CommonClassParts}}{{!!
}}{{#constants}}
{{prefixPartial "swift/Constant" "    "}}
{{/constants}}{{!!
}}{{#properties}}{{#unless isSkipped}}
{{prefixPartial 'swift/Property' '    '}}
{{/unless}}{{/properties}}{{!!

}}{{prefixPartial 'swift/Constructor' '    '}}{{!!

}}{{#classes}}
{{prefixPartial "swift/ClassDefinition" "    "}}
{{/classes}}{{!!

}}{{#enums}}
{{prefixPartial 'swift/Enum' '    '}}
{{/enums}}{{!!

}}{{#structs}}
{{prefixPartial 'swift/Struct' '    '}}
{{/structs}}{{!!

}}{{#methods}}{{#unless isSkipped}}
{{prefixPartial 'swift/Method' '    '}}
{{/unless}}{{/methods}}{{!!
}}{{/CommonClassParts}}
