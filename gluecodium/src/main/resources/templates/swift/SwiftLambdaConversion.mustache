{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>swift/ConversionVisibility}} func {{resolveName "mangled"}}copyFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}} {
    return {{resolveName "mangled"}}moveFromCType({{resolveName "CBridge"}}_copy_handle(handle))
}
{{>swift/ConversionVisibility}} func {{resolveName "mangled"}}moveFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}} {
    let refHolder = RefHolder(ref: handle, release: {{resolveName "CBridge"}}_release_handle)
    return { ({{#parameters}}p{{iter.position}}: {{resolveName typeRef}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{!!
    }} -> {{resolveName returnType}} in
{{#parameters}}
        let _p{{iter.position}} = {{>swift/ConversionPrefixTo}}moveToCType(p{{iter.position}})
{{/parameters}}
        return {{#returnType}}{{>swift/ConversionPrefixFrom}}{{/returnType}}moveFromCType({{resolveName "CBridge"}}_call(refHolder.ref{{!!
        }}{{#parameters}}, _p{{iter.position}}.ref{{/parameters}}))
    }
}

{{>swift/ConversionVisibility}} func {{resolveName "mangled"}}copyFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}}? {
    guard handle != 0 else {
        return nil
    }
    return {{resolveName "mangled"}}copyFromCType(handle) as {{resolveName this "" "ref"}}
}
{{>swift/ConversionVisibility}} func {{resolveName "mangled"}}moveFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}}? {
    guard handle != 0 else {
        return nil
    }
    return {{resolveName "mangled"}}moveFromCType(handle) as {{resolveName this "" "ref"}}
}

internal func {{resolveName "mangled"}}createFunctionalTable(_ swiftType: @escaping {{resolveName this "" "ref"}}) -> {{resolveName "CBridge"}}_FunctionTable {
    class {{resolveName "CBridge"}}_Holder {
        let closure: {{resolveName this "" "ref"}}
        init(_ closure: @escaping {{resolveName this "" "ref"}}) {
            self.closure = closure
        }
    }

    var functions = {{resolveName "CBridge"}}_FunctionTable()
    functions.swift_pointer = Unmanaged<AnyObject>.passRetained({{resolveName "CBridge"}}_Holder(swiftType)).toOpaque()
    functions.release = { swift_closure_pointer in
        if let swift_closure = swift_closure_pointer {
            Unmanaged<AnyObject>.fromOpaque(swift_closure).release()
        }
    }
    functions.{{resolveName "CBridge"}}_call = { swift_closure_pointer{{#parameters}}, p{{iter.position}}{{/parameters}} in
        let closure_holder = Unmanaged<AnyObject>.fromOpaque(swift_closure_pointer!).takeUnretainedValue() as! {{resolveName "CBridge"}}_Holder
        return {{#returnType}}{{>swift/ConversionPrefixTo}}{{/returnType}}copyToCType(closure_holder.closure({{!!
        }}{{#parameters}}{{>swift/ConversionPrefixFrom}}moveFromCType(p{{iter.position}}){{#if iter.hasNext}}, {{/if}}{{/parameters}})).ref
    }

    return functions
}

{{>swift/ConversionVisibility}} func {{resolveName "mangled"}}copyToCType(_ swiftType: @escaping {{resolveName this "" "ref"}}) -> RefHolder {
    let handle = {{resolveName "CBridge"}}_create_proxy({{resolveName "mangled"}}createFunctionalTable(swiftType))
    return RefHolder(handle)
}
{{>swift/ConversionVisibility}} func {{resolveName "mangled"}}moveToCType(_ swiftType: @escaping {{resolveName this "" "ref"}}) -> RefHolder {
    let handle = {{resolveName "CBridge"}}_create_proxy({{resolveName "mangled"}}createFunctionalTable(swiftType))
    return RefHolder(ref: handle, release: {{resolveName "CBridge"}}_release_handle)
}

{{>swift/ConversionVisibility}} func {{resolveName "mangled"}}copyToCType(_ swiftType: {{resolveName this "" "ref"}}?) -> RefHolder {
    guard let swiftType = swiftType else {
        return RefHolder(0)
    }

    let handle = {{resolveName "CBridge"}}_create_optional_proxy({{resolveName "mangled"}}createFunctionalTable(swiftType))
    return RefHolder(handle)
}
{{>swift/ConversionVisibility}} func {{resolveName "mangled"}}moveToCType(_ swiftType: {{resolveName this "" "ref"}}?) -> RefHolder {
    guard let swiftType = swiftType else {
        return RefHolder(0)
    }

    let handle = {{resolveName "CBridge"}}_create_optional_proxy({{resolveName "mangled"}}createFunctionalTable(swiftType))
    return RefHolder(ref: handle, release: {{resolveName "CBridge"}}_release_handle)
}
