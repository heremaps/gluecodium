{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#ifPredicate "hasWeakSupport"}}
{{conversionVisibility}} class {{resolveName}}_WeakHolder {
    weak var value: {{resolveName}}?

    init(_ value: {{resolveName}}) {
        self.value = value
    }
}

{{/ifPredicate}}
{{conversionVisibility}} func getRef(_ ref: {{resolveName this "" "ref"}}?, owning: Bool = true{{!!
}}{{#ifPredicate "hasWeakSupport"}}, isWeak: Bool = false{{/ifPredicate}}) -> RefHolder {

    guard let reference = ref else {
        return RefHolder(0)
    }

    if let instanceReference = reference as? NativeBase {
        let handle_copy = {{resolveName "CBridge"}}_copy_handle(instanceReference.c_handle)
        return owning
            ? RefHolder(ref: handle_copy, release: {{resolveName "CBridge"}}_release_handle)
            : RefHolder(handle_copy)
    }

    var functions = {{resolveName "CBridge"}}_FunctionTable()
{{#ifPredicate "hasWeakSupport"}}
    let strongRef: AnyObject = isWeak ? {{resolveName}}_WeakHolder(reference) : reference
    functions.swift_pointer = Unmanaged<AnyObject>.passRetained(strongRef).toOpaque()
{{/ifPredicate}}{{#unlessPredicate "hasWeakSupport"}}
    functions.swift_pointer = Unmanaged<AnyObject>.passRetained(reference).toOpaque()
{{/unlessPredicate}}
    functions.release = {swift_class_pointer in
        if let swift_class = swift_class_pointer {
            Unmanaged<AnyObject>.fromOpaque(swift_class).release()
        }
    }

{{#set class=this}}{{#class}}
{{#each inheritedFunctions functions}}{{#unless attributes.swift.skip isStatic logic="and"}}
{{#set delegateToCall="delegateCall2" function=this}}{{>functionTableEntry}}{{/set}}
{{/unless}}{{/each}}
{{#each inheritedProperties properties}}{{#unless attributes.swift.skip isStatic logic="and"}}
{{#set property=this}}{{#getter}}{{#set delegateToCall="callPropertyGetter" function=this}}{{>functionTableEntry}}{{/set}}{{/getter}}
{{#setter}}{{#set delegateToCall="callPropertySetter" function=this}}{{>functionTableEntry}}{{/set}}{{/setter}}{{/set}}
{{/unless}}{{/each}}
    let proxy = {{resolveName "CBridge"}}_create_proxy(functions)
    return owning ? RefHolder(ref: proxy, release: {{resolveName "CBridge"}}_release_handle) : RefHolder(proxy)
}
{{/class}}{{/set}}
{{#ifPredicate "hasWeakSupport"}}

{{conversionVisibility}} func weakToCType(_ swiftClass: {{resolveName}}?) -> RefHolder {
    return getRef(swiftClass, owning: true, isWeak: true)
}
{{/ifPredicate}}{{!!

}}{{+functionTableEntry}}
    functions.{{resolveName function "CBridge"}} = {(swift_class_pointer{{#if parameters}}, {{/if}}{{joinPartial parameters "swiftParameter" ", "}}) in
{{#ifPredicate class "hasWeakSupport"}}
        let unretained_value = Unmanaged<AnyObject>.fromOpaque(swift_class_pointer!).takeUnretainedValue()
        let swift_class: {{resolveName class}}
        if (unretained_value is {{resolveName class}}_WeakHolder) {
            if let weak_value = (unretained_value as! {{resolveName class}}_WeakHolder).value {
                swift_class = weak_value
            } else {
{{#if thrownType}}{{#if returnType.isVoid}}
                return {{resolveName function "CBridge"}}_result(has_value: true, error_value: 0)
{{/if}}{{#unless returnType.isVoid}}
                return {{resolveName function "CBridge"}}_result(has_value: true, .init(returned_value: 0))
{{/unless}}{{/if}}{{#unless thrownType}}{{#if returnType.isVoid}}
                return
{{/if}}{{#unless returnType.isVoid}}
                return 0
{{/unless}}{{/unless}}
            }
        } else {
            swift_class = unretained_value as! {{resolveName class}}
        }
{{/ifPredicate}}{{#unlessPredicate class "hasWeakSupport"}}
        let swift_class = Unmanaged<AnyObject>.fromOpaque(swift_class_pointer!).takeUnretainedValue() as! {{resolveName class}}
{{/unlessPredicate}}
        {{#if thrownType}}do { {{#if returnType.isVoid}}
            try {{include delegateToCall}}
            return {{resolveName function "CBridge"}}_result(has_value: true, error_value: 0)
        } catch let error as {{resolveName exception "" "ref"}} {
            return {{resolveName function "CBridge"}}_result(has_value: false, error_value: copyToCType(error).ref){{/if}}{{!!
        }}{{#unless returnType.isVoid}}
            let call_result = try {{include delegateToCall}}
            {{#set delegateToCall="callResult" returnPrefix="let result_handle ="}}{{>swiftReturn}}{{/set}}
            return {{resolveName function "CBridge"}}_result(has_value: true, .init(returned_value: result_handle))
        } catch let error as {{resolveName exception "" "ref"}} {
            return {{resolveName function "CBridge"}}_result(has_value: false, .init(error_value: copyToCType(error).ref)){{/unless}}
        } catch {
            fatalError("Unexpected error: \(error)")
        }{{/if}}{{!!
        }}{{#unless thrownType}}{{#if returnType.isVoid}}{{include delegateToCall}}{{/if}}{{!!
        }}{{#unless returnType.isVoid}}{{#set returnPrefix="return"}}{{>swiftReturn}}{{/set}}{{/unless}}{{/unless}}
    }
{{/functionTableEntry}}{{!!
}}{{+swiftParameter}}{{resolveName}}{{/swiftParameter}}{{!!
}}{{+swiftReturn}}{{returnPrefix}} {{#returnType}}{{>swift/ConversionPrefixTo}}{{/returnType}}copyToCType({{include delegateToCall}}).ref{{/swiftReturn}}{{!!
}}{{+delegateCall2}}swift_class.{{resolveName function}}({{joinPartial parameters "swiftParameter2" ", "}}){{/delegateCall2}}{{!!
}}{{+callPropertyGetter}}swift_class.{{resolveName property}}{{/callPropertyGetter}}{{!!
}}{{+callPropertySetter}}swift_class.{{resolveName property}} = {{#parameters.0}}{{>swiftParameterConversion}}{{/parameters.0}}{{/callPropertySetter}}{{!!
}}{{+callResult}}call_result{{/callResult}}{{!!
}}{{+swiftParameter2}}{{#if attributes.swift.label}}{{#isNotEq attributes.swift.label "_"}}{{attributes.swift.label}}: {{/isNotEq}}{{/if}}{{!!
}}{{#unless attributes.swift.label}}{{resolveName}}: {{/unless}}{{>swiftParameterConversion}}{{/swiftParameter2}}{{!!
}}{{+swiftParameterConversion}}{{>swift/ConversionPrefixFrom}}moveFromCType({{resolveName}}){{/swiftParameterConversion}}
