{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
//
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}
//

import Foundation
{{#imports}}
import {{this}}
{{/imports}}

{{#collections}}{{!!
}}{{#set isOptionSet=elementType.type.actualType.attributes.swift.optionSet collection=this}}{{#collection}}
internal func {{>functionPrefix}}copyFromCType(_ handle: _baseRef) -> {{resolveName}} {
    var result: {{resolveName}} = []
    let iterator_handle = {{resolveName "CBridge"}}_iterator(handle)
    while {{resolveName "CBridge"}}_iterator_is_valid(handle, iterator_handle) {
        result.insert({{#set typeRef=elementType}}{{>swift/ConversionPrefixFrom}}{{/set}}copyFromCType({{resolveName "CBridge"}}_iterator_get(iterator_handle)))
        {{resolveName "CBridge"}}_iterator_increment(iterator_handle)
    }
    {{resolveName "CBridge"}}_iterator_release_handle(iterator_handle)
    return result
}

internal func {{>functionPrefix}}moveFromCType(_ handle: _baseRef) -> {{resolveName}} {
    defer {
        {{resolveName "CBridge"}}_release_handle(handle)
    }
    return {{>functionPrefix}}copyFromCType(handle)
}

internal func {{>functionPrefix}}copyToCType(_ swiftSet: {{resolveName}}) -> RefHolder {
    let handle = {{resolveName "CBridge"}}_create_handle()
{{#if isOptionSet}}
    for item in {{elementType}}.allCases.filter({ swiftSet.contains($0) }) {
{{/if}}{{#unless isOptionSet}}
    for item in swiftSet {
{{/unless}}
        let _item = {{#set typeRef=elementType}}{{>swift/ConversionPrefixTo}}{{/set}}moveToCType(item)
        {{resolveName "CBridge"}}_insert(handle, _item.ref)
    }
    return RefHolder(handle)
}

internal func {{>functionPrefix}}moveToCType(_ swiftSet: {{resolveName}}) -> RefHolder {
    return RefHolder(ref: {{>functionPrefix}}copyToCType(swiftSet).ref, release: {{resolveName "CBridge"}}_release_handle)
}

{{!!
Optionals
}}
internal func {{>functionPrefix}}copyToCType(_ swiftSet: {{resolveName}}?) -> RefHolder {
    guard let swiftSet = swiftSet else {
        return RefHolder(0)
    }
    let optionalHandle = {{resolveName "CBridge"}}_create_optional_handle()
    let handle = {{resolveName "CBridge"}}_unwrap_optional_handle(optionalHandle)
{{#if isOptionSet}}
    for item in {{elementType}}.allCases.filter({ swiftSet.contains($0) }) {
{{/if}}{{#unless isOptionSet}}
    for item in swiftSet {
{{/unless}}
        let _item = {{#set typeRef=elementType}}{{>swift/ConversionPrefixTo}}{{/set}}moveToCType(item)
        {{resolveName "CBridge"}}_insert(handle, _item.ref)
    }
    return RefHolder(optionalHandle)
}

internal func {{>functionPrefix}}moveToCType(_ swiftType: {{resolveName}}?) -> RefHolder {
    return RefHolder(ref: {{>functionPrefix}}copyToCType(swiftType).ref, release: {{resolveName "CBridge"}}_release_optional_handle)
}

internal func {{>functionPrefix}}copyFromCType(_ handle: _baseRef) -> {{resolveName}}? {
    guard handle != 0 else {
        return nil
    }
    let unwrappedHandle = {{resolveName "CBridge"}}_unwrap_optional_handle(handle)
    return {{>functionPrefix}}copyFromCType(unwrappedHandle) as {{resolveName}}
}

internal func {{>functionPrefix}}moveFromCType(_ handle: _baseRef) -> {{resolveName}}? {
    defer {
        {{resolveName "CBridge"}}_release_optional_handle(handle)
    }
    return {{>functionPrefix}}copyFromCType(handle)
}

{{/collection}}{{/set}}{{/collections}}{{!!

}}{{+functionPrefix}}{{#ifPredicate "hasCppTypeAttribute"}}{{resolveName "CBridge"}}{{/ifPredicate}}{{!!
}}{{#unlessPredicate "hasCppTypeAttribute"}}{{internalPrefix}}{{!!
}}{{#ifPredicate "hasDurationType"}}TimeInterval_{{/ifPredicate}}{{/unlessPredicate}}{{/functionPrefix}}
