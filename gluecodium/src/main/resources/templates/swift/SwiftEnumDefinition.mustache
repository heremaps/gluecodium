{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unlessPredicate "skipDeclaration"}}{{>swift/SwiftComment}}{{>swift/SwiftAttributes}}{{#if attributes.swift.optionSet}}
{{>swift/EnumOptionSetDefinition}}
{{/if}}{{!!
}}{{#unless attributes.swift.optionSet}}
{{>swift/TypeVisibility}} enum {{resolveName}}{{#if external.swift.converter}}_internal{{/if}} : UInt32, CaseIterable, Codable {
{{#uniqueEnumerators}}{{prefixPartial "enumerator" "    "}}
{{/uniqueEnumerators}}{{#if aliasEnumerators}}

{{#aliasEnumerators}}{{prefixPartial "enumerator" "    "}}
{{/aliasEnumerators}}{{/if}}{{!!
}}{{#ifPredicate "hasDeprecatedEnumerators"}}
    {{resolveName "visibility"}} static var allCases: [{{resolveName}}] {
        return [{{#enumerators}}.{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/enumerators}}]
    }

    {{resolveName "visibility"}} enum Key: CodingKey {
        case rawValue
    }

    {{resolveName "visibility"}} enum CodingError: Error {
        case unknownValue
    }

    {{resolveName "visibility"}} init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: Key.self)
        let rawValue = try container.decode(Int.self, forKey: .rawValue)
        switch rawValue {
{{#uniqueEnumerators}}
        case {{iter.position}}:
            self = .{{resolveName}} 
{{/uniqueEnumerators}}
        default:
            throw CodingError.unknownValue
        }
    }

    {{resolveName "visibility"}} func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        switch self {
{{#uniqueEnumerators}}
        case .{{resolveName}}:
            try container.encode({{iter.position}}, forKey: .rawValue)
{{/uniqueEnumerators}}
        }
    }
{{/ifPredicate}}
}
{{/unless}}
{{/unlessPredicate}}{{!!

}}{{+enumerator}}{{>swift/SwiftComment}}{{>swift/SwiftAttributes}}
{{#if isAlias}}{{resolveName "visibility"}} static let {{resolveName}} = {{resolveName explicitValue}}{{/if}}{{!!
}}{{#unless isAlias}}case {{resolveName}}{{#if explicitValue}} = {{resolveName explicitValue}}{{/if}}{{/unless}}{{/enumerator}}
