{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unless skipDeclaration}}{{>swift/Comment}}
{{visibility}} enum {{simpleName}}{{#if externalConverter}}_internal{{/if}} : UInt32, CaseIterable, Codable {
{{#items}}{{prefixPartial "enumItem" "    "}}
{{/items}}{{!!
}}{{#if hasDeprecatedItems}}
    {{visibility}} static var allCases: [{{simpleName}}] {
        return [{{#items}}.{{name}}{{#if iter.hasNext}}, {{/if}}{{/items}}]
    }

    {{visibility}} enum Key: CodingKey {
        case rawValue
    }

    {{visibility}} enum CodingError: Error {
        case unknownValue
    }

    {{visibility}} init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: Key.self)
        let rawValue = try container.decode(Int.self, forKey: .rawValue)
        switch rawValue {
{{#items}}
        case {{iter.position}}:
            self = .{{name}}
{{/items}}
        default:
            throw CodingError.unknownValue
        }
    }

    {{visibility}} func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        switch self {
{{#items}}
        case .{{name}}:
            try container.encode({{iter.position}}, forKey: .rawValue)
{{/items}}
        }
    }
{{/if}}
}
{{/unless}}{{!!
}}{{+enumItem}}{{>swift/Comment}}
case {{name}}{{#if value}} = {{value}}{{/if}}{{/enumItem}}
