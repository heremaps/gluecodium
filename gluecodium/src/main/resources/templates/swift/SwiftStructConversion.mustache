{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if fields}}
{{conversionVisibility}} func copyFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}} {
{{#if external.swift.converter}}
    return {{external.swift.converter}}.convertFromInternal({{resolveName this "" "ref"}}_internal(cHandle: handle))
{{/if}}{{#unless external.swift.converter}}
    return {{resolveName this "" "ref"}}(cHandle: handle){{#ifPredicate "skipDeclaration"}}!{{/ifPredicate}}
{{/unless}}
}
{{conversionVisibility}} func moveFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}} {
    defer {
        {{resolveName "CBridge"}}_release_handle(handle)
    }
    return copyFromCType(handle)
}

{{conversionVisibility}} func copyToCType(_ swiftType{{#if external.swift.converter}}_ext{{/if}}: {{resolveName this "" "ref"}}) -> RefHolder {
{{#if external.swift.converter}}
    let swiftType = {{external.swift.converter}}.convertToInternal(swiftType_ext)
{{/if}}
{{#fields}}{{#if typeRef.attributes.optimized}}
    let c_{{resolveName}} = RefHolder(swiftType.{{resolveName}}.c_handle)
{{/if}}{{#unless typeRef.attributes.optimized}}
    let c_{{resolveName}} = {{>swift/ConversionPrefixTo}}moveToCType(swiftType.{{resolveName}})
{{/unless}}
{{/fields}}
    return RefHolder({{resolveName "CBridge"}}_create_handle({{#fields}}c_{{resolveName}}.ref{{#if iter.hasNext}}, {{/if}}{{/fields}}))
}
{{conversionVisibility}} func moveToCType(_ swiftType: {{resolveName this "" "ref"}}) -> RefHolder {
    return RefHolder(ref: copyToCType(swiftType).ref, release: {{resolveName "CBridge"}}_release_handle)
}
{{!!
Optionals
}}
{{conversionVisibility}} func copyFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}}? {
    guard handle != 0 else {
        return nil
    }
    let unwrappedHandle = {{resolveName "CBridge"}}_unwrap_optional_handle(handle)
{{#if external.swift.converter}}
    return {{external.swift.converter}}.convertFromInternal({{resolveName this "" "ref"}}_internal(cHandle: unwrappedHandle))
{{/if}}{{#unless external.swift.converter}}
    return {{resolveName this "" "ref"}}(cHandle: unwrappedHandle){{#ifPredicate "skipDeclaration"}}!{{/ifPredicate}} as {{resolveName this "" "ref"}}
{{/unless}}
}
{{conversionVisibility}} func moveFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}}? {
    defer {
        {{resolveName "CBridge"}}_release_optional_handle(handle)
    }
    return copyFromCType(handle)
}

{{conversionVisibility}} func copyToCType(_ swiftType{{#if external.swift.converter}}_ext{{/if}}: {{resolveName this "" "ref"}}?) -> RefHolder {
    guard let swiftType{{#if external.swift.converter}}_ext{{/if}} = swiftType{{#if external.swift.converter}}_ext{{/if}} else {
        return RefHolder(0)
    }
{{#if external.swift.converter}}
    let swiftType = {{external.swift.converter}}.convertToInternal(swiftType_ext)
{{/if}}
{{#fields}}{{#if typeRef.attributes.optimized}}
    let c_{{resolveName}} = RefHolder(swiftType.{{resolveName}}.c_handle)
{{/if}}{{#unless typeRef.attributes.optimized}}
    let c_{{resolveName}} = {{>swift/ConversionPrefixTo}}moveToCType(swiftType.{{resolveName}})
{{/unless}}
{{/fields}}
    return RefHolder({{resolveName "CBridge"}}_create_optional_handle({{#fields}}c_{{resolveName}}.ref{{#if iter.hasNext}}, {{/if}}{{/fields}}))
}
{{conversionVisibility}} func moveToCType(_ swiftType: {{resolveName this "" "ref"}}?) -> RefHolder {
    return RefHolder(ref: copyToCType(swiftType).ref, release: {{resolveName "CBridge"}}_release_optional_handle)
}

{{/if}}
{{#set outerElement=this}}{{#each classes interfaces}}
{{>swift/SwiftClassConversion}}{{!!
}}{{/each}}{{/set}}
{{#structs}}
{{>swift/SwiftStructConversion}}{{!!
}}{{/structs}}
{{#enumerations}}
{{>swift/SwiftEnumConversion}}{{!!
}}{{/enumerations}}
