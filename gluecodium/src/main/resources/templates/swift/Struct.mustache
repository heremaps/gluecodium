{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>swift/Comment}}
{{visibility}} struct {{simpleName}}{{#isEquatable}}: Hashable{{/isEquatable}} {
{{#constants}}
{{prefixPartial "swift/Constant" "    "}}
{{/constants}}{{!!
}}{{#if fields}}{{#fields}}
{{#if this.comment}}
{{prefixPartial "swift/Comment" '    '}}
{{/if}}
    {{visibility}} {{#if isImmutable}}let{{/if}}{{#unless isImmutable}}var{{/unless}} {{name}}: {{type.publicName}}{{#type.optional}}?{{/type.optional}}
{{/fields}}{{#unless constructors}}{{#if needsReducedConstructor}}

{{#if generatedConstructorComment}}
{{prefix generatedConstructorComment '    /// '}}
{{#if publicFields}}
    /// - Parameters
{{#publicFields}}
    ///   - {{name}}: {{prefix comment.documentation "      " skipFirstLine=true}}
{{/publicFields}}
{{/if}}
{{/if}}
    public init({{joinPartial publicFields "initParameter" ", "}}) {
{{#publicFields}}
        self.{{name}} = {{name}}
{{/publicFields}}
{{#internalFields}}
        self.{{name}} = {{defaultValue}}
{{/internalFields}}
    }
{{/if}}

{{#if generatedConstructorComment}}
{{prefix generatedConstructorComment '    /// '}}
{{#if publicFields}}
    /// - Parameters
{{#fields}}
    ///   - {{name}}: {{prefix comment.documentation "    ///       " skipFirstLine=true}}
{{/fields}}
{{/if}}
{{/if}}
    {{constructorVisibility}} init({{joinPartial fields "initParameter" ", "}}) {
{{#fields}}
        self.{{name}} = {{name}}
{{/fields}}
    }
{{/unless}}

    internal init(cHandle: _baseRef) {
{{#fields}}
        {{name}} = {{type.className}}moveFromCType({{cPrefix}}_{{name}}_get(cHandle))
{{/fields}}
    }
{{/if}}{{!!
}}{{#set className=name}}{{#constructors}}
{{prefixPartial "swift/MethodComment" "    "}}
    {{visibility}} {{#if overriding}}override {{/if}}init({{>swift/MethodParameterDeclaration}}){{#if error}} throws{{/if}} {
        let _result_handle = {{#if error}}try {{/if}}{{className}}.{{name}}({{#parameters}}{{!!
        }}{{#argumentLabel}}{{#isNotEq . "_"}}{{.}}: {{/isNotEq}}{{/argumentLabel}}{{^argumentLabel}}{{name}}: {{/argumentLabel}}{{!!
        }}{{name}}{{#if iter.hasNext}}, {{/if}}{{/parameters}})
        guard _result_handle != 0 else {
            fatalError("Nullptr value is not supported for initializers")
        }
        let _result: {{className}} = moveFromCType(_result_handle)
{{#fields}}
        self.{{name}} = _result.{{name}}
{{/fields}}
    }

{{/constructors}}{{/set}}{{!!
}}{{#if methods}}

{{#set selfIsStruct=true}}{{#methods}}
{{prefixPartial 'swift/Method' '    '}}
{{/methods}}{{/set}}{{/if}}
}
{{+initParameter}}{{name}}: {{#isEq type.category.toString "CLOSURE"}}{{#unless type.optional}}@escaping {{/unless}}{{/isEq}}{{!!
}}{{type.publicName}}{{#type.optional}}?{{/type.optional}}{{#if defaultValue}} = {{defaultValue}}{{/if}}{{/initParameter}}
