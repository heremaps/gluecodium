{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#ifPredicate "hasTypeRepository"}}
@_cdecl("_CBridgeInit{{resolveName "CBridge"}}")
internal func _CBridgeInit{{resolveName "CBridge"}}(handle: _baseRef) -> UnsafeMutableRawPointer {
    let reference = {{>implName}}(c{{resolveName}}: handle)
    return Unmanaged<AnyObject>.passRetained(reference).toOpaque()
}

{{/ifPredicate}}
{{#instanceOf this "LimeInterface"}}{{>swift/GetReference}}{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeInterface"}}
{{conversionVisibility}} func getRef(_ ref: {{resolveName this "" "ref"}}?, owning: Bool = true) -> RefHolder {
    guard let c_handle = ref?.c_instance else {
        return RefHolder(0)
    }
    let handle_copy = {{resolveName "CBridge"}}_copy_handle(c_handle)
    return owning
        ? RefHolder(ref: handle_copy, release: {{resolveName "CBridge"}}_release_handle)
        : RefHolder(handle_copy)
}
{{/notInstanceOf}}

{{#unless this.parentClass}}
extension {{>implName}}: NativeBase {
    /// :nodoc:
    var c_handle: _baseRef { return c_instance }
}{{/unless}}{{!!

}}{{#if attributes.equatable attributes.pointerEquatable logic="or"}}
{{#instanceOf this "LimeInterface"}}
/// :nodoc:
public func == (lhs: {{resolveName this "" "ref"}}, rhs: {{resolveName this "" "ref"}}) -> Bool {
    guard let lhsImpl = lhs as? {{>implName}} else { return lhs === rhs }
    guard let rhsImpl = rhs as? {{>implName}} else { return lhs === rhs }
    return lhsImpl == rhsImpl
}

{{/instanceOf}}
extension {{>implName}}: Hashable {
    /// :nodoc:
    public static func == (lhs: {{>implName}}, rhs: {{>implName}}) -> Bool {
        return {{resolveName "CBridge"}}_equal(lhs.c_handle, rhs.c_handle)
    }

    /// :nodoc:
    public func hash(into hasher: inout Hasher) {
        hasher.combine({{resolveName "CBridge"}}_hash(c_handle))
    }
}
{{/if}}{{!!
}}{{#unless attributes.equatable attributes.pointerEquatable logic="and"}}
{{#instanceOf this "LimeClass"}}{{#unless this.parentClass}}

extension {{>implName}}: Hashable {
    /// :nodoc:
    public static func == (lhs: {{>implName}}, rhs: {{>implName}}) -> Bool {
        return lhs.c_handle == rhs.c_handle
    }

    /// :nodoc:
    public func hash(into hasher: inout Hasher) {
        hasher.combine(c_handle)
    }
}
{{/unless}}{{/instanceOf}}
{{/unless}}

{{conversionVisibility}} func {{resolveName this "mangled"}}copyFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}} {
{{#instanceOf this "LimeInterface"}}
    if let swift_pointer = {{resolveName "CBridge"}}_get_swift_object_from_cache(handle),
        let re_constructed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeUnretainedValue() as? {{resolveName this "" "ref"}} {
        return re_constructed
    }
{{/instanceOf}}
    if let swift_pointer = {{resolveName "CBridge"}}_get_swift_object_from_wrapper_cache(handle),
        let re_constructed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeUnretainedValue() as? {{resolveName this "" "ref"}} {
        return re_constructed
    }
{{#ifPredicate "hasTypeRepository"}}
    if let swift_pointer = {{resolveName "CBridge"}}_get_typed({{resolveName "CBridge"}}_copy_handle(handle)),
        let typed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeRetainedValue() as? {{resolveName this "" "ref"}} {
        {{resolveName "CBridge"}}_cache_swift_object_wrapper(handle, swift_pointer)
        return typed
    }
    fatalError("Failed to initialize Swift object")
{{/ifPredicate}}{{#unlessPredicate "hasTypeRepository"}}
    let result = {{>implName}}(c{{resolveName}}: {{resolveName "CBridge"}}_copy_handle(handle))
    {{resolveName "CBridge"}}_cache_swift_object_wrapper(handle, Unmanaged<AnyObject>.passUnretained(result).toOpaque())
    return result
{{/unlessPredicate}}
}

{{conversionVisibility}} func {{resolveName "mangled"}}moveFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}} {
{{#instanceOf this "LimeInterface"}}
    if let swift_pointer = {{resolveName "CBridge"}}_get_swift_object_from_cache(handle),
        let re_constructed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeUnretainedValue() as? {{resolveName this "" "ref"}} {
        {{resolveName "CBridge"}}_release_handle(handle)
        return re_constructed
    }
{{/instanceOf}}
    if let swift_pointer = {{resolveName "CBridge"}}_get_swift_object_from_wrapper_cache(handle),
        let re_constructed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeUnretainedValue() as? {{resolveName this "" "ref"}} {
        {{resolveName "CBridge"}}_release_handle(handle)
        return re_constructed
    }
{{#ifPredicate "hasTypeRepository"}}
    if let swift_pointer = {{resolveName "CBridge"}}_get_typed(handle),
        let typed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeRetainedValue() as? {{resolveName this "" "ref"}} {
        {{resolveName "CBridge"}}_cache_swift_object_wrapper(handle, swift_pointer)
        return typed
    }
    fatalError("Failed to initialize Swift object")
{{/ifPredicate}}{{#unlessPredicate "hasTypeRepository"}}
    let result = {{>implName}}(c{{resolveName}}: handle)
    {{resolveName "CBridge"}}_cache_swift_object_wrapper(handle, Unmanaged<AnyObject>.passUnretained(result).toOpaque())
    return result
{{/unlessPredicate}}
}

{{conversionVisibility}} func {{resolveName "mangled"}}copyFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}}? {
    guard handle != 0 else {
        return nil
    }
    return {{resolveName "mangled"}}moveFromCType(handle) as {{resolveName this "" "ref"}}
}
{{conversionVisibility}} func {{resolveName "mangled"}}moveFromCType(_ handle: _baseRef) -> {{resolveName this "" "ref"}}? {
    guard handle != 0 else {
        return nil
    }
    return {{resolveName "mangled"}}moveFromCType(handle) as {{resolveName this "" "ref"}}
}

{{conversionVisibility}} func copyToCType(_ swiftClass: {{resolveName this "" "ref"}}) -> RefHolder {
    return getRef(swiftClass, owning: false)
}

{{conversionVisibility}} func moveToCType(_ swiftClass: {{resolveName this "" "ref"}}) -> RefHolder {
    return getRef(swiftClass, owning: true)
}

{{conversionVisibility}} func copyToCType(_ swiftClass: {{resolveName this "" "ref"}}?) -> RefHolder {
    return getRef(swiftClass, owning: false)
}

{{conversionVisibility}} func moveToCType(_ swiftClass: {{resolveName this "" "ref"}}?) -> RefHolder {
    return getRef(swiftClass, owning: true)
}

{{#each classes interfaces}}
{{>swift/SwiftClassConversion}}{{!!
}}{{/each}}
{{#lambdas}}
{{>swift/SwiftLambdaConversion}}{{!!
}}{{/lambdas}}
{{#structs}}
{{>swift/SwiftStructConversion}}{{!!
}}{{/structs}}
{{#enumerations}}
{{>swift/SwiftEnumConversion}}{{!!
}}{{/enumerations}}{{!!

}}{{+implName}}{{#notInstanceOf this "LimeInterface"}}{{resolveName this "" "ref"}}{{/notInstanceOf}}{{!!
}}{{#instanceOf this "LimeInterface"}}_{{resolveName}}{{/instanceOf}}{{/implName}}
