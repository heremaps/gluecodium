{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{
{{#unless isStatic}}{{#if selfIsStruct}}
    let c_self_handle = moveToCType(self)
{{/if}}{{/unless}}
{{#parameters}}
    let c_{{resolveName}} = {{>swift/ConversionPrefixTo}}{{!!
    }}{{#if isWeak}}weak{{/if}}{{#unless isWeak}}move{{/unless}}ToCType({{>parameterName}})
{{/parameters}}
{{#if thrownType}}
    let RESULT = {{>delegateCall}}
    if (!RESULT.has_value) {
        throw moveFromCType(RESULT.error_value) as {{resolveName exception "" "ref"}}
    }
{{#unless returnType.isVoid}}
    let c_result_handle = RESULT.returned_value
{{/unless}}{{/if}}{{#unless thrownType}}
    {{#unless returnType.isVoid}}let c_result_handle = {{/unless}}{{>delegateCall}}
{{/unless}}{{#unless returnType.isVoid}}{{#if returnType.typeRef.attributes.optimized}}{{!!
}}{{#set typeRef=returnType.typeRef varName="c_result_handle"}}
    return {{prefixPartial "swift/InitCollectionOf" "    " skipFirstLine=true}}
{{/set}}{{/if}}{{#unless returnType.typeRef.attributes.optimized}}
    return {{#unless isConstructor}}{{#returnType}}{{>swift/ConversionPrefixFrom}}{{/returnType}}{{/unless}}moveFromCType(c_result_handle)
{{/unless}}{{/unless}}
}{{!!

}}{{+delegateCall}}{{!!
}}{{resolveName "CBridge"}}({{#unless isStatic}}{{#if selfIsStruct}}c_self_handle.ref{{#if parameters}}, {{/if}}{{/if}}{{!!
}}{{#unless selfIsStruct}}self.c_instance{{#if parameters}}, {{/if}}{{/unless}}{{/unless}}{{!!
}}{{#parameters}}c_{{resolveName}}.ref{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{!!
}}{{/delegateCall}}{{!!

}}{{+parameterName}}{{#if isProperty}}newValue{{/if}}{{#unless isProperty}}{{resolveName}}{{/unless}}{{/parameterName}}