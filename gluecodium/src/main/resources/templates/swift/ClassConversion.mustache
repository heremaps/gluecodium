{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if hasTypeRepository}}
@_cdecl("_CBridgeInit{{cInstance}}")
internal func _CBridgeInit{{cInstance}}(handle: _baseRef) -> UnsafeMutableRawPointer {
    let reference = {{implName}}(c{{simpleName}}: handle)
    return Unmanaged<AnyObject>.passRetained(reference).toOpaque()
}

{{/if}}
{{#isInterface}}{{>swift/GetReference}}{{/isInterface}}{{!!
}}{{^isInterface}}
internal func getRef(_ ref: {{name}}?, owning: Bool = true) -> RefHolder {
    guard let c_handle = ref?.c_instance else {
        return RefHolder(0)
    }
    let handle_copy = {{cInstance}}_copy_handle(c_handle)
    return owning
        ? RefHolder(ref: handle_copy, release: {{cInstance}}_release_handle)
        : RefHolder(handle_copy)
}
{{/isInterface}}

{{^useParentCInstance}}
extension {{implName}}: NativeBase {
    var c_handle: _baseRef { return c_instance }
}{{/useParentCInstance}}{{!!

}}{{#if hasEquatableType}}
{{#if isInterface}}
public func ==(lhs: {{name}}, rhs: {{name}}) -> Bool {
    guard let lhsImpl = lhs as? {{implName}} else { return lhs === rhs }
    guard let rhsImpl = rhs as? {{implName}} else { return lhs === rhs }
    return lhsImpl == rhsImpl
}

{{/if}}
extension {{implName}}: Hashable {
    public static func == (lhs: {{implName}}, rhs: {{implName}}) -> Bool {
        return {{cInstance}}_equal(lhs.c_handle, rhs.c_handle)
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine({{cInstance}}_hash(c_handle))
    }
}
{{/if}}

internal func {{mangledName}}copyFromCType(_ handle: _baseRef) -> {{name}} {
{{#if isInterface}}
    if let swift_pointer = {{cInstance}}_get_swift_object_from_cache(handle),
        let re_constructed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeUnretainedValue() as? {{name}} {
        return re_constructed
    }
{{/if}}
    if let swift_pointer = {{cInstance}}_get_swift_object_from_wrapper_cache(handle),
        let re_constructed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeUnretainedValue() as? {{name}} {
        return re_constructed
    }
{{#if hasTypeRepository}}
    if let swift_pointer = {{cInstance}}_get_typed({{cInstance}}_copy_handle(handle)),
        let typed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeRetainedValue() as? {{name}} {
        {{cInstance}}_cache_swift_object_wrapper(handle, swift_pointer)
        return typed
    }
    fatalError("Failed to initialize Swift object")
{{/if}}{{#unless hasTypeRepository}}
    let result = {{implName}}(c{{simpleName}}: {{cInstance}}_copy_handle(handle))
    {{cInstance}}_cache_swift_object_wrapper(handle, Unmanaged<AnyObject>.passUnretained(result).toOpaque())
    return result
{{/unless}}
}

internal func {{mangledName}}moveFromCType(_ handle: _baseRef) -> {{name}} {
{{#if isInterface}}
    if let swift_pointer = {{cInstance}}_get_swift_object_from_cache(handle),
        let re_constructed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeUnretainedValue() as? {{name}} {
        {{cInstance}}_release_handle(handle)
        return re_constructed
    }
{{/if}}
    if let swift_pointer = {{cInstance}}_get_swift_object_from_wrapper_cache(handle),
        let re_constructed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeUnretainedValue() as? {{name}} {
        {{cInstance}}_release_handle(handle)
        return re_constructed
    }
{{#if hasTypeRepository}}
    if let swift_pointer = {{cInstance}}_get_typed(handle),
        let typed = Unmanaged<AnyObject>.fromOpaque(swift_pointer).takeRetainedValue() as? {{name}} {
        {{cInstance}}_cache_swift_object_wrapper(handle, swift_pointer)
        return typed
    }
    fatalError("Failed to initialize Swift object")
{{/if}}{{#unless hasTypeRepository}}
    let result = {{implName}}(c{{simpleName}}: handle)
    {{cInstance}}_cache_swift_object_wrapper(handle, Unmanaged<AnyObject>.passUnretained(result).toOpaque())
    return result
{{/unless}}
}

internal func {{mangledName}}copyFromCType(_ handle: _baseRef) -> {{name}}? {
    guard handle != 0 else {
        return nil
    }
    return {{mangledName}}moveFromCType(handle) as {{name}}
}
internal func {{mangledName}}moveFromCType(_ handle: _baseRef) -> {{name}}? {
    guard handle != 0 else {
        return nil
    }
    return {{mangledName}}moveFromCType(handle) as {{name}}
}

internal func copyToCType(_ swiftClass: {{name}}) -> RefHolder {
    return getRef(swiftClass, owning: false)
}

internal func moveToCType(_ swiftClass: {{name}}) -> RefHolder {
    return getRef(swiftClass, owning: true)
}

internal func copyToCType(_ swiftClass: {{name}}?) -> RefHolder {
    return getRef(swiftClass, owning: false)
}

internal func moveToCType(_ swiftClass: {{name}}?) -> RefHolder {
    return getRef(swiftClass, owning: true)
}

{{#classes}}
{{>swift/ClassConversion}}{{!!
}}{{/classes}}
{{#closures}}
{{>swift/ClosureConversion}}{{!!
}}{{/closures}}
{{#structs}}
{{>swift/StructConversion}}{{!!
}}{{/structs}}
{{#enums}}
{{>swift/EnumConversion}}{{!!
}}{{/enums}}
