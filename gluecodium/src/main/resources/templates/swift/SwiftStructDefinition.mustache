{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unlessPredicate "skipDeclaration"}}{{>swift/SwiftComment}}{{>swift/SwiftAttributes}}
{{>swift/TypeVisibility}} struct {{resolveName}}{{#if external.swift.converter}}_internal{{/if}}{{#unless external.swift.converter}}{{!!
}}{{#if attributes.equatable attributes.serializable logic="or"}}{{!!
}}:{{#if attributes.equatable}} Hashable{{/if}}{{#if attributes.equatable attributes.serializable logic="and"}},{{/if}}{{!!
}}{{#if attributes.serializable}} Codable{{/if}}{{/if}}{{/unless}} {
{{#constants}}
{{prefixPartial "swift/SwiftConstant" "    "}}
{{/constants}}{{!!
}}{{#if fields}}{{#set isImmutable=attributes.immutable}}{{#fields}}
{{#if this.comment}}
{{prefixPartial "swift/SwiftComment" "    "}}{{prefixPartial "swift/SwiftAttributes" "    "}}
{{/if}}
    {{resolveName visibility}} {{#if isImmutable}}let{{/if}}{{#unless isImmutable}}var{{/unless}} {{resolveName}}: {{resolveName typeRef}}
{{/fields}}{{/set}}{{!!

}}{{>swift/SwiftStructConstructors}}

    internal init(cHandle: _baseRef) {
{{#set container=this}}{{#fields}}{{#if typeRef.attributes.optimized}}
        let {{resolveName}}_c_handle = {{resolveName container "CBridge"}}_{{resolveName}}_get(cHandle)
        {{resolveName}} = {{#resolveName}}{{#setJoin "varName" this "_c_handle" delimiter=""}}{{!!
        }}{{prefixPartial "swift/InitCollectionOf" "        " skipFirstLine=true}}{{/setJoin}}{{/resolveName}}
{{/if}}{{#unless typeRef.attributes.optimized}}
        {{resolveName}} = {{>swift/ConversionPrefixFrom}}moveFromCType({{resolveName container "CBridge"}}_{{resolveName}}_get(cHandle))
{{/unless}}
{{/fields}}{{/set}}
    }
{{/if}}{{!!
}}{{#set struct=this}}{{#constructors}}
{{prefixPartial "swift/SwiftFunctionComment" "    "}}
    {{resolveName visibility}} {{#if overriding}}override {{/if}}init({{>swift/SwiftFunctionParameters}}){{#if thrownType}} throws{{/if}} {
        let _result_handle = {{#if thrownType}}try {{/if}}{{!!
        }}{{resolveName struct "" "ref"}}{{#if external.swift.converter}}_internal{{/if}}.{{resolveName}}({{#parameters}}{{!!
        }}{{#if attributes.swift.label}}{{#isNotEq attributes.swift.label "_"}}{{attributes.swift.label}}: {{/isNotEq}}{{/if}}{{!!
        }}{{#unless attributes.swift.label}}{{resolveName}}: {{/unless}}{{!!
        }}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}})
        guard _result_handle != 0 else {
            fatalError("Nullptr value is not supported for initializers")
        }
        let _result: {{resolveName struct "" "ref"}} = moveFromCType(_result_handle)
{{#fields}}
        self.{{resolveName}} = _result.{{resolveName}}
{{/fields}}
    }

{{/constructors}}{{/set}}
{{#enumerations}}
{{prefixPartial "swift/SwiftEnumDefinition" "    "}}
{{/enumerations}}
{{#typeAliases}}
{{prefixPartial "swift/SwiftTypeAlias" "    "}}
{{/typeAliases}}
{{#exceptions}}
{{prefixPartial "swift/SwiftException" "    "}}
{{/exceptions}}
{{#lambdas}}
{{prefixPartial "swift/SwiftLambdaDefinition" "    "}}
{{/lambdas}}
{{#structs}}
{{prefixPartial "swift/SwiftStructDefinition" "    "}}
{{/structs}}
{{#classes}}
{{prefixPartial "swift/SwiftClassDefinition" "    "}}
{{/classes}}
{{#ifPredicate "needsExplicitHashable"}}
    /// :nodoc:
    public static func == (lhs: {{resolveName}}, rhs: {{resolveName}}) -> Bool {
        return
{{#fields}}
            lhs.{{resolveName}} =={{#ifPredicate "isRefEquatable"}}={{/ifPredicate}} rhs.{{resolveName}}{{#if iter.hasNext}} &&{{/if}}
{{/fields}}
    }

    /// :nodoc:
    public func hash(into hasher: inout Hasher) {
{{#fields}}{{#ifPredicate "isRefEquatable"}}{{#if typeRef.isNullable}}
        hasher.combine({{resolveName}} != nil ? Unmanaged<AnyObject>.passUnretained({{resolveName}}!).toOpaque().hashValue : 0)
{{/if}}{{#unless typeRef.isNullable}}
        hasher.combine(Unmanaged<AnyObject>.passUnretained({{resolveName}}).toOpaque().hashValue)
{{/unless}}{{/ifPredicate}}{{#unlessPredicate "isRefEquatable"}}
        hasher.combine({{resolveName}})
{{/unlessPredicate}}{{/fields}}
    }
{{/ifPredicate}}{{!!
}}{{#if functions}}

{{#set selfIsStruct=true}}{{#functions}}
{{prefixPartial "swift/SwiftFunctionSignature" "    "}} {{prefixPartial "swift/SwiftFunctionBody" "    " skipFirstLine=true}}
{{/functions}}{{/set}}{{/if}}
}

{{#interfaces}}
{{>swift/SwiftInterfaceDefinition}}
{{/interfaces}}
{{/unlessPredicate}}{{!!

}}{{#ifPredicate "skipDeclaration"}}
extension {{resolveName}} {
    internal init?(cHandle: _baseRef) {
        self.init({{#set struct=this}}{{#fields}}{{resolveName}}: {{!!
        }}{{>swift/ConversionPrefixFrom}}moveFromCType({{resolveName struct "CBridge"}}_{{resolveName}}_get(cHandle)){{!!
        }}{{#if iter.hasNext}}, {{/if}}{{/fields}}{{/set}})
    }
}
{{/ifPredicate}}
