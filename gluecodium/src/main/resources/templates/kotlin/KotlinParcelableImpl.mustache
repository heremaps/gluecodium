{{!!
  !
  ! Copyright (C) 2016-2025 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
private constructor(parcel: Parcel) {
{{#fields}}
{{#set type=typeRef.type.actualType field=this}}{{prefixPartial "parcelRead" "    "}}{{!!
}}{{>parcelReadNonNullable}}{{/set}}
{{/fields}}
}

override fun describeContents() = 0

override fun writeToParcel(parcel: Parcel, flags: Int) {
{{#fields}}
    parcel.write{{#set type=typeRef.type.actualType field=this}}{{>parcelWriteSuffix}}{{/set}}
{{/fields}}
}{{!!

}}{{+parcelReadNonNullable}}{{!!
}}{{#unless typeRef.isNullable}}{{!!
}}{{#instanceOf type "LimeStruct"}}!!{{/instanceOf}}{{!!
}}{{#instanceOf type "LimeEnumeration"}}!!{{/instanceOf}}{{!!
}}{{#instanceOf type "LimeBasicType"}}{{!!
}}{{#switch type.typeId.toString}}{{!!
}}{{#case "String"}}!!{{/case}}{{!!
}}{{#case "Blob"}}!!{{/case}}{{!!
}}{{#default}}{{/default}}{{!!
}}{{/switch}}{{!!
}}{{/instanceOf}}{{!!
}}{{/unless}}{{!!
}}{{/parcelReadNonNullable}}{{!!

}}{{+parcelRead}}{{!!
}}{{#instanceOf type "LimeList"}}this.{{resolveName field}} = arrayListOf()
parcel.readList(this.{{resolveName field}}, Thread.currentThread().getContextClassLoader()){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeMap"}}this.{{resolveName field}} = hashMapOf()
parcel.readMap(this.{{resolveName field}}, Thread.currentThread().getContextClassLoader()){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeSet"}}var __{{resolveName field}} = arrayListOf<{{resolveName type.elementType}}>()
parcel.readList(__{{resolveName field}}, Thread.currentThread().getContextClassLoader())
this.{{resolveName field}} = __{{resolveName field}}.toMutableSet(){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeStruct"}}this.{{resolveName field}} = parcel.readParcelable(Thread.currentThread().getContextClassLoader()){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeEnumeration"}}this.{{resolveName field}} = {{resolveName typeRef}}.values()[parcel.readInt()]{{/instanceOf}}{{!!
}}{{#instanceOf type "LimeBasicType"}}{{#switch type.typeId.toString}}{{!!
}}{{#case "Boolean"}}this.{{resolveName field}} = parcel.readByte().toInt() != 0{{/case}}{{!!
}}{{#case "Short"}}this.{{resolveName field}} = parcel.readInt().toShort(){{/case}}{{!!
}}{{#case "String"}}this.{{resolveName field}} = parcel.readString(){{/case}}{{!!
}}{{#case "Blob"}}this.{{resolveName field}} = parcel.createByteArray(){{/case}}{{!!
}}{{#default}}this.{{resolveName field}} = parcel.read{{#resolveName type}}{{capitalize this}}{{/resolveName}}(){{/default}}{{!!
}}{{/switch}}{{/instanceOf}}{{!!
}}{{/parcelRead}}{{!!

}}{{+parcelWriteSuffix}}{{!!
}}{{#instanceOf type "LimeList"}}List({{resolveName field}}){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeMap"}}Map({{resolveName field}}){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeSet"}}List({{resolveName field}}.toList()){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeStruct"}}Parcelable({{resolveName field}}, 0){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeEnumeration"}}Int({{resolveName field}}.ordinal){{/instanceOf}}{{!!
}}{{#instanceOf type "LimeBasicType"}}{{#switch type.typeId.toString}}{{!!
}}{{#case "Boolean"}}Byte((if({{resolveName field}}) 1 else 0).toByte()){{/case}}{{!!
}}{{#case "Short"}}Int({{resolveName field}}.toInt()){{/case}}{{!!
}}{{#case "String"}}String({{resolveName field}}){{/case}}{{!!
}}{{#case "Blob"}}ByteArray({{resolveName field}}){{/case}}{{!!
}}{{#default}}{{#resolveName type}}{{capitalize this}}{{/resolveName}}({{resolveName field}}){{/default}}{{!!
}}{{/switch}}{{/instanceOf}}{{!!
}}{{/parcelWriteSuffix}}
