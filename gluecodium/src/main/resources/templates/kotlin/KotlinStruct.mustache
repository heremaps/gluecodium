{{!!
  !
  ! Copyright (C) 2016-2025 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
class {{resolveName}} {
{{#set isImmutable=attributes.immutable}}
{{#fields}}{{!!
}}{{#unless isImmutable}}    var {{/unless}}{{!!
}}{{#if isImmutable}}    val {{/if}}{{!!
}}{{resolveName}}: {{resolveName typeRef}}{{!!
}}
{{/fields}}
{{/set}}

{{>kotlin/KotlinContainerContents}}

{{!!
    1. If user explicitly specified constructors via 'constructor' keyword, then define them.
}}
{{#constructors}}
    constructor({{!!
}}{{#parameters}}{{!!
}}{{resolveName}}: {{resolveName typeRef}}{{#if iter.hasNext}}, {{/if}}{{!!
}}{{/parameters}}) {
        val _other = {{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}})
{{#fields}}        this.{{resolveName}} = _other.{{resolveName}}
{{/fields}}
    }
{{/constructors}}

{{#if fields}}{{!!
}}{{#unless constructors}}{{!!

}}{{#unless fieldConstructors}}{{!!
}}{{#if initializedFields}}
{{!!
    2. If user did not specify any constructors and field constructors and there are fields with default value,
       then define a constructor which takes only fields, which do not have default value.
}}
    constructor({{!!
}}{{#uninitializedFields}}{{!!
}}{{resolveName}}: {{resolveName typeRef}}{{#if iter.hasNext}}, {{/if}}{{!!
}}{{/uninitializedFields}}) {
{{#fields}}        this.{{resolveName}} = {{#if defaultValue}}{{resolveName defaultValue}}{{/if}}{{!!
                   }}{{#unless defaultValue}}{{resolveName}}{{/unless}}
{{/fields}}
    }
{{/if}}{{!!
}}{{/unless}}{{!!

}}{{#ifPredicate "needsAllFieldsConstructor"}}{{!!
    3. If user did not specify any constructors, field constructor and fields with default values, then
       define a constructor, which allows setting all fields.
}}
    constructor({{!!
}}{{#fields}}{{!!
}}{{resolveName}}: {{resolveName typeRef}}{{#if iter.hasNext}}, {{/if}}{{!!
}}{{/fields}}) {
{{#fields}}        this.{{resolveName}} = {{resolveName}}
{{/fields}}
    }
{{/ifPredicate}}{{!!
}}{{/unless}}{{!!

    4. Generate field constructors specified by the user.
}}{{#fieldConstructors}}
    constructor({{!!
}}{{#fields}}{{!!
}}{{resolveName}}: {{resolveName typeRef}}{{#if iter.hasNext}}, {{/if}}{{!!
}}{{/fields}}) {
{{#fields}}        this.{{resolveName}} = {{resolveName}}
{{/fields}}
{{#omittedFields}}        this.{{resolveName}} = {{resolveName defaultValue}}
{{/omittedFields}}
    }
{{/fieldConstructors}}{{!!
}}{{/if}}

{{#functions}}
{{#unless isStatic}}
{{prefixPartial "kotlin/KotlinFunction" "    "}}
{{/unless}}
{{/functions}}

{{#ifPredicate "needsCompanionObject"}}
    companion object {
{{#constants}}{{prefixPartial "kotlin/KotlinConstant" "        "}}
{{/constants}}
{{#ifPredicate "hasStaticFunctions"}}
{{#set self=this isStructure=true}}
{{#self}}
{{#functions}}
{{#if isStatic}}
{{prefixPartial "kotlin/KotlinFunction" "        "}}
{{/if}}
{{/functions}}
{{/self}}
{{/set}}
{{/ifPredicate}}
    }
{{/ifPredicate}}
}
