{{!!
  !
  ! Copyright (C) 2016-2025 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if this.isOpen}}open {{/if}}class {{resolveName}} : {{!!
}}{{#if this.parentClass}}{{resolveName this.parentClass "" "ref"}}{{/if}}{{!!
}}{{#unless this.parentClass}}NativeBase{{/unless}}{{!!
}}{{#if this.parentInterfaces}}, {{#this.parentInterfaces}}{{!!
}}{{resolveName this "" "ref"}}{{#if iter.hasNext}}, {{/if}}{{!!
}}{{/this.parentInterfaces}}{{/if}} {

{{>kotlin/KotlinContainerContents}}

{{#set classElement=this}}{{#constructors}}
    constructor({{!!
}}{{#parameters}}{{!!
}}{{resolveName}}: {{resolveName typeRef}}{{#if iter.hasNext}}, {{/if}}{{!!
}}{{/parameters}}){{!!
}} : this({{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}), null as Any?) {
{{#unless classElement.attributes.nocache}}
        cacheThisInstance();
{{/unless}}
    }
{{/constructors}}{{/set}}

    /*
     * For internal use only.
     * @hidden
     * @param nativeHandle The handle to resources on C++ side.
     * @param tag Tag used by callers to avoid overload resolution problems.
     */
    protected constructor(nativeHandle: Long, tag: Any?)
        : {{!!
}}{{#unlessPredicate "needsDisposer"}}super(nativeHandle, tag){{/unlessPredicate}}{{!!
}}{{#ifPredicate "needsDisposer"}}super(nativeHandle, { disposeNativeHandle(it) }){{/ifPredicate}} {}

{{#if constructors}}{{#unless this.attributes.nocache}}
    private external fun cacheThisInstance()
{{/unless}}{{/if}}

{{#if attributes.equatable attributes.pointerEquatable logic="or"}}
    override external fun equals(obj: Any?) : Boolean
    override external fun hashCode(): Int

{{/if}}

{{#functions}}
{{#unless isStatic}}
{{prefixPartial "kotlin/KotlinFunction" "    "}}
{{/unless}}
{{/functions}}

{{#properties}}
{{#unless isStatic}}
{{#if setter}}    var{{/if}}{{!!
}}{{#unless setter}}    val{{/unless}}{{!!
}} {{resolveName}}: {{resolveName typeRef}}
        external get{{#setter}}
        external set{{/setter}}
{{/unless}}
{{/properties}}

{{#if this.parentInterfaces}}{{#set override=true classElement=this}}
{{#classElement.interfaceInheritedFunctions}}
{{#unless isStatic}}
{{prefixPartial "kotlin/KotlinFunction" "    "}}
{{/unless}}
{{/classElement.interfaceInheritedFunctions}}
{{#classElement.interfaceInheritedProperties}}
{{#unless isStatic}}
{{#if setter}}    override var{{/if}}{{!!
}}{{#unless setter}}    override val{{/unless}}{{!!
}} {{resolveName}}: {{resolveName typeRef}}
        external get{{#setter}}
        external set{{/setter}}
{{/unless}}
{{/classElement.interfaceInheritedProperties}}
{{/set}}{{/if}}

{{#ifPredicate "needsCompanionObject"}}
    companion object {
{{#constants}}{{prefixPartial "kotlin/KotlinConstant" "        "}}
{{/constants}}
{{#ifPredicate "needsDisposer"}}
        @JvmStatic private external fun disposeNativeHandle(nativeHandle: Long)
{{/ifPredicate}}
{{#ifPredicate "hasStaticFunctions"}}
{{#functions}}
{{#if isStatic}}
{{prefixPartial "kotlin/KotlinFunction" "        "}}
{{/if}}
{{/functions}}
{{/ifPredicate}}
{{#ifPredicate "hasStaticProperties"}}
{{#properties}}
{{#if isStatic}}
{{#if setter}}        @JvmStatic var{{/if}}{{!!
}}{{#unless setter}}        @JvmStatic val{{/unless}}{{!!
}} {{resolveName}}: {{resolveName typeRef}}
            external get{{#setter}}
            external set{{/setter}}
{{/if}}
{{/properties}}
{{/ifPredicate}}
    }
{{/ifPredicate}}
}