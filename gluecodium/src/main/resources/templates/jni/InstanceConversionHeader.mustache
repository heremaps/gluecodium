{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#pragma once

{{#includes}}
{{>common/Include}}
{{/includes}}
{{#ifPredicate model "hasOverloadedLambda"}}
#include "JniCallJavaMethod.h"
{{/ifPredicate}}
#include "JniReference.h"
#include <memory>
#include <optional>
{{#ifPredicate model "hasOverloadedLambda"}}
#include <unordered_map>
#include <vector>
{{/ifPredicate}}

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

{{#model}}
JNIEXPORT {{>cppTypeName}} {{>conversionPrefix}}convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _jobj, {{>cppTypeName}}*);
JNIEXPORT JniReference<jobject> {{>conversionPrefix}}convert_to_jni(JNIEnv* _jenv, const {{>cppTypeName}}& _ninput);
{{#ifPredicate "hasOverloadedLambda"}}{{>jni/LambdaOverloadedConversionHeader}}{{/ifPredicate}}
{{/model}}

}
{{#internalNamespace}}
}
{{/internalNamespace}}{{!!

}}{{+cppTypeName}}{{#instanceOf this "LimeLambda"}}{{resolveName "C++ FQN"}}{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeLambda"}}std::shared_ptr<{{resolveName "C++ FQN"}}>{{/notInstanceOf}}{{/cppTypeName}}{{!!

}}{{+conversionPrefix}}{{#ifPredicate this "hasOverloadedLambda"}}{{resolveName "mangled"}}_{{/ifPredicate}}{{/conversionPrefix}}
