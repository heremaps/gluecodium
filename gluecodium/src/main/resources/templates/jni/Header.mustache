{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#pragma once

#include <jni.h>

#ifdef __cplusplus
extern "C" {
#endif

{{#container}}{{#functions}}{{#unless attributes.java.skip}}
{{>jniFunctionHeader}}

{{/unless}}{{/functions}}
{{#properties}}{{#unless attributes.java.skip}}
{{>jniPropertyHeader}}

{{/unless}}{{/properties}}

{{#if parent}}{{#instanceOf parent.type.actualType "LimeInterface"}}
{{#inheritedFunctions}}
{{>jniFunctionHeader}}

{{/inheritedFunctions}}
{{#inheritedProperties}}
{{>jniPropertyHeader}}

{{/inheritedProperties}}
{{/instanceOf}}{{/if}}

{{#if attributes.equatable attributes.pointerEquatable logic="or"}}
JNIEXPORT jboolean JNICALL
{{>jni/FunctionSignaturePrefix}}_equals(JNIEnv* _jenv, jobject _jinstance, jobject jrhs);

JNIEXPORT jint JNICALL
{{>jni/FunctionSignaturePrefix}}_hashCode(JNIEnv* _jenv, jobject _jinstance);
{{/if}}
{{/container}}

#ifdef __cplusplus
}
#endif{{!!

}}{{+jniFunctionHeader}}{{!!
}}JNIEXPORT {{#ifPredicate "returnsOpaqueHandle"}}jlong{{/ifPredicate}}{{!!
}}{{#unlessPredicate "returnsOpaqueHandle"}}{{resolveName returnType}}{{/unlessPredicate}} JNICALL
{{>jni/FunctionSignature}};{{!!
}}{{/jniFunctionHeader}}{{!!

}}{{+jniPropertyHeader}}{{!!
}}{{#set property=this}}{{#getter}}
JNIEXPORT {{resolveName returnType}} JNICALL
Java_{{resolveName container "mangled"}}_{{resolveName property "mangled" "getter"}}(JNIEnv* _jenv, jobject _jinstance);
{{/getter}}{{#setter}}
JNIEXPORT void JNICALL
Java_{{resolveName container "mangled"}}_{{resolveName property "mangled" "setter"}}(JNIEnv* _jenv, jobject _jinstance{{!!
}}{{#parameters}}, {{resolveName typeRef}} j{{resolveName}}{{/parameters}});
{{/setter}}{{/set}}{{!!
}}{{/jniPropertyHeader}}
