{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "JniClassCache.h"
#include "JniReference.h"
#include "JniWrapperCache.h"

extern "C" {

{{#container}}{{#methods}}
{{>jniMethod}}

{{/methods}}
{{#if hasInterfaceParent}}{{#parentMethods}}
{{>jniMethod}}

{{/parentMethods}}{{/if}}
{{#instanceOf container "JniContainer"}}
JNIEXPORT void JNICALL
Java_{{mangledName}}_disposeNativeHandle(JNIEnv* _jenv, jobject _jinstance, jlong _jpointerRef)
{
{{#unless isFunctionalInterface}}
    auto p_nobj = reinterpret_cast<std::shared_ptr<{{cppFullyQualifiedName}}>*>(_jpointerRef);
    {{>common/InternalNamespace}}jni::JniWrapperCache::remove_cached_wrapper(_jenv, *p_nobj);
    delete p_nobj;
{{/unless}}{{#if isFunctionalInterface}}
    delete reinterpret_cast<{{cppFullyQualifiedName}}*>(_jpointerRef);
{{/if}}
}

{{#if hasConstructors}}
JNIEXPORT void JNICALL
Java_{{mangledName}}_cacheThisInstance(JNIEnv* _jenv, jobject _jinstance)
{
    auto jobj = {{>common/InternalNamespace}}jni::make_non_releasing_ref(_jinstance);
    auto long_ptr = {{>common/InternalNamespace}}jni::get_field_value(_jenv, jobj, "nativeHandle", (int64_t*)nullptr);
    auto nobj = *reinterpret_cast<std::shared_ptr<{{cppFullyQualifiedName}}>*>(long_ptr);
    {{>common/InternalNamespace}}jni::JniWrapperCache::cache_wrapper(_jenv, nobj, jobj);
}
{{/if}}
{{/instanceOf}}
{{#hasNativeEquatable}}
jboolean
{{#set javaMethodName="equals"}}{{>jni/FunctionSignaturePrefix}}{{/set}}, jobject jrhs)
{
    if (_jinstance == nullptr || jrhs == nullptr) {
        return _jinstance == jrhs;
    }
{{#isPointerEquatable}}
    auto jclass = {{>common/InternalNamespace}}jni::get_object_class(_jenv, _jinstance);
{{/isPointerEquatable}}
{{#isEquatable}}
    auto& jclass = {{>common/InternalNamespace}}jni::get_cached_native_base_class();
{{/isEquatable}}
    if (!_jenv->IsInstanceOf(jrhs, jclass.get())) {
        return false;
    }
    auto lhs = {{#set jobjectName="_jinstance"}}{{>sharedInstance}}{{/set}}
{{#isPointerEquatable}}
    auto rhs = {{#set jobjectName="jrhs" cppFullyQualifiedName="void"}}{{>sharedInstance}}{{/set}}
    return *lhs == *rhs;
{{/isPointerEquatable}}
{{#isEquatable}}
    auto rhs = {{#set jobjectName="jrhs"}}{{>sharedInstance}}{{/set}}
    return **lhs == **rhs;
{{/isEquatable}}
}

jint
{{#set javaMethodName="hashCode"}}{{>jni/FunctionSignature}}{{/set}}
{
    auto pInstanceSharedPointer = {{#set jobjectName="_jinstance"}}{{>sharedInstance}}{{/set}}
    return {{>common/InternalNamespace}}hash<std::shared_ptr<{{cppFullyQualifiedName}}> >()(*pInstanceSharedPointer);
}
{{/hasNativeEquatable}}
}
{{/container}}{{!!

}}{{+sharedInstance}}{{!!
}}reinterpret_cast<std::shared_ptr<{{cppFullyQualifiedName}}>*> (
{{>getNativeHandle}});
{{/sharedInstance}}{{!!

}}{{+getNativeHandle}}
        {{>common/InternalNamespace}}jni::get_field_value(
            _jenv,
            {{>common/InternalNamespace}}jni::make_non_releasing_ref({{jobjectName}}),
            "nativeHandle",
            (int64_t*)nullptr){{!!
}}{{/getNativeHandle}}{{!!

}}{{+jniMethod}}
{{returnType.name}}
{{>jni/FunctionSignature}}
{
{{#parameters}}
{{#if type.isComplex}}
    {{type.cppName}} {{name}} = {{>common/InternalNamespace}}jni::convert_from_jni(_jenv,
            {{>common/InternalNamespace}}jni::make_non_releasing_ref(j{{name}}),
            ({{type.cppName}}*)nullptr);
{{/if}}
{{#unless type.isComplex}}
    {{type.cppName}} {{name}} = j{{name}};
{{/unless}}
{{/parameters}}
{{#unless isStatic}}{{#instanceOf container "JniContainer"}}{{#unless isFunctionalInterface}}
    auto pInstanceSharedPointer = {{#set jobjectName="_jinstance"}}{{>sharedInstance}}{{/set}}
{{/unless}}{{#if isFunctionalInterface}}
    auto pInstanceSharedPointer = reinterpret_cast<{{cppFullyQualifiedName}}*>(
{{#set jobjectName="_jinstance"}}{{>getNativeHandle}}{{/set}});
{{/if}}{{/instanceOf}}{{!!
}}{{#notInstanceOf container "JniContainer"}}
    auto _ninstance = {{>common/InternalNamespace}}jni::convert_from_jni(_jenv,
        {{>common/InternalNamespace}}jni::make_non_releasing_ref(_jinstance),
        ({{container.cppFullyQualifiedName}}*)nullptr);
{{/notInstanceOf}}{{/unless}}
{{>jni/ReturnTypeConversion}}
}
{{/jniMethod}}
