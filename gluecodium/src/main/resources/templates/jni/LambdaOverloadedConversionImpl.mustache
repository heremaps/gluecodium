{{!!
  !
  ! Copyright (C) 2016-2021 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
optional<{{resolveName "C++ FQN"}}>
{{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _jobj, optional<{{resolveName "C++ FQN"}}>*) {
    return _jobj
        ? optional<{{resolveName "C++ FQN"}}>({{resolveName "mangled"}}_convert_from_jni(_env, _jobj, ({{resolveName "C++ FQN"}}*)nullptr))
        : optional<{{resolveName "C++ FQN"}}>{};
}

JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const optional<{{resolveName "C++ FQN"}}>& _ninput) {
    return _ninput ? {{resolveName "mangled"}}_convert_to_jni(_env, *_ninput) : JniReference<jobject>{};
}

JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::vector<{{resolveName "C++ FQN"}}>& _ninput) {
    auto javaClass = find_class(_env, "java/util/ArrayList");
    auto result = create_object(_env, javaClass);
    jmethodID addMethodId = _env->GetMethodID(javaClass.get(), "add", "(Ljava/lang/Object;)Z");

    for (const auto& element : _ninput) {
        auto jElement = {{resolveName "mangled"}}_convert_to_jni(_env, element);
        call_java_method<jboolean>(_env, result, addMethodId, jElement);
    }

    return result;
}

JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const optional<std::vector<{{resolveName "C++ FQN"}}>>& _ninput) {
    return _ninput ? {{resolveName "mangled"}}_convert_to_jni(_env, *_ninput) : JniReference<jobject>{};
}

std::vector<{{resolveName "C++ FQN"}}>
{{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _arrayList, std::vector<{{resolveName "C++ FQN"}}>*) {
    std::vector<{{resolveName "C++ FQN"}}> _nresult{};
    if (_env->IsSameObject(_arrayList.get(), nullptr)) {
        return _nresult;
    }

    auto javaArrayListClass = find_class(_env, "java/util/List");
    auto sizeMethodId = _env->GetMethodID(javaArrayListClass.get(), "size", "()I");
    jint length = call_java_method<jint>(_env, _arrayList, sizeMethodId);
    _nresult.reserve(length);

    auto getMethodId = _env->GetMethodID(javaArrayListClass.get(), "get", "(I)Ljava/lang/Object;");
    for (jint i = 0; i < length; i++) {
        auto javaListItem = call_java_method<jobject>(_env, _arrayList, getMethodId, i);
        _nresult.push_back({{resolveName "mangled"}}_convert_from_jni(_env, javaListItem, ({{resolveName "C++ FQN"}}*)nullptr));
    }

    return _nresult;
}

optional<std::vector<{{resolveName "C++ FQN"}}>>
{{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _arrayList, optional<std::vector<{{resolveName "C++ FQN"}}>>*) {
    return _arrayList
        ? optional<std::vector<{{resolveName "C++ FQN"}}>>({{resolveName "mangled"}}_convert_from_jni(_env, _arrayList, (std::vector<{{resolveName "C++ FQN"}}>*)nullptr))
        : optional<std::vector<{{resolveName "C++ FQN"}}>>{};
}
