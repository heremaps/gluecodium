{{!!
  !
  ! Copyright (C) 2016-2024 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
std::optional<{{resolveName "C++ FQN"}}>
{{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _jobj, TypeId<std::optional<{{resolveName "C++ FQN"}}>>) {
    return _jobj
        ? std::optional<{{resolveName "C++ FQN"}}>({{resolveName "mangled"}}_convert_from_jni(_env, _jobj, TypeId<{{resolveName "C++ FQN"}}>{}))
        : std::optional<{{resolveName "C++ FQN"}}>{};
}

JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::optional<{{resolveName "C++ FQN"}}>& _ninput) {
    return _ninput ? {{resolveName "mangled"}}_convert_to_jni(_env, *_ninput) : JniReference<jobject>{};
}

JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* const env, const std::vector<{{resolveName "C++ FQN"}}>& input)
{
    JavaArrayListAdder list_appender{env};

    for (const auto& element : input)
    {
        list_appender.add({{resolveName "mangled"}}_convert_to_jni(env, element));
    }

    return list_appender.fetch_container();
}

JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::optional<std::vector<{{resolveName "C++ FQN"}}>>& _ninput) {
    return _ninput ? {{resolveName "mangled"}}_convert_to_jni(_env, *_ninput) : JniReference<jobject>{};
}

std::vector<{{resolveName "C++ FQN"}}>
{{resolveName "mangled"}}_convert_from_jni(JNIEnv* const env, const JniReference<jobject>& array_list, TypeId<std::vector<{{resolveName "C++ FQN"}}>>) {
    std::vector<{{resolveName "C++ FQN"}}> result{};
    if (env->IsSameObject(array_list.get(), nullptr))
    {
        return result;
    }

    const JavaListIterator list_iterator(env, array_list);

    const jint length = list_iterator.length();

    result.reserve(length);

    for (jint i = 0; i < length; i++)
    {
        result.emplace_back({{resolveName "mangled"}}_convert_from_jni(
            env, list_iterator.get(array_list, i), TypeId<{{resolveName "C++ FQN"}}>{}));
    }

    return result;
}

std::optional<std::vector<{{resolveName "C++ FQN"}}>>
{{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _arrayList, TypeId<std::optional<std::vector<{{resolveName "C++ FQN"}}>>>) {
    return _arrayList
        ? std::optional<std::vector<{{resolveName "C++ FQN"}}>>({{resolveName "mangled"}}_convert_from_jni(_env, _arrayList, TypeId<std::vector<{{resolveName "C++ FQN"}}>>{}))
        : std::optional<std::vector<{{resolveName "C++ FQN"}}>>{};
}
