{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
auto& converterClass = CachedJavaClass<Dummy{{!!
}}{{resolveName external.java.converter "mangled"}}Type>::java_class;

auto convertMethodId = _jenv->GetStaticMethodID(
    converterClass.get(), "convertToInternal", "(L{{resolveName external.java.name ""}};)L{{resolveName this "" "ref"}};");
if (convertMethodId == NULL) {
    throw_runtime_exception(_jenv, "Static method 'convertToInternal({{!!
    }}L{{resolveName external.java.name ""}};)L{{resolveName this "" "ref"}};' not found.");
    return {};
}

auto _jinput = make_local_ref(
    _jenv, _jenv->CallStaticObjectMethod(converterClass.get(), convertMethodId, _jinput_ext.get()));