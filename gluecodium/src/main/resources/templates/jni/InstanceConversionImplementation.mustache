{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "CppProxyBase.h"
#include "FieldAccessMethods.h"
#include "JniClassCache.h"
#include "JniWrapperCache.h"
#include <new>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

{{#model}}
{{#ifPredicate "hasTypeRepository"}}
REGISTER_JNI_CLASS_CACHE_INHERITANCE("{{resolveName}}{{#notInstanceOf this "LimeClass"}}Impl{{/notInstanceOf}}", {{!!
}}{{resolveName "mangled"}}, "{{#path.head}}{{.}}_{{/path.head}}{{resolveName "C++"}}", {{resolveName "C++ FQN"}})
{{/ifPredicate}}{{#unlessPredicate "hasTypeRepository"}}
REGISTER_JNI_CLASS_CACHE("{{resolveName}}{{#notInstanceOf this "LimeClass"}}Impl{{/notInstanceOf}}", {{!!
}}{{resolveName "mangled"}}, {{resolveName "C++ FQN"}})
{{/unlessPredicate}}

{{#notInstanceOf this "LimeClass"}}{{#instanceOf this "LimeLambda"}}
void createCppProxy(JNIEnv* env, const JniReference<jobject>& obj, {{resolveName "C++ FQN"}}& result)
{
    std::shared_ptr<{{resolveName "mangled"}}_CppProxy> _nproxy{};
    CppProxyBase::createProxy<{{resolveName "mangled"}}_CppProxy, {{resolveName "mangled"}}_CppProxy>({{!!
    }}env, obj, "{{resolveName "mangled"}}", _nproxy);
    result = std::bind(&{{resolveName "mangled"}}_CppProxy::operator(), _nproxy{{!!
            }}{{#parameters}}, std::placeholders::_{{iter.index}}{{/parameters}});
}
{{/instanceOf}}{{#notInstanceOf this "LimeLambda"}}
template<>
void createCppProxy(JNIEnv* env, const JniReference<jobject>& obj, ::std::shared_ptr<{{resolveName "C++ FQN"}}>& result)
{
    CppProxyBase::createProxy<{{resolveName "C++ FQN"}}, {{resolveName "mangled"}}_CppProxy>({{!!
    }}env, obj, "{{resolveName "mangled"}}", result);
}
{{/notInstanceOf}}{{/notInstanceOf}}

{{>cppTypeName}} convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _jobj, {{>cppTypeName}}*)
{
    {{>cppTypeName}} _nresult{};
    auto& nativeBaseClass = get_cached_native_base_class();
    if (_env->IsInstanceOf(_jobj.get(), nativeBaseClass.get()))
    {
        if (_jobj != nullptr)
        {
            auto long_ptr = get_field_value(
                _env,
                _jobj,
                "nativeHandle",
                (int64_t*)nullptr);
            _nresult = *reinterpret_cast<{{>cppTypeName}}*>(long_ptr);
        }
    }
    else
    {
        createCppProxy(_env, _jobj, _nresult);
    }
    return _nresult;
}

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{>cppTypeName}}& _ninput)
{
    if ( !_ninput )
    {
        return {};
    }

{{#instanceOf this "LimeLambda"}}
    JniReference<jobject> jResult;
{{/instanceOf}}{{#notInstanceOf this "LimeLambda"}}
    auto jResult = {{>common/InternalNamespace}}jni::CppProxyBase::getJavaObject( _ninput.get( ) );
    if (jResult) return jResult;

    jResult = {{>common/InternalNamespace}}jni::JniWrapperCache::get_cached_wrapper(_jenv, _ninput);
    if (jResult) return jResult;
{{/notInstanceOf}}

{{#ifPredicate "hasTypeRepository"}}
    const auto& id = {{>common/InternalNamespace}}get_type_repository(static_cast< {{resolveName "C++ FQN"}}* >(nullptr)).get_id(_ninput.get());
    const auto& javaClass = CachedJavaClass<{{resolveName "C++ FQN"}}>::get_java_class(id);
{{/ifPredicate}}{{#unlessPredicate "hasTypeRepository"}}
    auto &javaClass = CachedJavaClass<{{resolveName "C++ FQN"}}>::java_class;
{{/unlessPredicate}}
    auto pInstanceSharedPointer = new (::std::nothrow) {{>cppTypeName}}(_ninput);
    if ( pInstanceSharedPointer == nullptr )
    {
        auto exceptionClass = find_class(_jenv, "java/lang/OutOfMemoryError" );
        _jenv->ThrowNew( exceptionClass.get(), "Cannot allocate native memory." );
    }
    jResult = {{>common/InternalNamespace}}jni::create_instance_object(
        _jenv, javaClass, reinterpret_cast<jlong>( pInstanceSharedPointer ) );
{{#notInstanceOf this "LimeLambda"}}
    {{>common/InternalNamespace}}jni::JniWrapperCache::cache_wrapper(_jenv, _ninput, jResult);
{{/notInstanceOf}}

    return jResult;
}

{{/model}}
}
{{#internalNamespace}}
}
{{/internalNamespace}}{{!!

}}{{+cppTypeName}}{{#instanceOf this "LimeLambda"}}{{resolveName "C++ FQN"}}{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeLambda"}}std::shared_ptr<{{resolveName "C++ FQN"}}>{{/notInstanceOf}}{{/cppTypeName}}
