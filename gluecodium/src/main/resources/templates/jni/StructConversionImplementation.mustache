{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "FieldAccessMethods.h"
#include "JniCallJavaMethod.h"
#include "JniClassCache.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{
{{#struct}}
{{#set ConvertedType=this}}{{#eval "external" platformName}}{{#if this.converter}}
{{>jni/ExternalConversionClassCache}}
{{/if}}{{/eval}}{{/set}}

{{resolveName "C++ FQN"}}
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput{{!!
}}{{#ifPredicate "hasExternalConverter"}}_ext{{/ifPredicate}}, TypeId<{{resolveName "C++ FQN"}}>)
{
{{#set ConvertedType=this}}{{#eval "external" platformName}}{{#if this.converter}}
{{prefixPartial "jni/ExternalConversionFromJni" "    "}}
{{/if}}{{/eval}}{{/set}}
    {{#unlessPredicate "hasImmutableFields"}}{{resolveName "C++ FQN"}} _nout{};{{/unlessPredicate}}
{{#fields}}{{#ifPredicate "shouldRetain"}}{{#ifPredicate "hasExternalGetterName"}}{{#unlessPredicate typeRef "isJniPrimitive"}}
    auto j_{{resolveName "C++"}} = call_java_method<{{resolveName typeRef}}>(_jenv, _jinput, {{!!
    }}"{{eval "external" platformName "getterName"}}", "(){{resolveName typeRef "signature"}}");
    auto n_{{resolveName "C++"}} = {{>jni/JniConversionPrefix}}convert_from_jni(_jenv, j_{{resolveName "C++"}}, TypeId<{{resolveName typeRef "C++"}}>{});
{{/unlessPredicate}}{{#ifPredicate typeRef "isJniPrimitive"}}
    auto n_{{resolveName "C++"}} = call_java_method<{{resolveName typeRef}}>(_jenv, _jinput, {{!!
    }}"{{eval "external" platformName "getterName"}}", "(){{resolveName typeRef "signature"}}");
{{/ifPredicate}}{{/ifPredicate}}{{!!
}}{{#unlessPredicate "hasExternalGetterName"}}{{#notInstanceOf typeRef.type.actualType "LimeBasicType"}}
{{#if typeRef.attributes.optimized}}
    auto j_{{resolveName "C++"}} = get_object_field_value(_jenv, _jinput, "{{resolveName}}", "L{{resolveName typeRef.type.actualType}};");
    auto {{resolveName "C++"}}_handle = get_class_native_handle(_jenv, j_{{resolveName "C++"}});
    auto& n_{{resolveName "C++"}} = **reinterpret_cast<std::shared_ptr<{{resolveName typeRef "C++"}}>*>({{resolveName "C++"}}_handle);
{{/if}}{{#unless typeRef.attributes.optimized}}
    {{resolveName typeRef "C++"}} n_{{resolveName "C++"}} = {{>jni/JniConversionPrefix}}convert_from_jni(
        _jenv,
        {{>common/InternalNamespace}}jni::get_object_field_value({{!!
        }}_jenv, _jinput, "{{resolveName}}", "L{{resolveName typeRef.type.actualType}};"),
        TypeId<{{resolveName typeRef "C++"}}>{} );
{{/unless}}
{{/notInstanceOf}}{{#instanceOf typeRef.type.actualType "LimeBasicType"}}
    {{resolveName typeRef "C++"}} n_{{resolveName "C++"}} = {{>common/InternalNamespace}}jni::get_field_value(
        _jenv,
        _jinput,
        "{{resolveName}}",
        TypeId<{{resolveName typeRef "C++"}}>{} );
{{/instanceOf}}{{/unlessPredicate}}
    {{#unlessPredicate struct "hasImmutableFields"}}_nout.{{!!
    }}{{#ifPredicate "hasCppSetter"}}{{resolveName this "C++" "setter"}}(n_{{resolveName this "C++"}}){{/ifPredicate}}{{!!
    }}{{#unlessPredicate "hasCppSetter"}}{{resolveName this "C++"}} = n_{{resolveName this "C++"}}{{/unlessPredicate}}{{!!
    }};{{/unlessPredicate}}
{{/ifPredicate}}{{/fields}}
    {{#ifPredicate struct "hasImmutableFields"}}return {{resolveName "C++ FQN"}}({{!!
    }}{{#if allFieldsConstructor}}{{#allFieldsConstructor}}{{>immutableFieldsInit}}{{/allFieldsConstructor}}{{/if}}{{!!
    }}{{#unless allFieldsConstructor}}{{>immutableFieldsInit}}{{/unless}}{{!!
    }});{{/ifPredicate}}{{!!
    }}{{#unlessPredicate struct "hasImmutableFields"}}return _nout;{{/unlessPredicate}}
}

std::optional<{{resolveName "C++ FQN"}}>
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, TypeId<std::optional<{{resolveName "C++ FQN"}}>>)
{
    return _jinput
        ? std::optional<{{resolveName "C++ FQN"}}>(convert_from_jni(_jenv, _jinput, TypeId<{{resolveName "C++ FQN"}}>{}))
        : std::optional<{{resolveName "C++ FQN"}}>{};
}

REGISTER_JNI_CLASS_CACHE("{{resolveName this "" "ref"}}", {{resolveName this "mangled" "ref"}}, {{resolveName "C++ FQN"}})

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{resolveName "C++ FQN"}}& _ninput)
{
{{>convertToJniBody}}
{{#set ConvertedType=this}}{{#eval "external" platformName}}{{#if this.converter}}
{{prefixPartial "jni/ExternalConversionToJni" "    "}}
{{/if}}{{/eval}}{{/set}}
    return _jresult;
}
{{#if constructors}}{{#ifPredicate "hasExternalConverter"}}

JniReference<jobject>
convert_to_jni_internal(JNIEnv* _jenv, const {{resolveName "C++ FQN"}}& _ninput)
{
{{>convertToJniBody}}
    return _jresult;
}
{{/ifPredicate}}{{/if}}

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const std::optional<{{resolveName "C++ FQN"}}> _ninput)
{
    return _ninput ? convert_to_jni(_jenv, *_ninput) : JniReference<jobject>{};
}

{{/struct}}
}
{{#internalNamespace}}
}
{{/internalNamespace}}
{{!!

}}{{+getCppFieldValue}}_ninput.{{!!
}}{{#ifPredicate "hasCppGetter"}}{{resolveName this "C++" "getter"}}(){{/ifPredicate}}{{!!
}}{{#unlessPredicate "hasCppGetter"}}{{resolveName this "C++"}}{{/unlessPredicate}}{{!!
}}{{/getCppFieldValue}}{{!!

}}{{+immutableFieldsInit}}{{#fields}}{{!!
}}{{#ifPredicate "shouldRetain"}}std::move(n_{{resolveName "C++"}}){{/ifPredicate}}{{!!
}}{{#unlessPredicate "shouldRetain"}}{{resolveName defaultValue "C++"}}{{/unlessPredicate}}{{#if iter.hasNext}}, {{/if}}{{!!
}}{{/fields}}{{/immutableFieldsInit}}{{!!

}}{{+convertToJniBody}}{{!!
}}    auto& javaClass = CachedJavaClass<{{resolveName "C++ FQN"}}>::java_class;
    auto _jresult = {{>common/InternalNamespace}}jni::alloc_object(_jenv, javaClass);
{{#set struct=this}}{{#fields}}{{#ifPredicate "shouldRetain"}}{{#ifPredicate "hasExternalSetterName"}}{{#unlessPredicate typeRef "isJniPrimitive"}}
    auto j{{resolveName "C++"}} = {{>jni/JniConversionPrefix}}convert_to_jni(_jenv, {{>getCppFieldValue}});
    call_java_method<void>(_jenv, _jresult, "{{eval "external" platformName "setterName"}}", {{!!
    }}"({{resolveName typeRef "signature"}})V", j{{cppField.name}});
{{/unlessPredicate}}{{#ifPredicate typeRef "isJniPrimitive"}}
    call_java_method<void>(_jenv, _jresult, "{{eval "external" platformName "setterName"}}", {{!!
    }}"({{resolveName typeRef "signature"}})V", {{>getCppFieldValue}});
{{/ifPredicate}}{{/ifPredicate}}{{!!
}}{{#unlessPredicate "hasExternalSetterName"}}{{#notInstanceOf typeRef.type.actualType "LimeBasicType"}}
    auto j{{resolveName "C++"}} = {{#if typeRef.attributes.optimized}}{{!!
}}convert_to_jni_optimized(_jenv, {{>getCppFieldValue}}, "{{resolveName struct "" "ref"}}${{resolveName typeRef "" "ref"}}"){{/if}}{{!!
}}{{#unless typeRef.attributes.optimized}}{{>jni/JniConversionPrefix}}convert_to_jni(_jenv, {{>getCppFieldValue}}){{/unless}};
    {{>common/InternalNamespace}}jni::set_object_field_value({{!!
    }}_jenv, _jresult, "{{resolveName}}", "L{{resolveName typeRef.type.actualType}};", j{{resolveName "C++"}});
{{/notInstanceOf}}{{#instanceOf typeRef.type.actualType "LimeBasicType"}}
    {{>common/InternalNamespace}}jni::set_field_value(_jenv, _jresult, "{{resolveName}}", {{>getCppFieldValue}});
{{/instanceOf}}{{/unlessPredicate}}{{/ifPredicate}}{{/fields}}{{/set}}{{!!
}}{{/convertToJniBody}}
