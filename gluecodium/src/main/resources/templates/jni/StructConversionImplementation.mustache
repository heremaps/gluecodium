{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "FieldAccessMethods.h"
#include "JniCallJavaMethod.h"
#include "JniClassCache.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{
{{#struct}}
{{#if externalConverter}}
{{>jni/ExternalConversionClassCache}}
{{/if}}

{{cppFullyQualifiedName}}
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput{{#if externalConverter}}_ext{{/if}}, {{cppFullyQualifiedName}}*)
{
{{#if externalConverter}}
{{prefixPartial "jni/ExternalConversionFromJni" "    "}}
{{/if}}
    {{#unless hasImmutableFields}}{{cppFullyQualifiedName}} _nout{};{{/unless}}
{{#fields}}{{#if javaGetterName}}{{#if type.isComplex}}
    auto j_{{cppField.name}} = call_java_method<{{type.name}}>(_jenv, _jinput, "{{javaGetterName}}", "(){{type.jniTypeSignature}}");
    auto n_{{cppField.name}} = convert_from_jni(_jenv, j_{{cppField.name}}, ({{cppField.type.name}}*)nullptr);
{{/if}}{{#unless type.isComplex}}
    auto n_{{cppField.name}} = call_java_method<{{type.name}}>(_jenv, _jinput, "{{javaGetterName}}", "(){{type.jniTypeSignature}}");
{{/unless}}{{/if}}{{!!
}}{{#unless javaGetterName}}{{#if javaCustomType}}
    {{cppField.type.name}} n_{{cppField.name}} = convert_from_jni(
        _jenv,
        {{>common/InternalNamespace}}jni::get_object_field_value(_jenv, _jinput, "{{javaName}}", "L{{javaCustomType}};"),
        ({{cppField.type.name}}*)nullptr );
{{/if}}{{#unless javaCustomType}}
    {{cppField.type.name}} n_{{cppField.name}} = {{>common/InternalNamespace}}jni::get_field_value(
        _jenv,
        _jinput,
        "{{javaName}}",
        ({{cppField.type.name}}*)nullptr );
{{/unless}}{{/unless}}
    {{#unless hasImmutableFields}}_nout.{{#if cppSetterName}}{{cppSetterName}}({{/if}}{{#unless cppSetterName}}{{cppField.name}} = {{/unless}}n_{{cppField.name}}{{#if cppSetterName}}){{/if}};{{/unless}}
{{/fields}}
    {{#if hasImmutableFields}}return {{cppFullyQualifiedName}}({{#fields}}std::move(n_{{cppField.name}}){{#if iter.hasNext}}, {{/if}}{{/fields}});{{/if}}{{!!
    }}{{#unless hasImmutableFields}}return _nout;{{/unless}}
}

{{>common/InternalNamespace}}optional<{{cppFullyQualifiedName}}>
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, {{>common/InternalNamespace}}optional<{{cppFullyQualifiedName}}>*)
{
    return _jinput
        ? {{>common/InternalNamespace}}optional<{{cppFullyQualifiedName}}>(convert_from_jni(_jenv, _jinput, ({{cppFullyQualifiedName}}*)nullptr))
        : {{>common/InternalNamespace}}optional<{{cppFullyQualifiedName}}>{};
}

REGISTER_JNI_CLASS_CACHE("{{join javaPackage.packageNames delimiter="/"}}/{{javaName}}", {{mangledName}}, {{cppFullyQualifiedName}})

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{cppFullyQualifiedName}}& _ninput)
{
    auto& javaClass = CachedJavaClass<{{cppFullyQualifiedName}}>::java_class;
    auto _jresult = {{>common/InternalNamespace}}jni::alloc_object(_jenv, javaClass);
{{#fields}}{{#if javaSetterName}}{{#if type.isComplex}}
    auto j{{cppField.name}} = convert_to_jni(_jenv, {{>getCppFieldValue}});
    call_java_method<void>(_jenv, _jresult, "{{javaSetterName}}", "({{type.jniTypeSignature}})V", j{{cppField.name}});
{{/if}}{{#unless type.isComplex}}
    call_java_method<void>(_jenv, _jresult, "{{javaSetterName}}", "({{type.jniTypeSignature}})V", {{>getCppFieldValue}});
{{/unless}}{{/if}}{{!!
}}{{#unless javaSetterName}}{{#if javaCustomType}}
    auto j{{cppField.name}} = convert_to_jni(_jenv, {{>getCppFieldValue}});
    {{>common/InternalNamespace}}jni::set_object_field_value(_jenv, _jresult, "{{javaName}}", "L{{javaCustomType}};", j{{cppField.name}});
{{/if}}{{#unless javaCustomType}}
    {{>common/InternalNamespace}}jni::set_field_value(_jenv, _jresult, "{{javaName}}", {{>getCppFieldValue}});
{{/unless}}{{/unless}}{{/fields}}
{{#if externalConverter}}
{{prefixPartial "jni/ExternalConversionToJni" "    "}}
{{/if}}
    return _jresult;
}

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{>common/InternalNamespace}}optional<{{cppFullyQualifiedName}}> _ninput)
{
    return _ninput ? convert_to_jni(_jenv, *_ninput) : JniReference<jobject>{};
}

{{/struct}}
}
{{#internalNamespace}}
}
{{/internalNamespace}}
{{!!

}}{{+getCppFieldValue}}_ninput.{{#if cppGetterName}}{{cppGetterName}}(){{/if}}{{#unless cppGetterName}}{{cppField.name}}{{/unless}}{{/getCppFieldValue}}
