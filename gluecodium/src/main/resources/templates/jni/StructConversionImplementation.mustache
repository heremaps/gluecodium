{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "FieldAccessMethods.h"
#include "JniCallJavaMethod.h"
#include "JniClassCache.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{
{{#struct}}
{{#if external.java.converter}}
{{>jni/ExternalConversionClassCache}}
{{/if}}

{{resolveName "C++ FQN"}}
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput{{!!
}}{{#if external.java.converter}}_ext{{/if}}, {{resolveName "C++ FQN"}}*)
{
{{#if external.java.converter}}
{{prefixPartial "jni/ExternalConversionFromJni" "    "}}
{{/if}}
    {{#unlessPredicate "hasImmutableFields"}}{{resolveName "C++ FQN"}} _nout{};{{/unlessPredicate}}
{{#fields}}{{#if external.java.getterName}}{{#unlessPredicate typeRef "isJniPrimitive"}}
    auto j_{{resolveName "C++"}} = call_java_method<{{resolveName typeRef}}>(_jenv, _jinput, {{!!
    }}"{{external.java.getterName}}", "(){{resolveName typeRef "signature"}}");
    auto n_{{resolveName "C++"}} = convert_from_jni(_jenv, j_{{resolveName "C++"}}, ({{resolveName typeRef "C++"}}*)nullptr);
{{/unlessPredicate}}{{#ifPredicate typeRef "isJniPrimitive"}}
    auto n_{{resolveName "C++"}} = call_java_method<{{resolveName typeRef}}>(_jenv, _jinput, {{!!
    }}"{{external.java.getterName}}", "(){{resolveName typeRef "signature"}}");
{{/ifPredicate}}{{/if}}{{!!
}}{{#unless external.java.getterName}}{{#notInstanceOf typeRef.type.actualType "LimeBasicType"}}
{{#if typeRef.attributes.optimized}}
    auto j_{{resolveName "C++"}} = get_object_field_value(_jenv, _jinput, "{{resolveName}}", "L{{resolveName typeRef.type.actualType}};");
    auto {{resolveName "C++"}}_handle = get_field_value(_jenv, j_{{resolveName "C++"}}, "nativeHandle", (int64_t*)nullptr);
    auto& n_{{resolveName "C++"}} = *reinterpret_cast<std::shared_ptr<{{resolveName typeRef "C++"}}>*>({{resolveName "C++"}}_handle);
{{/if}}{{#unless typeRef.attributes.optimized}}
    {{resolveName typeRef "C++"}} n_{{resolveName "C++"}} = convert_from_jni(
        _jenv,
        {{>common/InternalNamespace}}jni::get_object_field_value({{!!
        }}_jenv, _jinput, "{{resolveName}}", "L{{resolveName typeRef.type.actualType}};"),
        ({{resolveName typeRef "C++"}}*)nullptr );
{{/unless}}
{{/notInstanceOf}}{{#instanceOf typeRef.type.actualType "LimeBasicType"}}
    {{resolveName typeRef "C++"}} n_{{resolveName "C++"}} = {{>common/InternalNamespace}}jni::get_field_value(
        _jenv,
        _jinput,
        "{{resolveName}}",
        ({{resolveName typeRef "C++"}}*)nullptr );
{{/instanceOf}}{{/unless}}
    {{#unlessPredicate struct "hasImmutableFields"}}_nout.{{!!
    }}{{#ifPredicate "hasCppSetter"}}{{resolveName this "C++" "setter"}}(n_{{resolveName this "C++"}}){{/ifPredicate}}{{!!
    }}{{#unlessPredicate "hasCppSetter"}}{{resolveName this "C++"}} = n_{{resolveName this "C++"}}{{/unlessPredicate}}{{!!
    }};{{/unlessPredicate}}
{{/fields}}
    {{#ifPredicate struct "hasImmutableFields"}}return {{resolveName "C++ FQN"}}({{#fields}}std::move(n_{{resolveName "C++"}}){{#if iter.hasNext}}, {{/if}}{{/fields}});{{/ifPredicate}}{{!!
    }}{{#unlessPredicate struct "hasImmutableFields"}}return _nout;{{/unlessPredicate}}
}

{{>common/InternalNamespace}}optional<{{resolveName "C++ FQN"}}>
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, {{>common/InternalNamespace}}optional<{{resolveName "C++ FQN"}}>*)
{
    return _jinput
        ? {{>common/InternalNamespace}}optional<{{resolveName "C++ FQN"}}>(convert_from_jni(_jenv, _jinput, ({{resolveName "C++ FQN"}}*)nullptr))
        : {{>common/InternalNamespace}}optional<{{resolveName "C++ FQN"}}>{};
}

REGISTER_JNI_CLASS_CACHE("{{resolveName this "" "ref"}}", {{resolveName this "mangled" "ref"}}, {{resolveName "C++ FQN"}})

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{resolveName "C++ FQN"}}& _ninput)
{
    auto& javaClass = CachedJavaClass<{{resolveName "C++ FQN"}}>::java_class;
    auto _jresult = {{>common/InternalNamespace}}jni::alloc_object(_jenv, javaClass);
{{#set struct=this}}{{#fields}}{{#if external.java.setterName}}{{#unlessPredicate typeRef "isJniPrimitive"}}
    auto j{{resolveName "C++"}} = convert_to_jni(_jenv, {{>getCppFieldValue}});
    call_java_method<void>(_jenv, _jresult, "{{external.java.setterName}}", {{!!
    }}"({{resolveName typeRef "signature"}})V", j{{cppField.name}});
{{/unlessPredicate}}{{#ifPredicate typeRef "isJniPrimitive"}}
    call_java_method<void>(_jenv, _jresult, "{{external.java.setterName}}", {{!!
    }}"({{resolveName typeRef "signature"}})V", {{>getCppFieldValue}});
{{/ifPredicate}}{{/if}}{{!!
}}{{#unless external.java.setterName}}{{#notInstanceOf typeRef.type.actualType "LimeBasicType"}}
    auto j{{resolveName "C++"}} = {{#if typeRef.attributes.optimized}}{{!!
}}convert_to_jni_optimized(_jenv, result, "{{resolveName struct "" "ref"}}${{resolveName typeRef "" "ref"}}"){{/if}}{{!!
}}{{#unless typeRef.attributes.optimized}}convert_to_jni(_jenv, {{>getCppFieldValue}}){{/unless}};
    {{>common/InternalNamespace}}jni::set_object_field_value({{!!
    }}_jenv, _jresult, "{{resolveName}}", "L{{resolveName typeRef.type.actualType}};", j{{resolveName "C++"}});
{{/notInstanceOf}}{{#instanceOf typeRef.type.actualType "LimeBasicType"}}
    {{>common/InternalNamespace}}jni::set_field_value(_jenv, _jresult, "{{resolveName}}", {{>getCppFieldValue}});
{{/instanceOf}}{{/unless}}{{/fields}}{{/set}}
{{#if external.java.converter}}
{{prefixPartial "jni/ExternalConversionToJni" "    "}}
{{/if}}
    return _jresult;
}

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{>common/InternalNamespace}}optional<{{resolveName "C++ FQN"}}> _ninput)
{
    return _ninput ? convert_to_jni(_jenv, *_ninput) : JniReference<jobject>{};
}

{{/struct}}
}
{{#internalNamespace}}
}
{{/internalNamespace}}
{{!!

}}{{+getCppFieldValue}}_ninput.{{!!
}}{{#ifPredicate "hasCppGetter"}}{{resolveName this "C++" "getter"}}(){{/ifPredicate}}{{!!
}}{{#unlessPredicate "hasCppGetter"}}{{resolveName this "C++"}}{{/unlessPredicate}}{{!!
}}{{/getCppFieldValue}}
