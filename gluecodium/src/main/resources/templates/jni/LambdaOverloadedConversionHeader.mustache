{{!!
  !
  ! Copyright (C) 2016-2024 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
JNIEXPORT std::optional<{{resolveName "C++ FQN"}}> {{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _jobj, TypeId<std::optional<{{resolveName "C++ FQN"}}>>);
JNIEXPORT JniReference<jobject> {{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::optional<{{resolveName "C++ FQN"}}>& _ninput);

// Functions to create ArrayLists from C++ vectors and vice versa, for overloaded lambdas.

JNIEXPORT JniReference<jobject> {{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::vector<{{resolveName "C++ FQN"}}>& _ninput);
JNIEXPORT JniReference<jobject> {{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::optional<std::vector<{{resolveName "C++ FQN"}}>>& _ninput);
JNIEXPORT std::vector<{{resolveName "C++ FQN"}}> {{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _arrayList, TypeId<std::vector<{{resolveName "C++ FQN"}}>>);
JNIEXPORT std::optional<std::vector<{{resolveName "C++ FQN"}}>> {{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _arrayList, TypeId<std::optional<std::vector<{{resolveName "C++ FQN"}}>>>);

// Templated functions to create HashMaps from C++ unordered_maps and vice versa, for overloaded lambdas as values.

template <typename K, typename Hash>
JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* const env, const std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>& input)
{
    JavaHashMapAdder map_adder{env};

    for (const auto& pair : input)
    {
        map_adder.add(convert_to_jni(env, pair.first),
                      {{resolveName "mangled"}}_convert_to_jni(env, pair.second));
    }

    return map_adder.fetch_hash_map();
}

template <typename K, typename Hash>
JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>& _ninput)
{
    return _ninput ? {{resolveName "mangled"}}_convert_to_jni(_env, *_ninput) : JniReference<jobject>{};
}

template <typename K, typename Hash>
std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>
{{resolveName "mangled"}}_convert_from_jni(
    JNIEnv* const env, const JniReference<jobject>& java_map, TypeId<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>)
{
    std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash> result{};

    if (env->IsSameObject(java_map.get(), nullptr))
    {
        return result;
    }

    const JavaMapIterator map_iterator(env, java_map);

    while(map_iterator.has_next())
    {
        const auto& key_value = map_iterator.next();
        result.emplace(convert_from_jni(env, key_value.first, TypeId<K>{}),
                       {{resolveName "mangled"}}_convert_from_jni(env, key_value.second, TypeId<{{resolveName "C++ FQN"}}>{}));
    }

    return result;
}

template<typename K, typename Hash>
std::optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>
{{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env,
                 const JniReference<jobject>& _jMap,
                 TypeId<std::optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>>)
{
    return _jMap
        ? std::optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>(
            {{resolveName "mangled"}}_convert_from_jni(_env, _jMap, TypeId<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>{})
        ) : std::optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>{};
}
