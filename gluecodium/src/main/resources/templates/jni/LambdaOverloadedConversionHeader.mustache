{{!!
  !
  ! Copyright (C) 2016-2021 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
JNIEXPORT optional<{{resolveName "C++ FQN"}}> {{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _jobj, optional<{{resolveName "C++ FQN"}}>*);
JNIEXPORT JniReference<jobject> {{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const optional<{{resolveName "C++ FQN"}}>& _ninput);

// Functions to create ArrayLists from C++ vectors and vice versa, for overloaded lambdas.

JNIEXPORT JniReference<jobject> {{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::vector<{{resolveName "C++ FQN"}}>& _ninput);
JNIEXPORT JniReference<jobject> {{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const optional<std::vector<{{resolveName "C++ FQN"}}>>& _ninput);
JNIEXPORT std::vector<{{resolveName "C++ FQN"}}> {{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _arrayList, std::vector<{{resolveName "C++ FQN"}}>*);
JNIEXPORT optional<std::vector<{{resolveName "C++ FQN"}}>> {{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _arrayList, optional<std::vector<{{resolveName "C++ FQN"}}>>*);

// Templated functions to create HashMaps from C++ unordered_maps and vice versa, for overloaded lambdas as values.

template <typename K, typename Hash>
JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>& _ninput) {
    auto javaClass = find_class(_env, "java/util/HashMap");
    auto result = create_object(_env, javaClass);
    jmethodID putMethodId = _env->GetMethodID(javaClass.get(), "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

    for (const auto& pair : _ninput) {
        auto jKey = convert_to_jni(_env, pair.first);
        auto jValue = {{resolveName "mangled"}}_convert_to_jni(_env, pair.second);
        call_java_method<jobject>(_env, result, putMethodId, jKey, jValue);
    }

    return result;
}

template <typename K, typename Hash>
JniReference<jobject>
{{resolveName "mangled"}}_convert_to_jni(JNIEnv* _env, const optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>& _ninput) {
    return _ninput ? {{resolveName "mangled"}}_convert_to_jni(_env, *_ninput) : JniReference<jobject>{};
}

template <typename K, typename Hash>
std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>
{{resolveName "mangled"}}_convert_from_jni(
    JNIEnv* _env, const JniReference<jobject>& _jMap, std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>*
) {
    std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash> _nresult{};

    if (_env->IsSameObject(_jMap.get(), nullptr)) {
        return _nresult;
    }

    auto javaMapClass = find_class(_env, "java/util/Map");
    auto entrySetMethodId = _env->GetMethodID(javaMapClass.get(), "entrySet", "()Ljava/util/Set;");
    auto jEntrySet = call_java_method<jobject>(_env, _jMap, entrySetMethodId);

    auto javaSetClass = find_class(_env, "java/util/Set");
    auto iteratorMethodId = _env->GetMethodID(javaSetClass.get(), "iterator", "()Ljava/util/Iterator;");
    auto jIterator = call_java_method<jobject>(_env, jEntrySet, iteratorMethodId);

    auto javaIteratorClass = find_class(_env, "java/util/Iterator");
    auto hasNextMethodId = _env->GetMethodID(javaIteratorClass.get(), "hasNext", "()Z");
    auto nextMethodId = _env->GetMethodID(javaIteratorClass.get(), "next", "()Ljava/lang/Object;");

    auto javaMapEntryClass = find_class(_env, "java/util/Map$Entry");
    auto getKeyMethodId = _env->GetMethodID(javaMapEntryClass.get(), "getKey", "()Ljava/lang/Object;");
    auto getValueMethodId = _env->GetMethodID(javaMapEntryClass.get(), "getValue", "()Ljava/lang/Object;");

    while (call_java_method<jboolean>(_env, jIterator, hasNextMethodId)) {
        auto jEntry = call_java_method<jobject>(_env, jIterator, nextMethodId);
        auto jKey = call_java_method<jobject>(_env, jEntry, getKeyMethodId);
        K nKey = convert_from_jni(_env, jKey, (K*)nullptr);

        auto jValue = call_java_method<jobject>(_env, jEntry, getValueMethodId);
        auto nValue = {{resolveName "mangled"}}_convert_from_jni(_env, jValue, ({{resolveName "C++ FQN"}}*)nullptr);

        _nresult.emplace(std::move(nKey), std::move(nValue));
    }

    return _nresult;
}

template<typename K, typename Hash>
optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>
{{resolveName "mangled"}}_convert_from_jni(JNIEnv* _env,
                 const JniReference<jobject>& _jMap,
                 optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>*)
{
    return _jMap
        ? optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>(
            {{resolveName "mangled"}}_convert_from_jni(_env, _jMap, (std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>*)nullptr)
        ) : optional<std::unordered_map<K, {{resolveName "C++ FQN"}}, Hash>>{};
}
