{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "FieldAccessMethods.h"
#include "JniCallJavaMethod.h"
#include "JniClassCache.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{
{{#enum}}
{{#if external.java.converter}}
{{>jni/ExternalConversionClassCache}}
{{/if}}

{{resolveName "C++ FQN"}}
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput{{#if external.java.converter}}_ext{{/if}}, {{resolveName "C++ FQN"}}*)
{
{{#if external.java.converter}}
{{prefixPartial "jni/ExternalConversionFromJni" "    "}}
{{/if}}
{{#ifPredicate "needsOrdinalConversion"}}
    auto ordinal = call_java_method<jint>(_jenv, _jinput, "ordinal", "()I");
    switch(ordinal) {
{{#enumerators}}
        case {{iter.position}}:
            return {{resolveName enum "C++ FQN"}}::{{resolveName "C++"}};
{{/enumerators}}
        default:
            return {};
    }
{{/ifPredicate}}{{!!
}}{{#unlessPredicate "needsOrdinalConversion"}}
    return {{resolveName "C++ FQN"}}(
        {{>common/InternalNamespace}}jni::get_field_value(_jenv, _jinput, "value", (int32_t*)nullptr));
{{/unlessPredicate}}
}

std::optional<{{resolveName "C++ FQN"}}>
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, std::optional<{{resolveName "C++ FQN"}}>*)
{
    return _jinput
        ? std::optional<{{resolveName "C++ FQN"}}>(convert_from_jni(_jenv, _jinput, ({{resolveName "C++ FQN"}}*)nullptr))
        : std::optional<{{resolveName "C++ FQN"}}>{};
}

REGISTER_JNI_CLASS_CACHE("{{resolveName this "" "ref"}}", {{resolveName this "mangled" "ref"}}, {{resolveName "C++ FQN"}})

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{resolveName "C++ FQN"}} _ninput)
{
    auto& javaClass = CachedJavaClass<{{resolveName "C++ FQN"}}>::java_class;
    const char* enumeratorName = nullptr;
    switch(_ninput) {
{{#enumerators}}{{#unless isAlias}}
        case({{resolveName enum "C++ FQN"}}::{{resolveName "C++"}}):
            enumeratorName = "{{resolveName}}";
            break;
{{/unless}}{{/enumerators}}
    }
    jfieldID fieldID = _jenv->GetStaticFieldID(javaClass.get(), enumeratorName, "L{{resolveName this "" "ref"}};");
{{#unless external.java.converter}}
    return make_local_ref(_jenv, _jenv->GetStaticObjectField(javaClass.get(), fieldID));
{{/unless}}{{#if external.java.converter}}
    auto _jresult = make_local_ref(_jenv, _jenv->GetStaticObjectField(javaClass.get(), fieldID));
{{prefixPartial "jni/ExternalConversionToJni" "    "}}
    return _jresult;
{{/if}}
}

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const std::optional<{{resolveName "C++ FQN"}}> _ninput)
{
    return _ninput ? convert_to_jni(_jenv, *_ninput) : JniReference<jobject>{};
}

{{/enum}}
}
{{#internalNamespace}}
}
{{/internalNamespace}}
