{{!!
  !
  ! Copyright (C) 2016-2023 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#include "JniCallbackErrorChecking.h"

#include <string>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

void checkExceptionAndReportIfAny(JNIEnv *env) {

    if (! env->ExceptionCheck( ) )
    {
        return;
    }

    jthrowable exception = env->ExceptionOccurred();
    env->ExceptionClear( );

    std::string error_msg;

    jclass throwable_class = env->FindClass("java/lang/Throwable");
    jmethodID throwable_getStackTrace_mID = env->GetMethodID(throwable_class, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
    jmethodID throwable_toString_mID = env->GetMethodID(throwable_class, "toString", "()Ljava/lang/String;");

    jobjectArray frames = (jobjectArray) env->CallObjectMethod(exception, throwable_getStackTrace_mID);
    jsize frames_length = env->GetArrayLength(frames);

    if (0 == frames || 0 == frames_length) {
        env->FatalError("No stack frames available to get more information regarding crash.");
    }

    jstring msg_obj = (jstring) env->CallObjectMethod(exception, throwable_toString_mID);
    const char* actual_exception_message = env->GetStringUTFChars(msg_obj, 0);
    error_msg += actual_exception_message;
    env->ReleaseStringUTFChars(msg_obj, actual_exception_message);
    env->DeleteLocalRef(msg_obj);

    jclass frame_class = env->FindClass("java/lang/StackTraceElement");
    jmethodID frame_toString_mID = env->GetMethodID(frame_class, "toString", "()Ljava/lang/String;");

    jsize i = 0;
    for (i = 0; i < frames_length; i++)
    {
        jobject frame = env->GetObjectArrayElement(frames, i);
        jstring msg_obj = (jstring) env->CallObjectMethod(frame, frame_toString_mID);

        const char* function_call_stack_line = env->GetStringUTFChars(msg_obj, 0);

        // This is done so that all stack frame messages will be on same line with actual exception message.
        if (i == 0) {
            error_msg += " at ";
        } else {
            error_msg += " <- ";
        }
        error_msg += function_call_stack_line;

        env->ReleaseStringUTFChars(msg_obj, function_call_stack_line);
        env->DeleteLocalRef(msg_obj);
        env->DeleteLocalRef(frame);
    }

    error_msg = error_msg + "\nThis was due to an exception that was thrown in Java and it was not handled.\n";
    error_msg = error_msg + "See the log for more information about the exception (including Java stack trace).\n";

    env->FatalError( error_msg.c_str() );
}

}
{{#internalNamespace}}
}
{{/internalNamespace}}
