{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#pragma once

#include <jni.h>

#include "JniCppConversionUtils.h"
#include "JniReference.h"
#include "{{>common/InternalInclude}}Locale.h"
#include "{{>common/InternalInclude}}Optional.h"

#include <chrono>
#include <cstdint>
#include <memory>
#include <vector>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

// -------------------- JNI object field getters --------------------------------------------------

JNIEXPORT bool get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, bool* );
JNIEXPORT int8_t get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int8_t* );
JNIEXPORT int16_t get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int16_t* );
JNIEXPORT int32_t get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int32_t* );
JNIEXPORT int64_t get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int64_t* );
JNIEXPORT uint8_t get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, uint8_t* );
JNIEXPORT uint16_t get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, uint16_t* );
JNIEXPORT uint32_t get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, uint32_t* );
JNIEXPORT uint64_t get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, uint64_t* );
JNIEXPORT float get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, float* );
JNIEXPORT double get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, double* );
JNIEXPORT ::std::string get_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, ::std::string* );

JNIEXPORT {{>common/InternalNamespace}}optional< bool > get_field_value( JNIEnv* env,
                                           const JniReference< jobject >& object,
                                           const char* fieldName,
                                           {{>common/InternalNamespace}}optional< bool >* );
JNIEXPORT {{>common/InternalNamespace}}optional< int8_t > get_field_value( JNIEnv* env,
                                             const JniReference< jobject >& object,
                                             const char* fieldName,
                                             {{>common/InternalNamespace}}optional< int8_t >* );
JNIEXPORT {{>common/InternalNamespace}}optional< int16_t > get_field_value( JNIEnv* env,
                                              const JniReference< jobject >& object,
                                              const char* fieldName,
                                              {{>common/InternalNamespace}}optional< int16_t >* );
JNIEXPORT {{>common/InternalNamespace}}optional< int32_t > get_field_value( JNIEnv* env,
                                              const JniReference< jobject >& object,
                                              const char* fieldName,
                                              {{>common/InternalNamespace}}optional< int32_t >* );
JNIEXPORT {{>common/InternalNamespace}}optional< int64_t > get_field_value( JNIEnv* env,
                                              const JniReference< jobject >& object,
                                              const char* fieldName,
                                              {{>common/InternalNamespace}}optional< int64_t >* );
JNIEXPORT {{>common/InternalNamespace}}optional< uint8_t > get_field_value( JNIEnv* env,
                                              const JniReference< jobject >& object,
                                              const char* fieldName,
                                              {{>common/InternalNamespace}}optional< uint8_t >* );
JNIEXPORT {{>common/InternalNamespace}}optional< uint16_t > get_field_value( JNIEnv* env,
                                               const JniReference< jobject >& object,
                                               const char* fieldName,
                                               {{>common/InternalNamespace}}optional< uint16_t >* );
JNIEXPORT {{>common/InternalNamespace}}optional< uint32_t > get_field_value( JNIEnv* env,
                                               const JniReference< jobject >& object,
                                               const char* fieldName,
                                               {{>common/InternalNamespace}}optional< uint32_t >* );
JNIEXPORT {{>common/InternalNamespace}}optional< uint64_t > get_field_value( JNIEnv* env,
                                               const JniReference< jobject >& object,
                                               const char* fieldName,
                                               {{>common/InternalNamespace}}optional< uint64_t >* );
JNIEXPORT {{>common/InternalNamespace}}optional< float > get_field_value( JNIEnv* env,
                                            const JniReference< jobject >& object,
                                            const char* fieldName,
                                            {{>common/InternalNamespace}}optional< float >* );
JNIEXPORT {{>common/InternalNamespace}}optional< double > get_field_value( JNIEnv* env,
                                             const JniReference< jobject >& object,
                                             const char* fieldName,
                                             {{>common/InternalNamespace}}optional< double >* );
JNIEXPORT {{>common/InternalNamespace}}optional< ::std::string > get_field_value( JNIEnv* env,
                                                    const JniReference< jobject >& object,
                                                    const char* fieldName,
                                                    {{>common/InternalNamespace}}optional< ::std::string >* );

JNIEXPORT ::std::shared_ptr< ::std::vector< uint8_t > > get_field_value(
    JNIEnv* env,
    const JniReference< jobject >& object,
    const char* fieldName,
    ::std::shared_ptr< ::std::vector< uint8_t > >* );
JNIEXPORT {{>common/InternalNamespace}}optional< ::std::shared_ptr< ::std::vector< uint8_t > > > get_field_value(
    JNIEnv* env,
    const JniReference< jobject >& object,
    const char* fieldName,
    {{>common/InternalNamespace}}optional< ::std::shared_ptr< ::std::vector< uint8_t > > >* );

JNIEXPORT ::std::chrono::system_clock::time_point get_field_value(
    JNIEnv* env,
    const JniReference< jobject >& object,
    const char* fieldName,
    ::std::chrono::system_clock::time_point* );
JNIEXPORT {{>common/InternalNamespace}}optional< ::std::chrono::system_clock::time_point > get_field_value(
    JNIEnv* env,
    const JniReference< jobject >& object,
    const char* fieldName,
    {{>common/InternalNamespace}}optional< ::std::chrono::system_clock::time_point >* );

JNIEXPORT {{>common/InternalNamespace}}Locale get_field_value(
    JNIEnv* env,
    const JniReference< jobject >& object,
    const char* fieldName,
    {{>common/InternalNamespace}}Locale* );
JNIEXPORT {{>common/InternalNamespace}}optional< {{>common/InternalNamespace}}Locale > get_field_value(
    JNIEnv* env,
    const JniReference< jobject >& object,
    const char* fieldName,
    {{>common/InternalNamespace}}optional< {{>common/InternalNamespace}}Locale >* );

JNIEXPORT JniReference< jobject > get_object_field_value( JNIEnv* env,
                                       const JniReference<jobject>& object,
                                       const char* fieldName,
                                       const char* fieldSignature );

// -------------------- JNI object field setters --------------------------------------------------

JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, bool value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int8_t value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int16_t value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int32_t value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int64_t value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, uint8_t value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, uint16_t value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, uint32_t value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, uint64_t value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, float value );
JNIEXPORT void set_field_value(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, double value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference<jobject>& object,
                      const char* fieldName,
                      const std::string& fieldValue );

JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< bool > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< int8_t > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< int16_t > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< int32_t > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< int64_t > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< uint8_t > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< uint16_t > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< uint32_t > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< uint64_t > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< float > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< double > value );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference< jobject >& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< ::std::string > value );

JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference<jobject>& object,
                      const char* fieldName,
                      const std::shared_ptr< ::std::vector< uint8_t > >& fieldValue );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference<jobject>& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< std::shared_ptr< ::std::vector< uint8_t > > > fieldValue );

JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference<jobject>& object,
                      const char* fieldName,
                      const ::std::chrono::system_clock::time_point& fieldValue );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference<jobject>& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< ::std::chrono::system_clock::time_point > fieldValue );

JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference<jobject>& object,
                      const char* fieldName,
                      const {{>common/InternalNamespace}}Locale& fieldValue );
JNIEXPORT void set_field_value( JNIEnv* env,
                      const JniReference<jobject>& object,
                      const char* fieldName,
                      {{>common/InternalNamespace}}optional< {{>common/InternalNamespace}}Locale > fieldValue );

JNIEXPORT void set_object_field_value( JNIEnv* env,
                             const JniReference<jobject>& object,
                             const char* fieldName,
                             const char* fieldSignature,
                             const JniReference<jobject>& fieldValue );

}
{{#internalNamespace}}
}
{{/internalNamespace}}
