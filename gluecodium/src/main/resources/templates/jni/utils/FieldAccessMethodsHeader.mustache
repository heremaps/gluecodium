{{!!
  !
  ! Copyright (C) 2016-2024 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#pragma once

#include <jni.h>

#include "JniCppConversionUtils.h"
#include "JniReference.h"
#include "JniTypeId.h"
#include "{{>common/InternalInclude}}Locale.h"

#include <chrono>
#include <cstdint>
#include <memory>
#include <optional>
#include <vector>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

// -------------------- JNI object field getters --------------------------------------------------

JNIEXPORT JniReference< jobject > get_object_field_value(
        JNIEnv* const env,
        const JniReference<jobject>& object,
        const char* field_name,
        const char* field_signature ) noexcept;

template <typename Result>
Result get_converted_object_field_value(
                            JNIEnv* const env,
                            const JniReference<jobject>& object,
                            const char* field_name,
                            const char* field_type) noexcept (noexcept(convert_from_jni(env, object, TypeId<Result>{})))
{
    return convert_from_jni(env, get_object_field_value(env, object, field_name, field_type), TypeId<Result>{});
}

JNIEXPORT bool get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<bool> ) noexcept;
JNIEXPORT int8_t get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<int8_t> ) noexcept;
JNIEXPORT int16_t get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<int16_t> ) noexcept;
JNIEXPORT int32_t get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<int32_t> ) noexcept;
JNIEXPORT int64_t get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<int64_t> ) noexcept;
JNIEXPORT uint8_t get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<uint8_t> ) noexcept;
JNIEXPORT uint16_t get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<uint16_t> ) noexcept;
JNIEXPORT uint32_t get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<uint32_t> ) noexcept;
JNIEXPORT uint64_t get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<uint64_t> ) noexcept;
JNIEXPORT float get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<float> ) noexcept;
JNIEXPORT double get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<double> ) noexcept;
JNIEXPORT ::std::string get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<::std::string> );

JNIEXPORT std::optional< bool > get_field_value( JNIEnv* const env,
                                           const JniReference< jobject >& object,
                                           const char* field_name,
                                           TypeId<std::optional< bool >> ) noexcept;
JNIEXPORT std::optional< int8_t > get_field_value( JNIEnv* const env,
                                             const JniReference< jobject >& object,
                                             const char* field_name,
                                             TypeId<std::optional< int8_t >> ) noexcept;
JNIEXPORT std::optional< int16_t > get_field_value( JNIEnv* const env,
                                              const JniReference< jobject >& object,
                                              const char* field_name,
                                              TypeId<std::optional< int16_t >> ) noexcept;
JNIEXPORT std::optional< int32_t > get_field_value( JNIEnv* const env,
                                              const JniReference< jobject >& object,
                                              const char* field_name,
                                              TypeId<std::optional< int32_t >> ) noexcept;
JNIEXPORT std::optional< int64_t > get_field_value( JNIEnv* const env,
                                              const JniReference< jobject >& object,
                                              const char* field_name,
                                              TypeId<std::optional< int64_t >> ) noexcept;
JNIEXPORT std::optional< uint8_t > get_field_value( JNIEnv* const env,
                                              const JniReference< jobject >& object,
                                              const char* field_name,
                                              TypeId<std::optional< uint8_t >> ) noexcept;
JNIEXPORT std::optional< uint16_t > get_field_value( JNIEnv* const env,
                                               const JniReference< jobject >& object,
                                               const char* field_name,
                                               TypeId<std::optional< uint16_t >> ) noexcept;
JNIEXPORT std::optional< uint32_t > get_field_value( JNIEnv* const env,
                                               const JniReference< jobject >& object,
                                               const char* field_name,
                                               TypeId<std::optional< uint32_t >> ) noexcept;
JNIEXPORT std::optional< uint64_t > get_field_value( JNIEnv* const env,
                                               const JniReference< jobject >& object,
                                               const char* field_name,
                                               TypeId<std::optional< uint64_t >> ) noexcept;
JNIEXPORT std::optional< float > get_field_value( JNIEnv* const env,
                                            const JniReference< jobject >& object,
                                            const char* field_name,
                                            TypeId<std::optional< float >> ) noexcept;
JNIEXPORT std::optional< double > get_field_value( JNIEnv* const env,
                                             const JniReference< jobject >& object,
                                             const char* field_name,
                                             TypeId<std::optional< double >> ) noexcept;
JNIEXPORT std::optional< ::std::string > get_field_value( JNIEnv* const env,
                                                    const JniReference< jobject >& object,
                                                    const char* field_name,
                                                    TypeId<std::optional< ::std::string >> );

JNIEXPORT ::std::shared_ptr<::std::vector<uint8_t>> get_field_value(
    JNIEnv* const env,
    const JniReference< jobject >& object,
    const char* field_name,
    TypeId<::std::shared_ptr<::std::vector<uint8_t>>> );
JNIEXPORT std::optional<::std::shared_ptr<::std::vector<uint8_t>>> get_field_value(
    JNIEnv* const env,
    const JniReference< jobject >& object,
    const char* field_name,
    TypeId<std::optional<::std::shared_ptr<::std::vector<uint8_t>>>> );

template<class Clock, class Duration>
std::chrono::time_point<Clock, Duration>
get_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, TypeId<std::chrono::time_point<Clock, Duration>>)
{
    return get_converted_object_field_value<std::chrono::time_point<Clock, Duration>>(
        env, object, field_name, "Ljava/util/Date;");
}

template<class Clock, class Duration>
std::optional<std::chrono::time_point<Clock, Duration>>
get_field_value(
    JNIEnv* const env, const JniReference<jobject >& object, const char* field_name,
    TypeId<std::optional<std::chrono::time_point<Clock, Duration>>>)
{    
    return get_converted_object_field_value<std::optional<std::chrono::time_point<Clock, Duration>>>(
        env, object, field_name, "Ljava/util/Date;");
}

JNIEXPORT {{>common/InternalNamespace}}Locale get_field_value(
    JNIEnv* const env,
    const JniReference< jobject >& object,
    const char* field_name,
    TypeId<{{>common/InternalNamespace}}Locale> ) noexcept;
JNIEXPORT std::optional< {{>common/InternalNamespace}}Locale > get_field_value(
    JNIEnv* const env,
    const JniReference< jobject >& object,
    const char* field_name,
    TypeId<std::optional< {{>common/InternalNamespace}}Locale >> ) noexcept;

// -------------------- JNI object field setters --------------------------------------------------

JNIEXPORT void set_object_field_value(
                            JNIEnv* const env,
                            const JniReference<jobject>& object,
                            const char* field_name,
                            const char* fieldSignature,
                            const JniReference<jobject>& fieldValue ) noexcept;

template <typename CppType>
void set_converted_object_field_value(
                            JNIEnv* const env,
                            const JniReference<jobject>& object,
                            const char* field_name,
                            const char* field_type,
                            const CppType& value) noexcept (noexcept(convert_to_jni(env, value)))
{
    set_object_field_value(env, object, field_name, field_type, convert_to_jni(env, value));
}

JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, bool value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, int8_t value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, int16_t value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, int32_t value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, int64_t value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, uint8_t value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, uint16_t value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, uint32_t value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, uint64_t value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, float value ) noexcept;
JNIEXPORT void set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name, double value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference<jobject>& object,
                      const char* field_name,
                      const std::string& fieldValue ) noexcept;

JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< bool > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< int8_t > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< int16_t > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< int32_t > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< int64_t > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< uint8_t > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< uint16_t > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< uint32_t > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< uint64_t > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< float > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< double > value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference< jobject >& object,
                      const char* field_name,
                      std::optional< ::std::string > value ) noexcept;

JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference<jobject>& object,
                      const char* field_name,
                      const std::shared_ptr<::std::vector<uint8_t>>& field_value ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference<jobject>& object,
                      const char* field_name,
                      std::optional<std::shared_ptr<::std::vector<uint8_t>>> field_value ) noexcept;

template<class Clock, class Duration>
void
set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name,
    const std::chrono::time_point<Clock, Duration>& field_value) noexcept
{
    set_converted_object_field_value(env, object, field_name, "Ljava/util/Date;", field_value);
}

template<class Clock, class Duration>
void
set_field_value(
    JNIEnv* const env, const JniReference<jobject>& object, const char* field_name,
    const std::optional<std::chrono::time_point<Clock, Duration>>& field_value) noexcept
{
    set_converted_object_field_value(env, object, field_name, "Ljava/util/Date;", field_value);
}

JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference<jobject>& object,
                      const char* field_name,
                      const {{>common/InternalNamespace}}Locale& fieldValue ) noexcept;
JNIEXPORT void set_field_value( JNIEnv* const env,
                      const JniReference<jobject>& object,
                      const char* field_name,
                      std::optional< {{>common/InternalNamespace}}Locale > fieldValue ) noexcept;

// -------------------- Templated JNI field accessors for Duration types --------------------------

template<class Rep, class Period>
JNIEXPORT ::std::chrono::duration<Rep, Period> get_field_value(
    JNIEnv* const env,
    const JniReference<jobject>& object,
    const char* field_name,
    TypeId<::std::chrono::duration<Rep, Period>> ) noexcept
{    
    return get_converted_object_field_value<::std::chrono::duration<Rep, Period>>(
        env, object, field_name, "L{{durationPackage}}/Duration;");
}

template<class Rep, class Period>
JNIEXPORT std::optional<::std::chrono::duration<Rep, Period>> get_field_value(
    JNIEnv* const env,
    const JniReference<jobject>& object,
    const char* field_name,
    TypeId<std::optional<::std::chrono::duration<Rep, Period>>> ) noexcept
{
    return get_converted_object_field_value<std::optional<::std::chrono::duration<Rep, Period>>>(
        env, object, field_name, "L{{durationPackage}}/Duration;");
}

template<class Rep, class Period>
JNIEXPORT void set_field_value(
    JNIEnv* const env,
    const JniReference<jobject>& object,
    const char* field_name,
    const ::std::chrono::duration<Rep, Period>& field_value ) noexcept
{
    set_converted_object_field_value(env, object, field_name, "L{{durationPackage}}/Duration;", field_value);
}

template<class Rep, class Period>
JNIEXPORT void set_field_value(
    JNIEnv* const env,
    const JniReference<jobject>& object,
    const char* field_name,
    std::optional<::std::chrono::duration<Rep, Period>> field_value ) noexcept
{
    set_converted_object_field_value(env, object, field_name, "L{{durationPackage}}/Duration;", field_value);
}

}
{{#internalNamespace}}
}
{{/internalNamespace}}
