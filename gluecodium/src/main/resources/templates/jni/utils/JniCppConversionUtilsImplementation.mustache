{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#include "JniCppConversionUtils.h"
#include <optional>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

// ------------------- JNI to C++ conversion functions ---------------------------------------------

std::string
convert_string_from_jni( JNIEnv* const env, jstring java_string )
{
    const char* jbuffer = env->GetStringUTFChars( java_string, nullptr );
    auto nresult = std::string( jbuffer );
    env->ReleaseStringUTFChars( java_string, jbuffer );
    return nresult;
}

std::string
convert_from_jni( JNIEnv* const env, const JniReference<jobject>& jvalue, TypeId<std::string> )
{
    if ( !jvalue )
    {
        {{>common/InternalNamespace}}jni::throw_new_null_pointer_exception(env);
        return {};
    }

    return convert_string_from_jni( env, static_cast<jstring>( jvalue.get( ) ) );
}

std::string
convert_from_jni( JNIEnv* const env, const JniReference<jstring>& jvalue, TypeId<std::string> )
{
    if ( !jvalue )
    {
        {{>common/InternalNamespace}}jni::throw_new_null_pointer_exception(env);
        return {};
    }

    return convert_string_from_jni( env, jvalue.get( ) );
}

std::optional<std::string>
convert_from_jni( JNIEnv* const env, const JniReference<jobject>& jvalue, TypeId<std::optional<std::string>> )
{
    return jvalue
        ? std::optional<std::string>( convert_string_from_jni( env, static_cast<jstring>( jvalue.get( ) ) ) )
        : std::optional<std::string>{};
}

std::optional<std::string>
convert_from_jni( JNIEnv* const env, const JniReference<jstring>& jvalue, TypeId<std::optional<std::string>> )
{
    return jvalue
        ? std::optional<std::string>( convert_string_from_jni( env, jvalue.get( ) ) )
        : std::optional<std::string>{};
}

std::shared_ptr< std::vector< uint8_t > >
convert_from_jni( JNIEnv* const env, const JniReference<jbyteArray>& jvalue,
                  TypeId<std::shared_ptr<std::vector<uint8_t>>> )
{
    if ( !jvalue )
    {
        {{>common/InternalNamespace}}jni::throw_new_null_pointer_exception(env);
        return {};
    }

    size_t size = static_cast< size_t >(env->GetArrayLength(jvalue.get()));
    auto nresult = std::make_shared<std::vector<uint8_t>>(size);
    jbyte* jbuffer = reinterpret_cast<jbyte*>(nresult->data());
    env->GetByteArrayRegion(jvalue.get(), 0, size, jbuffer);
    return nresult;
}

std::optional< std::shared_ptr< std::vector< uint8_t > > >
convert_from_jni( JNIEnv* const env,
                  const JniReference<jbyteArray>& jvalue,
                  TypeId<std::optional<std::shared_ptr<std::vector<uint8_t>>>> )
{
    return jvalue
        ? std::optional< std::shared_ptr< std::vector< uint8_t > > >(
            convert_from_jni( env, jvalue, TypeId<std::shared_ptr<std::vector<uint8_t>>>{} ) )
        : std::optional< std::shared_ptr< std::vector< uint8_t > > >{};
}

jlong get_time_ms_epoch(JNIEnv* const env, const JniReference<jobject>& jvalue) noexcept
{
    const auto java_date_class = find_class(env, "java/util/Date");
    const auto get_time_method_id = env->GetMethodID(java_date_class.get(), "getTime", "()J");
    return call_java_method<jlong>(env, jvalue, get_time_method_id);
}

{{>common/InternalNamespace}}Locale
convert_from_jni(JNIEnv* const env, const JniReference<jobject>& jvalue, TypeId<{{>common/InternalNamespace}}Locale>)
{
    if (!jvalue) {
        {{>common/InternalNamespace}}jni::throw_new_null_pointer_exception(env);
        return {{>common/InternalNamespace}}Locale();
    }

    auto languageCode = call_java_method<jstring>(env, jvalue, "getLanguage", "()Ljava/lang/String;");
    auto countryCode = call_java_method<jstring>(env, jvalue, "getCountry", "()Ljava/lang/String;");
    auto scriptCode = call_java_method<jstring>(env, jvalue, "getScript", "()Ljava/lang/String;");
    auto languageTag = call_java_method<jstring>(env, jvalue, "toLanguageTag", "()Ljava/lang/String;");

    return {{>common/InternalNamespace}}Locale(
        convert_from_jni(env, languageCode, TypeId<std::string>{}),
        convert_from_jni(env, countryCode, TypeId<std::string>{}),
        convert_from_jni(env, scriptCode, TypeId<std::string>{}),
        convert_from_jni(env, languageTag, TypeId<std::string>{})
    );
}

std::optional<{{>common/InternalNamespace}}Locale>
convert_from_jni(JNIEnv* const env, const JniReference<jobject>& jvalue, TypeId<std::optional<{{>common/InternalNamespace}}Locale>>)
{
    return jvalue
        ? std::optional<{{>common/InternalNamespace}}Locale>(
            convert_from_jni(env, jvalue, TypeId<{{>common/InternalNamespace}}Locale>{}))
        : std::optional<{{>common/InternalNamespace}}Locale>{};
}

// -------------------- C++ to JNI conversion functions --------------------------------------------

JniReference<jstring>
convert_to_jni( JNIEnv* const env, const std::string& nvalue ) noexcept
{
    return make_local_ref(env, env->NewStringUTF( nvalue.c_str( ) ));
}

JniReference<jstring>
convert_to_jni( JNIEnv* const env, const std::optional<std::string>& nvalue ) noexcept
{
    return nvalue
        ? make_local_ref(env, env->NewStringUTF( nvalue->c_str( ) ))
        : JniReference<jstring>{};
}

JniReference<jbyteArray>
convert_to_jni(JNIEnv* const env, const std::shared_ptr<std::vector<uint8_t> >& nvalue) noexcept
{
    if (!nvalue)
    {
        return make_local_ref(env, env->NewByteArray(0));
    }

    const jsize size = static_cast< jsize >(nvalue->size());
    auto jresult = make_local_ref(env, env->NewByteArray( size ));
    const jbyte* const jbuffer = reinterpret_cast< const jbyte* >( nvalue->data( ) );
    env->SetByteArrayRegion(jresult.get(), 0, size, jbuffer);

    return jresult;
}

JniReference<jbyteArray>
convert_to_jni(JNIEnv* const env, const std::optional< std::shared_ptr<std::vector<uint8_t>> >& nvalue) noexcept
{
    return nvalue ? convert_to_jni( env, *nvalue ) : JniReference< jbyteArray >{};
}

JniReference<jobject> create_date_new_object(JNIEnv* const env, const std::chrono::milliseconds& time_epoch)
{
    const auto java_date_class = find_class(env, "java/util/Date");
    const jlong time_ms_epoch = time_epoch.count();

    const auto constructor_method_id = env->GetMethodID(java_date_class.get(), "<init>", "(J)V");
    return new_object(env, java_date_class, constructor_method_id, time_ms_epoch);
}

std::intmax_t get_duration_from_java_duration(JNIEnv* const env,
                                              const JniReference<jobject>& jvalue,
                                              const std::intmax_t dest_den,
                                              const std::intmax_t dest_num)
{
    const auto& java_duration_class = get_cached_duration_class();
    const auto get_seconds_method_id = env->GetMethodID(java_duration_class.get(), "getSeconds", "()J");
    const jlong seconds_value = call_java_method<jlong>(env, jvalue, get_seconds_method_id);
    const auto get_nano_method_id = env->GetMethodID(java_duration_class.get(), "getNano", "()I");
    const jint nano_value = call_java_method<jint>(env, jvalue, get_nano_method_id);

    using namespace std::chrono;

    const auto seconds_division = std::lldiv(seconds_value * dest_den, dest_num);
    const auto combined_nano_value =
        duration_cast<nanoseconds>(seconds(seconds_division.rem)).count() + nano_value;
    const auto num = dest_den * nanoseconds::period::num;
    const auto den = dest_num * nanoseconds::period::den;
    const auto nano_division = std::lldiv(combined_nano_value * num, den);
    auto result_value = seconds_division.quot + nano_division.quot;

    // Rounding
    if (2 * nano_division.rem >= den)
    {
        result_value += 1;
    }

    return result_value;
}

JniReference<jobject>
create_duration_new_object(JNIEnv* const env, std::intmax_t seconds, std::intmax_t nanos) noexcept
{
    const auto& java_duration_class = get_cached_duration_class();
    const auto factory_method_id = env->GetStaticMethodID(java_duration_class.get(), "ofSeconds", "(JJ)L{{durationPackage}}/Duration;");
    return make_local_ref(env, env->CallStaticObjectMethod(java_duration_class.get(), factory_method_id, seconds, nanos));
}

JniReference<jobject>
convert_to_jni(JNIEnv* const env, const {{>common/InternalNamespace}}Locale& nvalue) noexcept {
    auto localeBuilderClass = find_class(env, "java/util/Locale$Builder");
    auto builder = create_object(env, localeBuilderClass);
    if (nvalue.language_tag) {
        // BCP 47 language tag takes precedence if present.
        call_java_method<jobject>(
            env, builder, "setLanguageTag", "(Ljava/lang/String;)Ljava/util/Locale$Builder;",
            convert_to_jni(env, nvalue.language_tag)
        );
        if (env->ExceptionOccurred()) return {};
    } else {
        // java.util.Locale has no constructor that takes "script" code,
        // so Locale.Builder has to be used instead to create a Locale from ISO codes.
        call_java_method<jobject>(
            env, builder, "setLanguage", "(Ljava/lang/String;)Ljava/util/Locale$Builder;",
            convert_to_jni(env, nvalue.language_code)
        );
        if (env->ExceptionOccurred()) return {};

        call_java_method<jobject>(
            env, builder, "setRegion", "(Ljava/lang/String;)Ljava/util/Locale$Builder;",
            convert_to_jni(env, nvalue.country_code)
        );
        if (env->ExceptionOccurred()) return {};

        call_java_method<jobject>(
            env, builder, "setScript", "(Ljava/lang/String;)Ljava/util/Locale$Builder;",
            convert_to_jni(env, nvalue.script_code)
        );
        if (env->ExceptionOccurred()) return {};
    }
    return call_java_method<jobject>(env, builder, "build", "()Ljava/util/Locale;");
}

JniReference<jobject>
convert_to_jni(JNIEnv* const env, const std::optional<{{>common/InternalNamespace}}Locale>& nvalue) noexcept {
    return nvalue ? convert_to_jni(env, *nvalue) : JniReference<jobject>{};
}

}
{{#internalNamespace}}
}
{{/internalNamespace}}
