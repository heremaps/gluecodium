{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#include "JniCppConversionUtils.h"
#include "{{>common/InternalInclude}}Optional.h"
#include "JniCallJavaMethod.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

// ------------------- JNI to C++ conversion functions ---------------------------------------------

std::string
convert_string_from_jni( JNIEnv* env, jstring java_string )
{
    const char* jbuffer = env->GetStringUTFChars( java_string, nullptr );
    auto nresult = std::string( jbuffer );
    env->ReleaseStringUTFChars( java_string, jbuffer );
    return nresult;
}

std::string
convert_from_jni( JNIEnv* env, const JniReference<jobject>& jvalue, std::string* )
{
    if ( !jvalue )
    {
        auto exceptionClass = {{>common/InternalNamespace}}jni::find_class(env, "java/lang/NullPointerException");
        env->ThrowNew(exceptionClass.get(), "");
        return {};
    }

    return convert_string_from_jni( env, static_cast<jstring>( jvalue.get( ) ) );
}

std::string
convert_from_jni( JNIEnv* env, const JniReference<jstring>& jvalue, std::string* )
{
    if ( !jvalue )
    {
        auto exceptionClass = {{>common/InternalNamespace}}jni::find_class(env, "java/lang/NullPointerException");
        env->ThrowNew(exceptionClass.get(), "");
        return {};
    }

    return convert_string_from_jni( env, jvalue.get( ) );
}

{{>common/InternalNamespace}}optional<std::string>
convert_from_jni( JNIEnv* env, const JniReference<jobject>& jvalue, {{>common/InternalNamespace}}optional<std::string>* )
{
    return jvalue
        ? {{>common/InternalNamespace}}optional<std::string>( convert_string_from_jni( env, static_cast<jstring>( jvalue.get( ) ) ) )
        : {{>common/InternalNamespace}}optional<std::string>{};
}

{{>common/InternalNamespace}}optional<std::string>
convert_from_jni( JNIEnv* env, const JniReference<jstring>& jvalue, {{>common/InternalNamespace}}optional<std::string>* )
{
    return jvalue
        ? {{>common/InternalNamespace}}optional<std::string>( convert_string_from_jni( env, jvalue.get( ) ) )
        : {{>common/InternalNamespace}}optional<std::string>{};
}

std::shared_ptr< std::vector< uint8_t > >
convert_from_jni( JNIEnv* env, const JniReference<jbyteArray>& jvalue,
                  std::shared_ptr< std::vector< uint8_t > >* )
{
    if ( !jvalue )
    {
        auto exceptionClass = {{>common/InternalNamespace}}jni::find_class(env, "java/lang/NullPointerException");
        env->ThrowNew(exceptionClass.get(), "");
        return {};
    }

    size_t size = static_cast< size_t >( env->GetArrayLength( jvalue.get() ) );
    auto nresult = std::make_shared< std::vector< uint8_t > >( size );
    jbyte* jbuffer = reinterpret_cast< jbyte* >( nresult->data( ) );
    env->GetByteArrayRegion( jvalue.get(), 0, size, jbuffer );
    return nresult;
}

{{>common/InternalNamespace}}optional< std::shared_ptr< std::vector< uint8_t > > >
convert_from_jni( JNIEnv* env,
                  const JniReference<jbyteArray>& jvalue,
                  {{>common/InternalNamespace}}optional< std::shared_ptr< std::vector< uint8_t > > >* )
{
    return jvalue
        ? {{>common/InternalNamespace}}optional< std::shared_ptr< std::vector< uint8_t > > >(
            convert_from_jni( env, jvalue, (std::shared_ptr< std::vector< uint8_t > >*)nullptr ) )
        : {{>common/InternalNamespace}}optional< std::shared_ptr< std::vector< uint8_t > > >{};
}

std::chrono::system_clock::time_point
convert_from_jni( JNIEnv* env, const JniReference<jobject>& jvalue, std::chrono::system_clock::time_point* )
{
    if ( !jvalue )
    {
        auto exceptionClass = {{>common/InternalNamespace}}jni::find_class(env, "java/lang/NullPointerException");
        env->ThrowNew(exceptionClass.get(), "");
        return {};
    }

    auto javaDateClass = find_class( env, "java/util/Date" );
    auto getTimeMethodId = env->GetMethodID( javaDateClass.get(), "getTime", "()J" );
    jlong time_ms_epoch = call_java_method<jlong>( env, jvalue, getTimeMethodId );

    using namespace std::chrono;
    return system_clock::time_point(
        duration_cast< system_clock::duration >( milliseconds( time_ms_epoch ) ) );
}

{{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point >
convert_from_jni( JNIEnv* env, const JniReference<jobject>& jvalue,
                  {{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point >* )
{
    return jvalue
        ? {{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point >(
            convert_from_jni( env, jvalue, (std::chrono::system_clock::time_point*)nullptr ) )
        : {{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point >{};
}

{{>common/InternalNamespace}}Locale
convert_from_jni(JNIEnv* env, const JniReference<jobject>& jvalue, {{>common/InternalNamespace}}Locale*) {
    if (!jvalue) {
        auto exceptionClass = {{>common/InternalNamespace}}jni::find_class(env, "java/lang/NullPointerException");
        env->ThrowNew(exceptionClass.get(), "");
        return {{>common/InternalNamespace}}Locale();
    }

    auto languageCode = call_java_method<jstring>(env, jvalue, "getLanguage", "()Ljava/lang/String;");
    auto countryCode = call_java_method<jstring>(env, jvalue, "getCountry", "()Ljava/lang/String;");
    auto scriptCode = call_java_method<jstring>(env, jvalue, "getScript", "()Ljava/lang/String;");
    auto languageTag = call_java_method<jstring>(env, jvalue, "toLanguageTag", "()Ljava/lang/String;");

    return {{>common/InternalNamespace}}Locale(
        convert_from_jni(env, languageCode, (std::string*)nullptr),
        convert_from_jni(env, countryCode, (std::string*)nullptr),
        convert_from_jni(env, scriptCode, (std::string*)nullptr),
        convert_from_jni(env, languageTag, (std::string*)nullptr)
    );
}

{{>common/InternalNamespace}}optional<{{>common/InternalNamespace}}Locale>
convert_from_jni(JNIEnv* env, const JniReference<jobject>& jvalue,
                 {{>common/InternalNamespace}}optional<{{>common/InternalNamespace}}Locale>*)
{
    return jvalue
        ? {{>common/InternalNamespace}}optional<{{>common/InternalNamespace}}Locale>(
            convert_from_jni(env, jvalue, ({{>common/InternalNamespace}}Locale*)nullptr))
        : {{>common/InternalNamespace}}optional<{{>common/InternalNamespace}}Locale>{};
}

// -------------------- C++ to JNI conversion functions --------------------------------------------

JniReference<jstring>
convert_to_jni( JNIEnv* env, const std::string& nvalue )
{
    return make_local_ref(env, env->NewStringUTF( nvalue.c_str( ) ));
}

JniReference<jstring>
convert_to_jni( JNIEnv* env, const {{>common/InternalNamespace}}optional<std::string>& nvalue )
{
    return nvalue
        ? make_local_ref(env, env->NewStringUTF( nvalue->c_str( ) ))
        : JniReference<jstring>{};
}

JniReference<jbyteArray>
convert_to_jni( JNIEnv* env, const std::shared_ptr< std::vector< uint8_t > >& nvalue )
{
    if ( !nvalue )
    {
        return {};
    }

    jsize size = static_cast< jsize >( nvalue->size( ) );
    auto jresult = make_local_ref(env, env->NewByteArray( size ));
    const jbyte* jbuffer = reinterpret_cast< const jbyte* >( nvalue->data( ) );
    env->SetByteArrayRegion( jresult.get(), 0, size, jbuffer );

    return jresult;
}

JniReference< jbyteArray >
convert_to_jni( JNIEnv* env, const {{>common/InternalNamespace}}optional< std::shared_ptr< std::vector< uint8_t > > >& nvalue )
{
    return nvalue ? convert_to_jni( env, *nvalue ) : JniReference< jbyteArray >{};
}

JniReference<jobject>
convert_to_jni( JNIEnv* env, const std::chrono::system_clock::time_point& nvalue )
{
    auto javaDateClass = find_class( env, "java/util/Date" );
    jlong time_ms_epoch =
        std::chrono::duration_cast< std::chrono::milliseconds >( nvalue.time_since_epoch( ) ).count( );

    auto constructorMethodId = env->GetMethodID(javaDateClass.get(), "<init>", "(J)V");
    return new_object(env, javaDateClass, constructorMethodId, time_ms_epoch);
}

JniReference<jobject>
convert_to_jni( JNIEnv* env,
                const {{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point >& nvalue )
{
    return nvalue ? convert_to_jni( env, *nvalue ) : JniReference<jobject>{};
}

JniReference<jobject>
convert_to_jni(JNIEnv* env, const {{>common/InternalNamespace}}Locale& nvalue) {
    auto localeBuilderClass = find_class(env, "java/util/Locale$Builder");
    auto builder = create_object(env, localeBuilderClass);
    if (nvalue.language_tag) {
        // BCP 47 language tag takes precedence if present.
        call_java_method<jobject>(
            env, builder, "setLanguageTag", "(Ljava/lang/String;)Ljava/util/Locale$Builder;",
            convert_to_jni(env, nvalue.language_tag)
        );
        if (env->ExceptionOccurred()) return {};
    } else {
        // java.util.Locale has no constructor that takes "script" code,
        // so Locale.Builder has to be used instead to create a Locale from ISO codes.
        call_java_method<jobject>(
            env, builder, "setLanguage", "(Ljava/lang/String;)Ljava/util/Locale$Builder;",
            convert_to_jni(env, nvalue.language_code)
        );
        if (env->ExceptionOccurred()) return {};

        call_java_method<jobject>(
            env, builder, "setRegion", "(Ljava/lang/String;)Ljava/util/Locale$Builder;",
            convert_to_jni(env, nvalue.country_code)
        );
        if (env->ExceptionOccurred()) return {};

        call_java_method<jobject>(
            env, builder, "setScript", "(Ljava/lang/String;)Ljava/util/Locale$Builder;",
            convert_to_jni(env, nvalue.script_code)
        );
        if (env->ExceptionOccurred()) return {};
    }
    return call_java_method<jobject>(env, builder, "build", "()Ljava/util/Locale;");
}

JniReference<jobject>
convert_to_jni(JNIEnv* env, const {{>common/InternalNamespace}}optional<{{>common/InternalNamespace}}Locale>& nvalue) {
    return nvalue ? convert_to_jni(env, *nvalue) : JniReference<jobject>{};
}

}
{{#internalNamespace}}
}
{{/internalNamespace}}
