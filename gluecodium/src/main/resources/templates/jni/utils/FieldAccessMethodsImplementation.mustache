{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#include "FieldAccessMethods.h"

#include "BoxingConversionUtils.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

// -------------------- JNI object field getters --------------------------------------------------

bool
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 bool* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "Z" );

    return env->GetBooleanField( object.get(), fieldId );
}

int8_t
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int8_t* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "B" );

    return env->GetByteField( object.get(), fieldId );
}

int16_t
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int16_t* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "S" );

    return env->GetShortField( object.get(), fieldId );
}

int32_t
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int32_t* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "I" );

    return env->GetIntField( object.get(), fieldId );
}

int64_t
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int64_t* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "J" );

    return env->GetLongField( object.get(), fieldId );
}

uint8_t
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 uint8_t* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "S" );

    return static_cast<uint8_t>( env->GetShortField( object.get(), fieldId ) );
}

uint16_t
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 uint16_t* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "I" );

    return static_cast<uint16_t>( env->GetIntField( object.get(), fieldId ) );
}

uint32_t
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 uint32_t* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "J" );

    return static_cast<uint32_t>( env->GetLongField( object.get(), fieldId ) );
}

uint64_t
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 uint64_t* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "J" );

    return static_cast<uint64_t>( env->GetLongField( object.get(), fieldId ) );
}

float
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 float* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "F" );

    return env->GetFloatField( object.get(), fieldId );
}

double
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 double* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "D" );

    return env->GetDoubleField( object.get(), fieldId );
}

std::string
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 std::string* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/String;" );

    return {{>common/InternalNamespace}}jni::convert_from_jni( env, fieldValue, (std::string*)nullptr );
}

{{>common/InternalNamespace}}optional<bool>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<bool>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Boolean;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<bool>*)nullptr );
}

{{>common/InternalNamespace}}optional<int8_t>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<int8_t>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Byte;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<int8_t>*)nullptr );
}

{{>common/InternalNamespace}}optional<int16_t>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<int16_t>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Short;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<int16_t>*)nullptr );
}

{{>common/InternalNamespace}}optional<int32_t>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<int32_t>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Integer;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<int32_t>*)nullptr );
}

{{>common/InternalNamespace}}optional<int64_t>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<int64_t>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Long;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<int64_t>*)nullptr );
}

{{>common/InternalNamespace}}optional<uint8_t>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<uint8_t>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Short;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<uint8_t>*)nullptr );
}

{{>common/InternalNamespace}}optional<uint16_t>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<uint16_t>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Integer;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<uint16_t>*)nullptr );
}

{{>common/InternalNamespace}}optional<uint32_t>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<uint32_t>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Long;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<uint32_t>*)nullptr );
}

{{>common/InternalNamespace}}optional<uint64_t>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<uint64_t>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Long;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<uint64_t>*)nullptr );
}

{{>common/InternalNamespace}}optional<float>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<float>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Float;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<float>*)nullptr );
}

{{>common/InternalNamespace}}optional<double>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<double>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/Double;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<double>*)nullptr );
}

{{>common/InternalNamespace}}optional<std::string>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<std::string>* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/lang/String;" );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<std::string>*)nullptr );
}

std::shared_ptr<std::vector<uint8_t>>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 std::shared_ptr<std::vector<uint8_t>>* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "[B" );
    auto fieldValue = make_local_ref( env, static_cast<jbyteArray>( env->GetObjectField( object.get(), fieldId ) ) );

    return convert_from_jni( env, fieldValue, (std::shared_ptr<std::vector<uint8_t>>*)nullptr );
}

{{>common/InternalNamespace}}optional<std::shared_ptr<std::vector<uint8_t>>>
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<std::shared_ptr<std::vector<uint8_t>>>* dummy )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "[B" );
    auto fieldValue = make_local_ref( env, static_cast<jbyteArray>( env->GetObjectField( object.get(), fieldId ) ) );

    return convert_from_jni( env, fieldValue, ({{>common/InternalNamespace}}optional<std::shared_ptr<std::vector<uint8_t>>>*)nullptr );
}

std::chrono::system_clock::time_point
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 std::chrono::system_clock::time_point* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/util/Date;" );

    return {{>common/InternalNamespace}}jni::convert_from_jni(
        env, fieldValue, (std::chrono::system_clock::time_point*)nullptr );
}

{{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point >
get_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point >* dummy )
{
    auto fieldValue = get_object_field_value( env, object, fieldName, "Ljava/util/Date;" );

    return {{>common/InternalNamespace}}jni::convert_from_jni(
        env, fieldValue, ({{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point >*)nullptr );
}

JniReference<jobject>
get_object_field_value( JNIEnv* env,
                        const JniReference<jobject>& object,
                        const char* fieldName,
                        const char* fieldSignature )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, fieldSignature );

    return make_local_ref(env, env->GetObjectField( object.get(), fieldId ));
}

// -------------------- JNI object field setters --------------------------------------------------

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 bool value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "Z" );
    env->SetBooleanField( object.get(), fieldID, value );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int8_t value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "B" );
    env->SetByteField( object.get(), fieldID, value );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int16_t value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "S" );
    env->SetShortField( object.get(), fieldID, value );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int32_t value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "I" );
    env->SetIntField( object.get(), fieldID, value );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int64_t value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "J" );
    env->SetLongField( object.get(), fieldID, value );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 uint8_t value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "S" );
    env->SetShortField( object.get(), fieldID, static_cast<int16_t>( value ) );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 uint16_t value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "I" );
    env->SetIntField( object.get(), fieldID, static_cast<int32_t>( value ) );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 uint32_t value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "J" );
    env->SetLongField( object.get(), fieldID, static_cast<int64_t>( value ) );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 uint64_t value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "J" );
    env->SetLongField( object.get(), fieldID, static_cast<int64_t>( value ) );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 float value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "F" );
    env->SetFloatField( object.get(), fieldID, value );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 double value )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, "D" );
    env->SetDoubleField( object.get(), fieldID, value );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 const std::string& fieldValue )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "Ljava/lang/String;" );
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    env->SetObjectField( object.get(), fieldId, jValue.get() );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<bool> fieldValue )
{
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Boolean;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<float> fieldValue )
{
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Float;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<double> fieldValue )
{
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Double;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<int8_t> fieldValue )
{
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Byte;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<int16_t> fieldValue )
{
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Short;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<int32_t> fieldValue )
{
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Integer;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<int64_t> fieldValue )
{
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Long;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<uint8_t> fieldValue )
{
    auto nValue = fieldValue
        ? {{>common/InternalNamespace}}optional<int16_t>( static_cast<int16_t>( *fieldValue ) )
        : {{>common/InternalNamespace}}optional<int16_t>{};
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, nValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Short;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<uint16_t> fieldValue )
{
    auto nValue = fieldValue
        ? {{>common/InternalNamespace}}optional<int32_t>( static_cast<int32_t>( *fieldValue ) )
        : {{>common/InternalNamespace}}optional<int32_t>{};
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, nValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Integer;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<uint32_t> fieldValue )
{
    auto nValue = fieldValue
        ? {{>common/InternalNamespace}}optional<int64_t>( static_cast<int64_t>( *fieldValue ) )
        : {{>common/InternalNamespace}}optional<int64_t>{};
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, nValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Long;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<uint64_t> fieldValue )
{
    auto nValue = fieldValue
        ? {{>common/InternalNamespace}}optional<int64_t>( static_cast<int64_t>( *fieldValue ) )
        : {{>common/InternalNamespace}}optional<int64_t>{};
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, nValue );
    set_object_field_value( env, object, fieldName, "Ljava/lang/Long;", jValue );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<std::string> fieldValue )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "Ljava/lang/String;" );
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    env->SetObjectField( object.get(), fieldId, jValue.get() );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 const std::shared_ptr<std::vector<uint8_t>>& fieldValue )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "[B" );
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    env->SetObjectField( object.get(), fieldId, jValue.get() );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional<std::shared_ptr<std::vector<uint8_t>>> fieldValue )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "[B" );
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    env->SetObjectField( object.get(), fieldId, jValue.get() );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 const std::chrono::system_clock::time_point& fieldValue )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "Ljava/util/Date;" );
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    env->SetObjectField( object.get(), fieldId, jValue.get() );
}

void
set_field_value( JNIEnv* env,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 {{>common/InternalNamespace}}optional< std::chrono::system_clock::time_point > fieldValue )
{
    auto fieldId = env->GetFieldID( get_object_class(env, object).get(), fieldName, "Ljava/util/Date;" );
    auto jValue = {{>common/InternalNamespace}}jni::convert_to_jni( env, fieldValue );
    env->SetObjectField( object.get(), fieldId, jValue.get() );
}

void
set_object_field_value( JNIEnv* env,
                        const JniReference<jobject>& object,
                        const char* fieldName,
                        const char* fieldSignature,
                        const JniReference<jobject>& fieldValue )
{
    auto fieldID = env->GetFieldID( get_object_class(env, object).get(), fieldName, fieldSignature );
    env->SetObjectField( object.get(), fieldID, fieldValue.get() );
}
}
{{#internalNamespace}}
}
{{/internalNamespace}}
