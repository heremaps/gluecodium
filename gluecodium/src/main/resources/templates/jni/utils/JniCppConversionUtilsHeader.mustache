{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#pragma once

#include <jni.h>

#include "JniReference.h"
#include "{{>common/InternalInclude}}Optional.h"

#include <chrono>
#include <cstdint>
#include <functional>
#include <memory>
#include <string>
#include <vector>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

// ------------------- JNI to C++ conversion functions ---------------------------------------------

/**
 * Converts a JNI jstring to an std::string.
 */
std::string convert_from_jni( JNIEnv* env, const JniReference<jobject>& jvalue, std::string* dummy );
std::string convert_from_jni( JNIEnv* env, const JniReference<jstring>& jvalue, std::string* dummy );
{{>common/InternalNamespace}}optional<std::string> convert_from_jni(
    JNIEnv* env, const JniReference<jobject>& jvalue, {{>common/InternalNamespace}}optional<std::string>* dummy );

/**
 * Converts a jbyteArray to a byte buffer
 */
std::shared_ptr< ::std::vector< uint8_t > > convert_from_jni(
    JNIEnv* env, const JniReference<jbyteArray>& jvalue, std::shared_ptr< ::std::vector< uint8_t > >* dummy );
{{>common/InternalNamespace}}optional<std::shared_ptr< ::std::vector< uint8_t > > > convert_from_jni(
    JNIEnv* env, const JniReference<jbyteArray>& jvalue,
    {{>common/InternalNamespace}}optional< std::shared_ptr< ::std::vector< uint8_t > > >* dummy );

/**
 * Converts a Java Date object to an std::chrono::time_point.
 */
std::chrono::system_clock::time_point convert_from_jni(
    JNIEnv* env, const JniReference<jobject>& jvalue, std::chrono::system_clock::time_point* dummy );
{{>common/InternalNamespace}}optional<std::chrono::system_clock::time_point> convert_from_jni(
    JNIEnv* env, const JniReference<jobject>& jvalue,
    {{>common/InternalNamespace}}optional<std::chrono::system_clock::time_point>* dummy );

// -------------------- C++ to JNI conversion functions --------------------------------------------

/**
 * Converts an std::string to a JNI jstring
 */
JniReference<jstring> convert_to_jni( JNIEnv* env, const std::string& nvalue );
JniReference<jstring> convert_to_jni( JNIEnv* env, const {{>common/InternalNamespace}}optional<std::string>& nvalue );

/**
 * Converts a byte buffer to a jbyteArray
 */
JniReference<jbyteArray> convert_to_jni( JNIEnv* env, const std::shared_ptr< ::std::vector< uint8_t > >& nvalue );
JniReference<jbyteArray> convert_to_jni(
    JNIEnv* env, const {{>common/InternalNamespace}}optional< std::shared_ptr< ::std::vector< uint8_t > > >& nvalue );

/**
 * Converts an std::chrono::time_point to a Java Date object.
 */
JniReference<jobject> convert_to_jni( JNIEnv* env, const std::chrono::system_clock::time_point& nvalue );
JniReference<jobject> convert_to_jni(
    JNIEnv* env, const {{>common/InternalNamespace}}optional<std::chrono::system_clock::time_point>& nvalue );

// -------------------- optional<std::function<>> conversion functions -----------------------------

template<class R, class... Args>
optional<std::function<R(Args...)>>
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, optional<std::function<R(Args...)>>*)
{
    return _jinput
        ? convert_from_jni(_jenv, _jinput, (std::function<R(Args...)>*)nullptr)
        : optional<std::function<R(Args...)>>{};
}

template<class R, class... Args>
JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const optional<std::function<R(Args...)>> _ninput)
{
    return _ninput ? convert_to_jni(_jenv, *_ninput) : JniReference<jobject>{};
}

// -------------------- createCppProxy() default implementation ------------------------------------

template<class T>
void createCppProxy(JNIEnv* env, const JniReference<jobject>& obj, ::std::shared_ptr<T>& result) {}

}
{{#internalNamespace}}
}
{{/internalNamespace}}
