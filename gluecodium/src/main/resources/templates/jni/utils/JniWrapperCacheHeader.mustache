{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#pragma once

#include "JniReference.h"

#include <memory>
#include <mutex>
#include <unordered_map>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

class JNIEXPORT JniWrapperCache
{
public:
    template<class T>
    static void cache_wrapper(JNIEnv* jenv, std::shared_ptr<T> nobj, const JniReference<jobject>& jobj) {
        std::lock_guard<std::mutex> lock(s_mutex);
        s_wrapper_cache[nobj.get()] = jenv->NewWeakGlobalRef(jobj.get());
    }

    template<class T>
    static JniReference<jobject> get_cached_wrapper(JNIEnv* jenv, std::shared_ptr<T> nobj) {
        std::lock_guard<std::mutex> lock(s_mutex);

        auto iter = s_wrapper_cache.find(nobj.get());
        if (iter == s_wrapper_cache.end()) return {};

        auto jobj = jenv->NewLocalRef(iter->second);
        if (jenv->IsSameObject(jobj, NULL)) {
            jenv->DeleteLocalRef(jobj);
            return {};
        } else {
            return make_local_ref(jenv, jobj);
        }
    }

    template<class T>
    static void remove_cached_wrapper(JNIEnv* jenv, std::shared_ptr<T> nobj) {
        std::lock_guard<std::mutex> lock(s_mutex);

        auto iter = s_wrapper_cache.find(nobj.get());
        if (iter == s_wrapper_cache.end()) return;

        jenv->DeleteWeakGlobalRef(iter->second);
        s_wrapper_cache.erase(iter);
    }

private:
    static std::mutex s_mutex;
    static std::unordered_map<const void*, jobject> s_wrapper_cache;
};

}
{{#internalNamespace}}
}
{{/internalNamespace}}
