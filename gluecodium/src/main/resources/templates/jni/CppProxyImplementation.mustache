{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "FieldAccessMethods.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

{{#container}}
{{mangledName}}_CppProxy::{{mangledName}}_CppProxy( JNIEnv* _jenv, JniReference<jobject> globalRef, jint _jHashCode )
    : CppProxyBase( _jenv, std::move( globalRef ), _jHashCode, "{{mangledName}}" ) {
}
{{#parentMethods}}
{{>proxyMethod}}
{{/parentMethods}}{{!!

}}{{#methods}}
{{>proxyMethod}}
{{/methods}}
{{/container}}

}
{{#internalNamespace}}
}
{{/internalNamespace}}{{!!

}}{{+proxyMethod}}
{{returnType.cppName}}
{{mangledName}}_CppProxy::{{cppMethodName}}( {{joinPartial parameters "jni/CppProxyMethodParameter" ", "}} ){{#if isConst}} const{{/if}} {
    JNIEnv* jniEnv = getJniEnvironment( );{{!!
}}{{#parameters}}{{!!
}}{{#if type.isComplex}}
    auto j{{name}} = convert_to_jni( jniEnv, n{{name}} );{{!!
}}{{/if}}{{!!
}}{{#unless type.isComplex}}
    j{{type.javaName}} j{{name}} = n{{name}};{{!!
}}{{/unless}}{{!!
}}{{/parameters}}
    {{#unless returnType.isJavaVoid}}auto result = {{/unless}}callJavaMethod<{{returnType.name}}>( "{{javaMethodName}}", {{!!
    }}"({{#parameters}}{{type.jniTypeSignature}}{{/parameters}}){{returnType.jniTypeSignature}}", {{!!
    }}jniEnv {{#if parameters}},{{/if}} {{#parameters}}j{{name}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{#exception}}
    auto jException = make_local_ref<jobject>(jniEnv, jniEnv->ExceptionOccurred( ));
    if ( jException )
    {
        auto jErrorValue = get_object_field_value(
            jniEnv,
            jException,
            "error",
            "{{errorType.jniTypeSignature}}" );
        auto nErrorValue = convert_from_jni(
            jniEnv,
            jErrorValue,
            ({{errorType.cppFullyQualifiedName}}*)nullptr );

        jniEnv->ExceptionClear( );
{{#if cppTypeIsErrorCode}}
        return ::std::error_code{nErrorValue};
{{/if}}{{#unless cppTypeIsErrorCode}}
        return {{errorType.cppFullyQualifiedName}}{nErrorValue};
{{/unless}}
    }
    else
    {
{{/exception}}{{!!
}}{{^exception}}
    if ( jniEnv->ExceptionCheck( ) )
    {
        jniEnv->ExceptionDescribe( );
        jniEnv->FatalError( "Unhandled exception" );
    }
{{/exception}}{{!!
}}{{#unless returnType.isJavaVoid}}
    return {{#if returnType.isComplex}}convert_from_jni( jniEnv, result, ({{returnType.cppName}}{{#if exception}}::value_type{{/if}}*)nullptr ){{/if}}{{!!
    }}{{#unless returnType.isComplex}}result{{/unless}};
{{/unless}}
{{#exception}}{{#if returnType.isJavaVoid}}{{#if cppTypeIsErrorCode}}
        return ::std::error_code{};
{{/if}}{{#unless exception.cppTypeIsErrorCode}}
        return {true};
{{/unless}}{{/if}}
    }
{{/exception}}
}
{{/proxyMethod}}
