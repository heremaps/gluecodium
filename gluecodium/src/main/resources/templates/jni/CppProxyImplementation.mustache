{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "FieldAccessMethods.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

{{#container}}
{{resolveName "mangled"}}_CppProxy::{{resolveName "mangled"}}_CppProxy( JNIEnv* _jenv, JniReference<jobject> globalRef, jint _jHashCode )
    : CppProxyBase( _jenv, std::move( globalRef ), _jHashCode, "{{resolveName "mangled"}}" ) {
}
{{#inheritedFunctions}}{{#unless isStatic}}
{{>proxyMethodImpl}}
{{/unless}}{{/inheritedFunctions}}
{{#inheritedProperties}}{{#unless isStatic}}
{{>proxyPropertyImpl}}
{{/unless}}{{/inheritedProperties}}
{{#functions}}{{#unless isStatic}}
{{>proxyMethodImpl}}
{{/unless}}{{/functions}}
{{#properties}}{{#unless isStatic}}
{{>proxyPropertyImpl}}
{{/unless}}{{/properties}}
{{/container}}

}
{{#internalNamespace}}
}
{{/internalNamespace}}{{!!

}}{{+proxyMethodImpl}}
{{>cpp/CppReturnType}}
{{resolveName container "mangled"}}_CppProxy::{{#if cppName}}{{cppName}}{{/if}}{{!!
}}{{#unless cppName}}{{#instanceOf container "LimeLambda"}}operator(){{/instanceOf}}{{!!
}}{{#notInstanceOf container "LimeLambda"}}{{resolveName "C++"}}{{/notInstanceOf}}{{/unless}}( {{!!
}}{{joinPartial parameters "jni/CppProxyMethodParameter" ", "}} {{!!
}}){{#if attributes.cpp.const isConst logic="or"}} const{{/if}} {
{{#unlessPredicate "shouldRetain"}}
    {{#unless returnType.isVoid}}return {};{{/unless}}
{{/unlessPredicate}}{{#ifPredicate "shouldRetain"}}
    JNIEnv* jniEnv = getJniEnvironment( );{{!!
}}{{#parameters}}{{!!
}}{{#unlessPredicate typeRef "isJniPrimitive"}}
    auto j{{resolveName}} = convert_to_jni( jniEnv, n{{resolveName}} );{{!!
}}{{/unlessPredicate}}{{#ifPredicate typeRef "isJniPrimitive"}}
    {{resolveName typeRef}} j{{resolveName}} = n{{resolveName}};{{!!
}}{{/ifPredicate}}{{!!
}}{{/parameters}}
    {{#unless returnType.isVoid}}auto result = {{/unless}}callJavaMethod<{{resolveName returnType}}>( {{!!
    }}"{{#if javaName}}{{javaName}}{{/if}}{{#unless javaName}}{{resolveName}}{{/unless}}", {{!!
    }}"({{#parameters}}{{resolveName typeRef "signature"}}{{/parameters}}){{!!
    }}{{resolveName returnType "signature"}}", jniEnv {{#if parameters}},{{/if}} {{!!
    }}{{#parameters}}j{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{#if thrownType}}
    auto jException = make_local_ref<jobject>(jniEnv, jniEnv->ExceptionOccurred( ));
    if ( jException )
    {
        jniEnv->ExceptionClear( );
        auto jErrorValue = get_object_field_value(
            jniEnv,
            jException,
            "error",
            "{{resolveName exception.errorType "signature"}}" );
        auto nErrorValue = convert_from_jni(
            jniEnv,
            jErrorValue,
            ({{resolveName exception.errorType "C++ FQN"}}*)nullptr );

{{#instanceOf exception.errorType.type.actualType "LimeEnumeration"}}
        return ::std::error_code{nErrorValue};
{{/instanceOf}}{{#notInstanceOf exception.errorType.type.actualType "LimeEnumeration"}}
        return {{resolveName exception.errorType "C++ FQN"}}{nErrorValue};
{{/notInstanceOf}}
    }
    else
    {
{{/if}}{{#unless thrownType}}
    if ( jniEnv->ExceptionCheck( ) )
    {
        jniEnv->ExceptionDescribe( );
        jniEnv->ExceptionClear( );
        jniEnv->FatalError( "Exception was thrown in Java and it was not handled.\n"
            "See the log for more information about the exception (including Java stack trace)." );
    }
{{/unless}}{{!!
}}{{#unless returnType.isVoid}}
    return {{#unlessPredicate returnType.typeRef "isJniPrimitive"}}convert_from_jni( jniEnv, result, {{!!
    }}({{resolveName returnType "C++"}}*)nullptr ){{/unlessPredicate}}{{!!
    }}{{#ifPredicate returnType.typeRef "isJniPrimitive"}}result{{/ifPredicate}};
{{/unless}}
{{#if thrownType}}{{#if returnType.isVoid}}{{#instanceOf exception.errorType.type.actualType "LimeEnumeration"}}
        return ::std::error_code{};
{{/instanceOf}}{{#notInstanceOf exception.errorType.type.actualType "LimeEnumeration"}}
        return {true};
{{/notInstanceOf}}{{/if}}
    }
{{/if}}
{{/ifPredicate}}
}
{{/proxyMethodImpl}}{{!!

}}{{+proxyPropertyImpl}}{{!!
}}{{#if getter}}{{#set property=this function=getter isConst=true}}{{!!
}}{{#resolveName property "C++" "getter"}}{{#set cppName=this}}{{!!
}}{{#resolveName property "" "getter"}}{{#set javaName=this}}{{#function}}
{{>proxyMethodImpl}}
{{/function}}{{/set}}{{/resolveName}}{{/set}}{{/resolveName}}{{/set}}{{/if}}{{!!
}}{{#if setter}}{{#set property=this function=setter}}{{!!
}}{{#resolveName property "C++" "setter"}}{{#set cppName=this}}{{!!
}}{{#resolveName property "" "setter"}}{{#set javaName=this}}{{#function}}
{{>proxyMethodImpl}}
{{/function}}{{/set}}{{/resolveName}}{{/set}}{{/resolveName}}{{/set}}{{/if}}{{!!
}}{{/proxyPropertyImpl}}
