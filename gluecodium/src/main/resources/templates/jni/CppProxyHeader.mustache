{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#pragma once

{{#container}}{{#includes}}
{{>common/Include}}
{{/includes}}
#include "CppProxyBase.h"
#include "JniReference.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

class {{resolveName "mangled"}}_CppProxy : public CppProxyBase{{!!
}}{{#instanceOf this "LimeInterface"}}, public {{resolveName "C++ FQN"}}{{/instanceOf}} {
public:
    {{resolveName "mangled"}}_CppProxy( JNIEnv* _jenv, JniReference<jobject> globalRef, jint _jHashCode );
    {{resolveName "mangled"}}_CppProxy( const {{resolveName "mangled"}}_CppProxy& ) = delete;
    {{resolveName "mangled"}}_CppProxy& operator=( const {{resolveName "mangled"}}_CppProxy& ) = delete;

{{#inheritedFunctions}}{{#unless isStatic}}
{{>proxyMethodHeader}} override;
{{/unless}}{{/inheritedFunctions}}
{{#inheritedProperties}}{{#unless isStatic}}
{{>proxyPropertyHeader}}
{{/unless}}{{/inheritedProperties}}
{{#functions}}{{#unless isStatic}}
{{>proxyMethodHeader}}{{#instanceOf container "LimeInterface"}} override{{/instanceOf}};
{{/unless}}{{/functions}}
{{#properties}}{{#unless isStatic}}
{{>proxyPropertyHeader}}
{{/unless}}{{/properties}}
};

}
{{#internalNamespace}}
}
{{/internalNamespace}}{{/container}}{{!!

}}{{+proxyMethodHeader}}
    {{>cpp/CppReturnType}} {{#instanceOf container "LimeLambda"}}operator(){{/instanceOf}}{{!!
    }}{{#notInstanceOf container "LimeLambda"}}{{resolveName "C++"}}{{/notInstanceOf}}( {{!!
    }}{{joinPartial parameters "jni/CppProxyMethodParameter" ", "}} ){{!!
    }}{{#if attributes.cpp.const}} const{{/if}}{{!!
    }}{{#if attributes.cpp.noexcept}} noexcept{{/if}}{{!!
}}{{/proxyMethodHeader}}{{!!

}}{{+proxyPropertyHeader}}
{{#set property=this cppNoexcept=attributes.cpp.noexcept}}{{#getter}}
    {{>cpp/CppReturnType}} {{resolveName property "C++" "getter"}}(  ) const{{#if cppNoexcept}} noexcept{{/if}} override;
{{/getter}}{{#setter}}
    void {{resolveName property "C++" "setter"}}( {{!!
    }}{{#parameters}}{{>jni/CppProxyMethodParameter}}{{/parameters}} ){{#if cppNoexcept}} noexcept{{/if}} override;
{{/setter}}{{/set}}
{{/proxyPropertyHeader}}
