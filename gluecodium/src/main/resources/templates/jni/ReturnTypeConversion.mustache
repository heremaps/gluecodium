{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
    {{#exception}}
    auto nativeCallResult = {{>jni/CppMethodCall}}
{{#if cppTypeIsErrorCode}}
    auto errorCode = nativeCallResult{{#unless returnType.isJavaVoid}}.error(){{/unless}};
    if ({{#unless returnType.isJavaVoid}}!nativeCallResult.has_value(){{/unless}}{{#if returnType.isJavaVoid}}errorCode{{/if}})
    {
        auto nErrorValue = static_cast<{{errorType.cppFullyQualifiedName}}>(errorCode.value());
        auto jErrorValue = {{>common/InternalNamespace}}jni::convert_to_jni(_jenv, nErrorValue);
{{/if}}{{#unless cppTypeIsErrorCode}}
    if (!nativeCallResult.has_value())
    {
        auto jErrorValue = {{>common/InternalNamespace}}jni::convert_to_jni(_jenv, nativeCallResult.error());
{{/unless}}
        auto exceptionClass = {{>common/InternalNamespace}}jni::find_class(_jenv, "{{javaClassName}}");
        auto theConstructor = _jenv->GetMethodID(exceptionClass.get(), "<init>", "({{errorType.jniTypeSignature}})V");
        auto exception = {{>common/InternalNamespace}}jni::new_object(_jenv, exceptionClass, theConstructor, jErrorValue);
        _jenv->Throw(static_cast<jthrowable>(exception.release()));{{#unless returnType.isJavaVoid}}
        return {{#if returnsOpaqueHandle}}0{{/if}}{{#unless returnsOpaqueHandle}}{{!!
        }}{{#if returnType.isComplex}}nullptr{{/if}}{{#unless returnType.isComplex}}nativeCallResult.unsafe_value(){{/unless}}{{/unless}};{{/unless}}
    }{{#unless returnType.isJavaVoid}}
    auto result = nativeCallResult.unsafe_value();{{/unless}}
    {{/exception}}
{{^exception}}    {{#unless returnType.isJavaVoid}}auto result = {{/unless}}{{>jni/CppMethodCall}}{{/exception}}{{#unless returnType.isJavaVoid}}
    {{#if returnsOpaqueHandle}}auto nSharedPtr = new (::std::nothrow) {{returnType.cppFullyQualifiedName}}{{#if exception}}::value_type{{/if}}(result);
    if (nSharedPtr == nullptr)
    {
        auto exceptionClass = {{>common/InternalNamespace}}jni::find_class(_jenv, "java/lang/OutOfMemoryError");
        _jenv->ThrowNew(exceptionClass.get(), "Cannot allocate native memory.");
        return 0;
    }
    return reinterpret_cast<jlong>(nSharedPtr);{{/if}}{{!!
}}{{#unless returnsOpaqueHandle}}return {{#if returnType.isComplex}}{{>common/InternalNamespace}}jni::convert_to_jni(_jenv, result).release(){{/if}}{{!!
}}{{#unless returnType.isComplex}}result{{/unless}};{{/unless}}{{/unless}}
