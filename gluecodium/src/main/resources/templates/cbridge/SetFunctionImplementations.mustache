{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
_baseRef {{name}}_create_handle() {
    return reinterpret_cast<_baseRef>( new ( std::nothrow ) {{>baseApi}}() );
}

void {{name}}_release_handle(_baseRef handle) {
    delete get_pointer<{{>baseApi}}>(handle);
}

void {{name}}_insert(_baseRef handle, {{elementType.functionReturnType}} value) {
    (*get_pointer<{{>baseApi}}>(handle)).insert(std::move({{>ConvertToCpp}}));
}

_baseRef {{name}}_iterator(_baseRef handle) {
    return reinterpret_cast<_baseRef>( new ( std::nothrow ) {{>baseApi}}::iterator( get_pointer<{{>baseApi}}>(handle)->begin() ) );
}

void {{name}}_iterator_release_handle(_baseRef iterator_handle) {
    delete reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle );
}

bool {{name}}_iterator_is_valid(_baseRef handle, _baseRef iterator_handle) {
    return *reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle ) != get_pointer<{{>baseApi}}>(handle)->end();
}

void {{name}}_iterator_increment(_baseRef iterator_handle) {
    ++*reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle );
}

{{elementType.functionReturnType}} {{name}}_iterator_get(_baseRef iterator_handle) {
    auto& value = **reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle );
    return {{>ConvertFromCpp}};
}

_baseRef {{name}}_create_optional_handle() {
    return reinterpret_cast<_baseRef>( new ( std::nothrow ) {{>common/InternalNamespace}}optional<{{>baseApi}}>( {{>baseApi}}( ) ) );
}

void {{name}}_release_optional_handle(_baseRef handle) {
    delete reinterpret_cast<{{>common/InternalNamespace}}optional<{{>baseApi}}>*>( handle );
}

_baseRef {{name}}_unwrap_optional_handle(_baseRef handle) {
    return reinterpret_cast<_baseRef>( &**reinterpret_cast<{{>common/InternalNamespace}}optional<{{>baseApi}}>*>( handle ) );
}

{{!!

}}{{+baseApi}}std::unordered_set<{{elementType.name}}{{#unless hasStdHash}}, {{>common/InternalNamespace}}hash<{{elementType.name}}>{{/unless}}>{{/baseApi}}{{!!

}}{{+ConvertToCpp}}{{!!
}}{{#switch elementType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}value{{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<{{elementType.name}}>(value){{/case}}{{!!
    }}{{#default}}Conversion<{{elementType}}>::toCpp(value){{/default}}{{!!
}}{{/switch}}{{!!
}}{{/ConvertToCpp}}{{!!

}}{{+ConvertFromCpp}}{{!!
}}{{#switch elementType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}value{{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<{{elementType.functionReturnType}}>(value){{/case}}{{!!
    }}{{#default}}Conversion<{{elementType}}>::referenceBaseRef(value){{/default}}{{!!
}}{{/switch}}{{!!
}}{{/ConvertFromCpp}}
