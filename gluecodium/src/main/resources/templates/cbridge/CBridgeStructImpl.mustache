{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if fields}}
_baseRef
{{resolveName}}_create_handle( {{!!
}}{{#filter fields predicate="shouldRetain"}}{{#this}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/this}}{{/filter}} )
{
{{#unlessPredicate "hasImmutableFields"}}{{!!
}}    {{resolveName "C++"}}* _struct = new ( ::std::nothrow ) {{resolveName "C++"}}();{{/unlessPredicate}}
{{#set cppStruct="_struct" structElement=this}}{{#fields}}{{#ifPredicate "shouldRetain"}}
{{>setCppFieldValue}}
{{/ifPredicate}}{{/fields}}{{/set}}
{{#ifPredicate "hasImmutableFields"}}{{!!
}}    {{resolveName "C++"}}* _struct = new ( ::std::nothrow ) {{resolveName "C++"}}( {{>immutableFieldsInit}} );{{/ifPredicate}}
    return reinterpret_cast<_baseRef>( _struct );
}

void
{{resolveName}}_release_handle( _baseRef handle )
{
    delete get_pointer<{{resolveName "C++"}}>( handle );
}

_baseRef
{{resolveName}}_create_optional_handle({{!!
}}{{#filter fields predicate="shouldRetain"}}{{#this}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/this}}{{/filter}})
{
{{#unlessPredicate "hasImmutableFields"}}{{!!
}}    auto _struct = new ( ::std::nothrow ) std::optional<{{resolveName "C++"}}>( {{resolveName "C++"}}( ) );{{/unlessPredicate}}
{{#set cppStruct="(*_struct)" structElement=this}}{{#fields}}{{#ifPredicate "shouldRetain"}}
{{>setCppFieldValue}}
{{/ifPredicate}}{{/fields}}{{/set}}
{{#ifPredicate "hasImmutableFields"}}{{!!
}}    auto _struct = new ( ::std::nothrow ) std::optional<{{resolveName "C++"}}>( {{!!
}}{{resolveName "C++"}}( {{>immutableFieldsInit}} ) );{{/ifPredicate}}
    return reinterpret_cast<_baseRef>( _struct );
}

_baseRef
{{resolveName}}_unwrap_optional_handle( _baseRef handle )
{
    return reinterpret_cast<_baseRef>( &**reinterpret_cast<std::optional<{{resolveName "C++"}}>*>( handle ) );
}

void {{resolveName}}_release_optional_handle(_baseRef handle) {
    delete reinterpret_cast<std::optional<{{resolveName "C++"}}>*>( handle );
}

{{#set structElement=this}}
{{#fields}}{{#ifPredicate "shouldRetain"}}
{{resolveName typeRef}} {{resolveName structElement}}_{{resolveName}}_get(_baseRef handle) {
    auto struct_pointer = get_pointer<const {{resolveName structElement "C++"}}>(handle);
    return {{#set field=this}}{{#if typeRef.attributes.optimized}}{{!!
    }}reinterpret_cast<_baseRef>(
        new (std::nothrow) std::shared_ptr<{{resolveName typeRef "C++"}}>(
            new (std::nothrow) {{resolveName typeRef "C++"}}({{>getCppFieldValue}})
        )
    );{{!!
}}{{/if}}{{#unless typeRef.attributes.optimized}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}Conversion<{{resolveName typeRef "C++"}}>::toBaseRef({{>getCppFieldValue}});{{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}static_cast<{{resolveName typeRef}}>({{>getCppFieldValue}});{{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}{{>getCppFieldValue}};{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/unless}}{{/set}}
}
{{/ifPredicate}}{{/fields}}
{{/set}}

{{/if}}
{{#structs}}
{{>cbridge/CBridgeStructImpl}}
{{/structs}}

{{#each classes interfaces}}
{{>cbridge/CBridgeClassImpl}}
{{/each}}

{{#lambdas}}
{{>cbridge/CBridgeLambdaImpl}}
{{/lambdas}}{{!!

}}{{#set selfType=this}}{{#functions}}{{#ifPredicate "shouldRetain"}}
{{>cbridge/CBridgeFunctionDefinition}}
{{/ifPredicate}}{{/functions}}{{/set}}{{!!

}}{{+getCppFieldValue}}struct_pointer->{{#ifPredicate field "hasCppGetter"}}{{resolveName field "C++" "getter"}}(){{/ifPredicate}}{{!!
}}{{#unlessPredicate field "hasCppGetter"}}{{resolveName field "C++"}}{{/unlessPredicate}}{{/getCppFieldValue}}{{!!

}}{{+setCppFieldValue}}{{!!
}}{{#ifPredicate structElement "hasImmutableFields"}}    auto _{{resolveName}} = {{/ifPredicate}}{{!!
}}{{#unlessPredicate structElement "hasImmutableFields"}}    {{cppStruct}}->{{!!
}}{{#ifPredicate "hasCppSetter"}}{{resolveName this "C++" "setter"}}( {{/ifPredicate}}{{!!
}}{{#unlessPredicate "hasCppSetter"}}{{resolveName "C++"}} = {{/unlessPredicate}}{{/unlessPredicate}}{{!!
}}{{#set field=this}}{{!!
}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}Conversion<{{resolveName typeRef "C++"}}>::toCpp( {{resolveName field}} ){{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}static_cast<{{resolveName typeRef "C++"}}>( {{resolveName field}} ){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}{{resolveName field}}{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/set}}{{!!
}}{{#unlessPredicate structElement "hasImmutableFields"}}{{#ifPredicate "hasCppSetter"}} ){{/ifPredicate}}{{/unlessPredicate}};
{{/setCppFieldValue}}{{!!

}}{{+immutableFieldsInit}}{{!!
}}{{#if allFieldsConstructor}}{{#allFieldsConstructor}}{{>immutableFieldsParameters}}{{/allFieldsConstructor}}{{/if}}{{!!
}}{{#unless allFieldsConstructor}}{{>immutableFieldsParameters}}{{/unless}}{{/immutableFieldsInit}}{{!!

}}{{+immutableFieldsParameters}}{{#fields}}{{#ifPredicate "shouldRetain"}}_{{resolveName}}{{/ifPredicate}}{{!!
}}{{#unlessPredicate "shouldRetain"}}{{resolveName defaultValue "C++"}}{{/unlessPredicate}}{{!!
}}{{#if iter.hasNext}}, {{/if}}{{/fields}}{{/immutableFieldsParameters}}
