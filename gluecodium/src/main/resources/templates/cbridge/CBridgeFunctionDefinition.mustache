{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>cbridge/CBridgeFunctionSignature}} {
{{#set function=this}}{{#if thrownType}}{{#set errorType=exception.errorType}}{{!!
}}{{#ifPredicate errorType "isNonNullableEnum"}}{{#if returnType.isVoid}}
    auto&& ERROR_VALUE = {{>callBaseApi}}.value();
    return {ERROR_VALUE == 0, static_cast< {{resolveName errorType}} >(ERROR_VALUE)};
{{/if}}{{#unless returnType.isVoid}}
    auto&& RESULT = {{>callBaseApi}};
    if (RESULT.has_value()) {
        return {true, .returned_value = {{#set delegateToCall="unsafe_value"}}{{>returnConversion}}{{/set}}};
    } else {
        return {false, .error_value = static_cast< {{resolveName errorType}} >(RESULT.error().value())};
    }
{{/unless}}{{/ifPredicate}}{{!!
}}{{#unlessPredicate errorType "isNonNullableEnum"}}
    auto&& RESULT = {{>callBaseApi}};
    if (RESULT.has_value()) {
{{#if returnType.isVoid}}
        return {true, 0};
{{/if}}{{#unless returnType.isVoid}}
        return {true, .returned_value = {{#set delegateToCall="unsafe_value"}}{{>returnConversion}}{{/set}}};
{{/unless}}
    } else {
        return {false, .error_value = {{>errorConversion}}};
    }
{{/unlessPredicate}}{{!!
}}{{/set}}{{/if}}{{!!
}}{{#unless thrownType}}    return {{#set delegateToCall="callBaseApi"}}{{>returnConversion}}{{/set}};{{/unless}}{{/set}}
}{{!!


}}{{+returnConversion}}{{#set typeRef=returnType.typeRef}}{{!!
}}{{#if typeRef.attributes.optimized}}{{!!
}}reinterpret_cast<_baseRef>(
        new (std::nothrow) std::shared_ptr<{{resolveName typeRef "C++"}}>(
            new (std::nothrow) {{resolveName typeRef "C++"}}({{include delegateToCall}})
        )
    ){{!!
}}{{/if}}{{#unless typeRef.attributes.optimized}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}Conversion<{{resolveName typeRef "C++"}}>::toBaseRef({{include delegateToCall}}){{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}static_cast<{{resolveName typeRef}}>({{include delegateToCall}}){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}{{include delegateToCall}}{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/unless}}{{/set}}{{/returnConversion}}{{!!

}}{{+errorConversion}}{{#set typeRef=errorType}}{{!!
}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}Conversion<{{resolveName typeRef "C++"}}>::toBaseRef(RESULT.error()){{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}static_cast<{{resolveName typeRef}}>(RESULT.error()){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}RESULT.error(){{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/set}}{{/errorConversion}}{{!!


}}{{+unsafe_value}}RESULT.unsafe_value(){{/unsafe_value}}{{!!

}}{{+call_error}}RESULT.error(){{/call_error}}{{!!


}}{{+callBaseApi}}{{!!
}}{{#if isStatic}}{{resolveName selfType "C++"}}::{{resolveName function "C++"}}{{/if}}{{!!
}}{{#unless isStatic}}get_pointer<{{resolveName selfType "C++" "ref"}}>(_instance){{!!
}}{{#notInstanceOf selfType "LimeStruct"}}{{#unless isLambda}}->get(){{/unless}}{{/notInstanceOf}}{{!!
}}->{{resolveName function "C++"}}{{/unless}}({{joinPartial parameters "delegateConversion" ", "}}){{!!
}}{{/callBaseApi}}{{!!


}}{{+delegateConversion}}{{#set parameter=this}}{{!!
}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}Conversion<{{resolveName typeRef "C++" "ref"}}>::toCpp({{resolveName parameter}}){{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}static_cast<{{resolveName typeRef "C++"}}>({{resolveName parameter}}){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}{{resolveName parameter}}{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/set}}{{/delegateConversion}}
