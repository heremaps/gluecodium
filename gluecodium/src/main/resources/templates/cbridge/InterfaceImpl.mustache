{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if selfType}}
void {{name}}_release_handle(_baseRef handle) {
    delete get_pointer<{{selfType.name}}>(handle);
}

_baseRef {{name}}_copy_handle(_baseRef handle) {
    return handle
        ? reinterpret_cast<_baseRef>(checked_pointer_copy(*get_pointer<{{selfType.name}}>(handle)))
        : 0;
}

{{#unless isFunctionalInterface}}
const void* {{name}}_get_swift_object_from_wrapper_cache(_baseRef handle) {
    return handle
        ? {{>common/InternalNamespace}}get_wrapper_cache().get_cached_wrapper(get_pointer<{{selfType.name}}>(handle)->get())
        : nullptr;
}

void {{name}}_cache_swift_object_wrapper(_baseRef handle, const void* swift_pointer) {
    if (!handle) return;
    {{>common/InternalNamespace}}get_wrapper_cache().cache_wrapper(get_pointer<{{selfType.name}}>(handle)->get(), swift_pointer);
}

void {{name}}_remove_swift_object_from_wrapper_cache(_baseRef handle) {
    if (!{{>common/InternalNamespace}}WrapperCache::is_alive) return;
    {{>common/InternalNamespace}}get_wrapper_cache().remove_cached_wrapper(get_pointer<{{selfType.name}}>(handle)->get());
}
{{/unless}}

{{#if hasTypeRepository}}
extern "C" {
extern void* _CBridgeInit{{name}}(_baseRef handle);
}

namespace {
struct {{name}}RegisterInit {
    {{name}}RegisterInit() {
        get_init_repository().add_init("{{name}}", &_CBridgeInit{{name}});
    }
} s_{{name}}_register_init;
}

void* {{name}}_get_typed(_baseRef handle) {
    const auto& real_type_id = {{>common/InternalNamespace}}get_type_repository(static_cast<{{selfType}}::element_type*>(nullptr)).get_id(get_pointer<{{selfType.name}}>(handle)->get());
    auto init_function = get_init_repository().get_init(real_type_id);
    return init_function ? init_function(handle) : _CBridgeInit{{name}}(handle);
}
{{/if}}

{{/if}}

{{#hasEquatableType}}
bool {{name}}_equal(_baseRef lhs, _baseRef rhs) {
{{#isEquatable}}
    return **get_pointer<{{selfType.name}}>(lhs) == **get_pointer<{{selfType.name}}>(rhs);
{{/isEquatable}}
{{#isPointerEquatable}}
    return *get_pointer<{{selfType.name}}>(lhs) == *get_pointer<{{selfType.name}}>(rhs);
{{/isPointerEquatable}}
}
uint64_t {{name}}_hash(_baseRef handle) {
{{#isEquatable}}
    return {{>common/InternalNamespace}}hash<{{selfType.name}}::element_type>()(**get_pointer<{{selfType.name}}>(handle));
{{/isEquatable}}
{{#isPointerEquatable}}
    return {{>common/InternalNamespace}}hash<{{selfType.name}}>()(*get_pointer<{{selfType.name}}>(handle));
{{/isPointerEquatable}}
}
{{/hasEquatableType}}
{{#structs}}
{{>cbridge/StructImplementation}}

{{#set selfIsStruct=true}}{{#methods}}
{{>cbridge/FunctionDefinition}}
{{/methods}}{{/set}}
{{/structs}}

{{#functions}}
{{>cbridge/FunctionDefinition}}
{{/functions}}

{{#isInterface}}
{{>cbridge/CppProxy}}
{{/isInterface}}

{{#interfaces}}
{{>cbridge/InterfaceImpl}}
{{/interfaces}}
