{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
_baseRef {{resolveName}}_create_handle() {
    return reinterpret_cast<_baseRef>( new {{resolveName "C++"}}( ) );
}

_baseRef {{resolveName}}_copy_handle(_baseRef handle) {
    return reinterpret_cast<_baseRef>( new {{resolveName "C++"}}( *reinterpret_cast<{{resolveName "C++"}}*>( handle ) ) );
}

void {{resolveName}}_release_handle(_baseRef handle) {
    delete reinterpret_cast<{{resolveName "C++"}}*>( handle );
}

uint64_t {{resolveName}}_count(_baseRef handle) {
    return Conversion<{{resolveName "C++"}}>::toCpp( handle ).size( );
}

{{resolveName elementType}} {{resolveName}}_get( _baseRef handle, uint64_t index ) {
    {{#set typeRef=elementType list=this}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}return Conversion<{{resolveName typeRef "C++"}}>::referenceBaseRef(Conversion<{{resolveName list "C++"}}>::toCpp( handle )[index]);{{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}{{!!
}}return static_cast<{{resolveName typeRef}}>(Conversion<{{resolveName list "C++"}}>::toCpp(handle)[ index ]);{{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}{{!!
}}return Conversion<{{resolveName list "C++"}}>::toCpp(handle)[ index ];{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/set}}
}

void {{resolveName}}_append( _baseRef handle, {{resolveName elementType}} item )
{
    {{#set typeRef=elementType list=this}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}Conversion<{{resolveName list "C++"}}>::toCpp(handle).push_back(Conversion<{{resolveName typeRef "C++"}}>::toCpp(item));{{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}{{!!
}}Conversion<{{resolveName list "C++"}}>::toCpp(handle).push_back( static_cast<{{resolveName typeRef "C++"}}>( item ) );{{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}{{!!
}}Conversion<{{resolveName list "C++"}}>::toCpp(handle).push_back( item );{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/set}}
}

_baseRef {{resolveName}}_create_optional_handle() {
    return reinterpret_cast<_baseRef>( new ( ::std::nothrow ) {{>common/InternalNamespace}}optional<{{resolveName "C++"}}>( {{resolveName "C++"}}( ) ) );
}

void {{resolveName}}_release_optional_handle(_baseRef handle) {
    delete reinterpret_cast<{{>common/InternalNamespace}}optional<{{resolveName "C++"}}>*>( handle );
}

_baseRef {{resolveName}}_unwrap_optional_handle(_baseRef handle) {
    return reinterpret_cast<_baseRef>( &**reinterpret_cast<{{>common/InternalNamespace}}optional<{{resolveName "C++"}}>*>( handle ) );
}
