{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2019 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#pragma once

#include "cbridge/include/BaseHandle.h"
#include "{{>common/InternalInclude}}Optional.h"

#include <chrono>
#include <cinttypes>
#include <cmath>
#include <cstdlib>
#include <memory>

template < typename T >
inline static T*
get_pointer( _baseRef handle )
{
    return reinterpret_cast< T* >( handle );
}

template < typename T >
inline static ::std::shared_ptr< T >*
checked_pointer_copy( ::std::shared_ptr< T >&& pointer )
{
    return !pointer ? nullptr : new ::std::shared_ptr< T >( ::std::move( pointer ) );
}

template < typename T >
inline static ::std::shared_ptr< T >*
checked_pointer_copy( const ::std::shared_ptr< T >& pointer )
{
    return !pointer ? nullptr : new ::std::shared_ptr< T >( pointer );
}

template<class R, class... Args>
inline static ::std::function<R(Args...)>*
checked_pointer_copy(const ::std::function<R(Args...)>& pointer)
{
    return !pointer ? nullptr : new ::std::function<R(Args...)>(pointer);
}

template < typename T >
struct Conversion
{
    static _baseRef
    toBaseRef( const T& t )
    {
        return reinterpret_cast< _baseRef >( new T( t ) );
    }

    static _baseRef
    toBaseRef( T&& t )
    {
        return reinterpret_cast< _baseRef >( new T( ::std::forward< T >( t ) ) );
    }

    static _baseRef
    referenceBaseRef( const T& t )
    {
        return reinterpret_cast< _baseRef >( &t );
    }

    static T&
    toCpp( _baseRef ref )
    {
        return *reinterpret_cast< T* >( ref );
    }

    static T
    toCppReturn( _baseRef ref )
    {
        auto ptr = reinterpret_cast< T* >( ref );
        T value( *ptr );
        delete ptr;
        return value;
    }
};

template < class T >
struct Conversion< ::std::shared_ptr< T > >
{
    static _baseRef
    toBaseRef( ::std::shared_ptr< T > ptr )
    {
        return !ptr ? 0
                    : reinterpret_cast< _baseRef >( new ::std::shared_ptr< T >( ::std::move( ptr ) ) );
    }

    static _baseRef
    referenceBaseRef( const ::std::shared_ptr< T >& t )
    {
        return reinterpret_cast< _baseRef >( &t );
    }

    static ::std::shared_ptr< T >
    toCpp( _baseRef ref )
    {
        if ( ref == 0 )
        {
            return {};
        }
        return *reinterpret_cast< ::std::shared_ptr< T >* >( ref );
    }

    static ::std::shared_ptr< T >
    toCppReturn( _baseRef ref )
    {
        if ( ref == 0 )
        {
            return {};
        }
        auto ptr_ptr = reinterpret_cast< ::std::shared_ptr< T >* >( ref );
        ::std::shared_ptr< T > ptr( ::std::move( *ptr_ptr ) );
        delete ptr_ptr;
        return ptr;
    }
};

namespace
{

template<class Clock, class Duration>
double
time_point_to_seconds_since_epoch(const std::chrono::time_point<Clock, Duration>& timestamp) {
    // Double can represent an integer up to 52 bits without a loss of precision. For big 64-bit
    // integers there is a loss, so those should be divided as integers, not as doubles.

    using namespace std::chrono;
    auto time_since_epoch_scaled = timestamp.time_since_epoch().count() * Clock::period::num;

    auto division_results = std::lldiv(time_since_epoch_scaled, Clock::period::den);
    return static_cast<double>(division_results.quot) +
        static_cast<double>(division_results.rem) / Clock::period::den;
}

template<class Clock, class Duration >
std::chrono::time_point<Clock, Duration>
seconds_since_epoch_to_time_point(double seconds_since_epoch) {
    // Double can represent an integer up to 52 bits without a loss of precision. For big 64-bit
    // integers there is a loss, so those should be multiplied as integers, not as doubles.

    using namespace std::chrono;
    auto time_since_epoch_scaled = seconds_since_epoch / Clock::period::num;
    auto integralPart = std::floor(time_since_epoch_scaled);
    auto decimalPart = time_since_epoch_scaled - integralPart;

    auto time_since_epoch =
        static_cast<int64_t>(integralPart) * Clock::period::den +
        static_cast<int64_t>(std::round( decimalPart * Clock::period::den));
    return time_point<Clock, Duration>(Duration(time_since_epoch));
}
}

template < class T >
struct Conversion< {{>common/InternalNamespace}}optional< T > >
{
    static _baseRef
    toBaseRef( {{>common/InternalNamespace}}optional< T > ptr )
    {
        return !ptr ? 0
                    : reinterpret_cast< _baseRef >(
                          new {{>common/InternalNamespace}}optional< T >( ::std::move( ptr ) ) );
    }

    static _baseRef
    referenceBaseRef( const {{>common/InternalNamespace}}optional< T >& t )
    {
        return reinterpret_cast< _baseRef >( &t );
    }

    static {{>common/InternalNamespace}}optional< T >
    toCpp( _baseRef ref )
    {
        if ( ref == 0 )
        {
            return {};
        }
        return *reinterpret_cast< {{>common/InternalNamespace}}optional< T >* >( ref );
    }

    static {{>common/InternalNamespace}}optional< T >
    toCppReturn( _baseRef ref )
    {
        if ( ref == 0 )
        {
            return {};
        }
        auto ptr_ptr = reinterpret_cast< {{>common/InternalNamespace}}optional< T >* >( ref );
        {{>common/InternalNamespace}}optional< T > ptr( ::std::move( *ptr_ptr ) );
        delete ptr_ptr;
        return ptr;
    }
};

template<class Clock, class Duration>
struct Conversion<std::chrono::time_point<Clock, Duration>> {
    static double
    toBaseRef(const std::chrono::time_point<Clock, Duration>& timestamp) {
        return time_point_to_seconds_since_epoch( timestamp );
    }

    static double
    toBaseRef(std::chrono::time_point<Clock, Duration>&& timestamp) {
        return time_point_to_seconds_since_epoch( timestamp );
    }

    static double
    referenceBaseRef(const std::chrono::time_point<Clock, Duration>& timestamp) {
        return time_point_to_seconds_since_epoch( timestamp );
    }

    static std::chrono::time_point<Clock, Duration>
    toCpp( double seconds_since_epoch )
    {
        return seconds_since_epoch_to_time_point<Clock, Duration>(seconds_since_epoch);
    }

    static std::chrono::time_point<Clock, Duration>
    toCppReturn( double seconds_since_epoch )
    {
        return seconds_since_epoch_to_time_point<Clock, Duration>(seconds_since_epoch);
    }
};

template<class Clock, class Duration>
struct Conversion<{{>common/InternalNamespace}}optional<std::chrono::time_point<Clock, Duration>>> {
    static _baseRef
    toBaseRef({{>common/InternalNamespace}}optional<std::chrono::time_point<Clock, Duration>> ptr) {
        if (!ptr) return 0;
        return reinterpret_cast<_baseRef>(
            new {{>common/InternalNamespace}}optional<double>(time_point_to_seconds_since_epoch(*ptr))
        );
    }

    static _baseRef
    referenceBaseRef(const {{>common/InternalNamespace}}optional<std::chrono::time_point<Clock, Duration>>& ptr) {
        return toBaseRef(ptr);
    }

    static {{>common/InternalNamespace}}optional<std::chrono::time_point<Clock, Duration>>
    toCpp(_baseRef ref) {
        if (ref == 0) return {};
        auto optional_double = *reinterpret_cast<{{>common/InternalNamespace}}optional<double>*>(ref);
        if (!optional_double) return {};
        return {{>common/InternalNamespace}}optional<std::chrono::time_point<Clock, Duration>>(
            seconds_since_epoch_to_time_point<Clock, Duration>(*optional_double)
        );
    }

    static {{>common/InternalNamespace}}optional<std::chrono::time_point<Clock, Duration>>
    toCppReturn(_baseRef ref) {
        if (ref == 0) return {};
        auto optional_ptr = reinterpret_cast<{{>common/InternalNamespace}}optional<double>*>(ref);
        auto result = !*optional_ptr
            ? {{>common/InternalNamespace}}optional<std::chrono::time_point<Clock, Duration>>{}
            : {{>common/InternalNamespace}}optional<std::chrono::time_point<Clock, Duration>>(
                seconds_since_epoch_to_time_point<Clock, Duration>(**optional_ptr)
            );
        delete optional_ptr;
        return result;
    }
};
