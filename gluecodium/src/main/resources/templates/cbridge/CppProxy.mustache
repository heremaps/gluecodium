{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
class {{name}}Proxy :{{#unless isFunctionalInterface}} public {{selfType.name}}::element_type,{{/unless}} public CachedProxyBase<{{name}}Proxy> {
public:
    {{name}}Proxy({{functionTableName}}&& functions)
     : mFunctions(std::move(functions))
    {
    }

    virtual ~{{name}}Proxy() {
        mFunctions.release(mFunctions.swift_pointer);
    }

    {{name}}Proxy(const {{name}}Proxy&) = delete;
    {{name}}Proxy& operator=(const {{name}}Proxy&) = delete;

    {{#each inheritedFunctions functions}}
    {{#if selfParameter}}
    {{cppReturnTypeName}} {{functionName}}({{joinPartial parameters "baseApiParameter" ", "}}){{!!
    }}{{#if isConst}} const{{/if}}{{#unless isFunctionalInterface}} override{{/unless}} {
{{#if isSkipped}}
        {{#if isReturningVoid error}}return {};{{/if}}{{#unless isReturningVoid}}return {};{{/unless}}
{{/if}}{{#unless isSkipped}}{{#if error}}
        auto _result_with_error = {{>swiftDelegateCall}};
        if (!_result_with_error.has_value)
        {
            return {{>errorConversion}}
        }
        {{#if isReturningVoid}}return {};{{/if}}{{!!
        }}{{#unless isReturningVoid}}auto _call_result = _result_with_error.returned_value;{{/unless}}
        {{/if}}{{#unless error}}
        {{#unless isReturningVoid}}auto _call_result = {{/unless}}{{>swiftDelegateCall}};
        {{/unless}}
        {{#unless isReturningVoid}}{{>returnConversion}}{{/unless}}{{/unless}}
    }
    {{/if}}
    {{/each}}

private:
    {{functionTableName}} mFunctions;
};

_baseRef {{name}}_create_proxy({{functionTableName}} functionTable) {
    auto proxy = {{name}}Proxy::get_proxy(std::move(functionTable));
    return proxy ? reinterpret_cast<_baseRef>(new {{selfType}}({{!!
    }}{{#unless isFunctionalInterface}}proxy{{/unless}}{{!!
    }}{{#if isFunctionalInterface}}std::bind(&{{name}}Proxy::operator(), proxy{{!!
    }}{{#functions.0.parameters}}, std::placeholders::_{{iter.index}}{{/functions.0.parameters}}){{/if}})) : 0;
}
{{#if isFunctionalInterface}}

_baseRef {{name}}_create_optional_proxy({{functionTableName}} functionTable) {
    auto proxy = {{name}}Proxy::get_proxy(std::move(functionTable));
    return proxy ? reinterpret_cast<_baseRef>(new (std::nothrow) {{>common/InternalNamespace}}optional<{{selfType}}>({{!!
    }}std::bind(&{{name}}Proxy::operator(), proxy{{!!
    }}{{#functions.0.parameters}}, std::placeholders::_{{iter.index}}{{/functions.0.parameters}}))) : 0;
}
{{/if}}

const void* {{name}}_get_swift_object_from_cache(_baseRef handle) {
    return handle ? {{name}}Proxy::get_swift_object(get_pointer<{{selfType}}>(handle){{#unless isFunctionalInterface}}->get(){{/unless}}) : nullptr;
}

{{+baseApiParameter}}{{#switch mappedType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{mappedType}}{{/case}}{{!!
    }}{{#case "ENUM"}}const {{mappedType}}{{/case}}{{!!
    }}{{#default}}const {{mappedType}}&{{/default}}{{!!
}}{{/switch}} {{name}}{{/baseApiParameter}}{{!!
}}{{+swiftParameter}}{{#switch mappedType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{name}}{{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<uint32_t>({{name}}){{/case}}{{!!
    }}{{#default}}Conversion<{{mappedType}}>::toBaseRef({{name}}){{/default}}{{!!
}}{{/switch}}{{/swiftParameter}}{{!!
}}{{+returnConversion}}{{#switch returnType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}return _call_result;{{/case}}{{!!
    }}{{#case "ENUM"}}return static_cast<{{returnType}}>(_call_result);{{/case}}{{!!
    }}{{#default}}return Conversion<{{returnType}}>::toCppReturn(_call_result);{{/default}}{{!!
}}{{/switch}}
{{/returnConversion}}{{!!
}}{{+errorConversion}}{{#switch error.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}_result_with_error.error_value;{{/case}}{{!!
    }}{{#case "ENUM"}}std::error_code{static_cast<{{error}}>(_result_with_error.error_value)};{{/case}}{{!!
    }}{{#default}}Conversion<{{error}}>::toCppReturn(_result_with_error.error_value);{{/default}}{{!!
}}{{/switch}}
{{/errorConversion}}{{!!
}}{{+swiftDelegateCall}}mFunctions.{{name}}(mFunctions.swift_pointer{{#if parameters}}, {{/if}}{{joinPartial parameters "swiftParameter" ", "}}){{/swiftDelegateCall}}
