{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
_baseRef {{resolveName}}_create_handle() {
    return reinterpret_cast<_baseRef>( new ( ::std::nothrow ) {{resolveName "C++"}}() );
}

void {{resolveName}}_release_handle(_baseRef handle) {
    delete get_pointer<{{resolveName "C++"}}>(handle);
}

_baseRef {{resolveName}}_iterator(_baseRef handle) {
    return reinterpret_cast<_baseRef>( new ( ::std::nothrow ) {{resolveName "C++"}}::iterator( get_pointer<{{resolveName "C++"}}>(handle)->begin() ) );
}

void {{resolveName}}_iterator_release_handle(_baseRef iterator_handle) {
    delete reinterpret_cast<{{resolveName "C++"}}::iterator*>( iterator_handle );
}

void {{resolveName}}_put(_baseRef handle, {{resolveName keyType}} key, {{resolveName valueType}} value) {
    (*get_pointer<{{resolveName "C++"}}>(handle)).emplace({{!!
    }}{{#set variableName="key" variableType=keyType map=this}}{{>ConvertToCpp}}{{/set}}, {{!!
    }}{{#set variableName="value" variableType=valueType map=this}}{{>ConvertToCpp}}{{/set}});
}

bool {{resolveName}}_iterator_is_valid(_baseRef handle, _baseRef iterator_handle) {
    return *reinterpret_cast<{{resolveName "C++"}}::iterator*>( iterator_handle ) != get_pointer<{{resolveName "C++"}}>(handle)->end();
}

void {{resolveName}}_iterator_increment(_baseRef iterator_handle) {
    ++*reinterpret_cast<{{resolveName "C++"}}::iterator*>( iterator_handle );
}

{{resolveName keyType}} {{resolveName}}_iterator_key(_baseRef iterator_handle) {
    auto& key = (*reinterpret_cast<{{resolveName "C++"}}::iterator*>( iterator_handle ))->first;
    return {{#set variableName="key" variableType=keyType map=this}}{{>ConvertFromCpp}}{{/set}};
}

{{resolveName valueType}} {{resolveName}}_iterator_value(_baseRef iterator_handle) {
    auto& value = (*reinterpret_cast<{{resolveName "C++"}}::iterator*>( iterator_handle ))->second;
    return {{#set variableName="value" variableType=valueType map=this}}{{>ConvertFromCpp}}{{/set}};
}

_baseRef {{resolveName}}_create_optional_handle() {
    return reinterpret_cast<_baseRef>( new ( ::std::nothrow ) {{>common/InternalNamespace}}optional<{{resolveName "C++"}}>( {{resolveName "C++"}}( ) ) );
}

void {{resolveName}}_release_optional_handle(_baseRef handle) {
    delete reinterpret_cast<{{>common/InternalNamespace}}optional<{{resolveName "C++"}}>*>( handle );
}

_baseRef {{resolveName}}_unwrap_optional_handle(_baseRef handle) {
    return reinterpret_cast<_baseRef>( &**reinterpret_cast<{{>common/InternalNamespace}}optional<{{resolveName "C++"}}>*>( handle ) );
}{{!!

}}{{+ConvertToCpp}}{{!!
}}{{#set typeRef=variableType}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}Conversion<{{resolveName typeRef "C++"}}>::toCpp({{variableName}}){{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}{{!!
}}static_cast<{{resolveName typeRef "C++"}}>({{variableName}}){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}{{variableName}}{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/set}}{{!!
}}{{/ConvertToCpp}}{{!!

}}{{+ConvertFromCpp}}{{!!
}}{{#set typeRef=variableType}}{{#ifPredicate typeRef "isComplexType"}}{{!!
}}Conversion<{{resolveName typeRef "C++"}}>::toBaseRef({{variableName}}){{/ifPredicate}}{{!!
}}{{#unlessPredicate typeRef "isComplexType"}}{{#instanceOf typeRef.type.actualType "LimeEnumeration"}}{{!!
}}static_cast<{{resolveName typeRef}}>({{variableName}}){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeEnumeration"}}{{variableName}}{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}}{{/set}}{{!!
}}{{/ConvertFromCpp}}
