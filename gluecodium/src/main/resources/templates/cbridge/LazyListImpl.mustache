{{!!
  !
  ! Copyright (C) 2016-2021 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>cbridge/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}

#ifdef __cplusplus
extern "C" {
#endif

void {{>lazyListPrefix}}_release_handle(_baseRef handle) {
    delete get_pointer<std::shared_ptr<{{resolveName listType "C++"}}>>(handle);
}

uint64_t {{>lazyListPrefix}}_get_size(_baseRef handle) {
    auto& vector = *get_pointer<std::shared_ptr<{{resolveName listType "C++"}}>>(handle);
    return vector->size();
}

{{resolveName elementType}} {{>lazyListPrefix}}_get(_baseRef handle, uint64_t index) {
    auto& vector = *get_pointer<std::shared_ptr<{{resolveName listType "C++"}}>>(handle);
    auto& result = {{>typeDereference}}vector->operator[](index);
    return {{#ifPredicate elementType "isComplexType"}}Conversion<{{resolveName elementType "C++"}}>::toBaseRef(result){{/ifPredicate}}{{!!
}}{{#unlessPredicate elementType "isComplexType"}}{{!!
}}{{#instanceOf elementType.type.actualType "LimeEnumeration"}}static_cast<{{resolveName elementType}}>(result){{/instanceOf}}{{!!
}}{{#notInstanceOf elementType.type.actualType "LimeEnumeration"}}result{{/notInstanceOf}}{{!!
}}{{/unlessPredicate}};
}

#ifdef __cplusplus
}
#endif{{!!

}}{{+lazyListPrefix}}{{resolveName container}}_{{resolveName elementType.type.actualType}}LazyList{{/lazyListPrefix}}{{!!

}}{{+typeDereference}}{{!!
}}{{#notInstanceOf elementType.type.actualType "LimeClass"}}{{#notInstanceOf elementType.type.actualType "LimeInterface"}}{{!!
}}*{{/notInstanceOf}}{{/notInstanceOf}}{{!!
}}{{/typeDereference}}
