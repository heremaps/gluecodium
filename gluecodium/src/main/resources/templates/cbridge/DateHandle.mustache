{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2019 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#include "{{>common/InternalInclude}}/Optional.h"
#include "cbridge/include/DateHandle.h"
#include "cbridge_internal/include/BaseHandleImpl.h"
#include <chrono>
#include <memory>
#include <new>

using namespace ::std::chrono;

_baseRef
chrono_time_point_create_optional_handle( double seconds_since_epoch )
{
    return reinterpret_cast< _baseRef >(
        new ( ::std::nothrow ) {{>common/InternalNamespace}}optional< system_clock::time_point >(
            seconds_since_epoch_to_time_point( seconds_since_epoch ) ) );
}

void
chrono_time_point_release_optional_handle( _baseRef handle )
{
    delete reinterpret_cast<{{>common/InternalNamespace}}optional< system_clock::time_point >* >(handle);
}

double
chrono_time_point_unwrap_optional_handle( _baseRef handle )
{
    auto& time_point = **reinterpret_cast< {{>common/InternalNamespace}}optional< system_clock::time_point >* >( handle );
    return time_point_to_seconds_since_epoch( time_point );
}
