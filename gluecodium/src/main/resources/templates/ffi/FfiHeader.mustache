{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#pragma once

#include "Export.h"
#include "OpaqueHandle.h"
{{#if classes lambdas logic="or"}}
#include "dart_api_dl.h"
{{/if}}
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

{{#model}}
{{>ffiClassHeader}}
{{/model}}

{{#classes}}
_GLUECODIUM_FFI_EXPORT void {{libraryName}}_{{resolveName}}_register_finalizer(
    FfiOpaqueHandle ffi_handle, int32_t isolate_id, Dart_Handle dart_handle);
_GLUECODIUM_FFI_EXPORT FfiOpaqueHandle {{libraryName}}_{{resolveName}}_copy_handle(FfiOpaqueHandle handle);
_GLUECODIUM_FFI_EXPORT void {{libraryName}}_{{resolveName}}_release_handle(FfiOpaqueHandle handle);
{{#if attributes.equatable}}{{>ffiEqualityFunctionDeclaration}}{{/if}}{{!!
}}{{#if attributes.pointerEquatable}}{{>ffiEqualityFunctionDeclaration}}{{/if}}
{{/classes}}

{{#lambdas}}
_GLUECODIUM_FFI_EXPORT FfiOpaqueHandle {{libraryName}}_{{resolveName}}_copy_handle(FfiOpaqueHandle handle);
_GLUECODIUM_FFI_EXPORT void {{libraryName}}_{{resolveName}}_release_handle(FfiOpaqueHandle handle);
{{#set type=this handleType="FfiOpaqueHandle"}}{{>ffi/FfiNullableDeclaration}}{{/set}}
{{/lambdas}}

{{#each interfaces lambdas}}
_GLUECODIUM_FFI_EXPORT FfiOpaqueHandle {{libraryName}}_{{resolveName}}_create_proxy({{!!
}}uint64_t token, int32_t isolate_id, Dart_Handle dart_handle{{!!
}}{{#each inheritedFunctions functions}}{{#unless attributes.dart.skip isStatic logic="and"}}{{!!
}}, FfiOpaqueHandle f{{iter.position}}{{/unless}}{{/each}}{{!!
}}{{#each inheritedProperties properties}}{{#unless attributes.dart.skip isStatic logic="and"}}, FfiOpaqueHandle p{{iter.position}}g{{!!
}}{{#if setter}}, FfiOpaqueHandle p{{iter.position}}s{{/if}}{{/unless}}{{/each}});
{{/each}}

{{#each nonExternalStructs externalStructs}}
_GLUECODIUM_FFI_EXPORT FfiOpaqueHandle {{libraryName}}_{{resolveName}}_create_handle({{#fields}}{{resolveName typeRef}}{{#if iter.hasNext}}, {{/if}}{{/fields}});
_GLUECODIUM_FFI_EXPORT void {{libraryName}}_{{resolveName}}_release_handle(FfiOpaqueHandle handle);
{{#set parent=this}}{{#fields}}
_GLUECODIUM_FFI_EXPORT {{resolveName typeRef}} {{libraryName}}_{{resolveName parent}}_get_field_{{resolveName}}(FfiOpaqueHandle handle);
{{/fields}}{{/set}}
{{#set type=this handleType="FfiOpaqueHandle"}}{{>ffi/FfiNullableDeclaration}}{{/set}}
{{/each}}

{{#enums}}
{{#set type=this handleType="uint32_t"}}{{>ffi/FfiNullableDeclaration}}{{/set}}
{{/enums}}

{{#typeRepositories}}
_GLUECODIUM_FFI_EXPORT FfiOpaqueHandle {{libraryName}}_{{resolveName}}_get_type_id(FfiOpaqueHandle handle);
{{/typeRepositories}}

#ifdef __cplusplus
}
#endif{{!!

}}{{+ffiFunctionDeclaration}}
{{#if thrownType}}
_GLUECODIUM_FFI_EXPORT void {{libraryName}}_{{resolveName}}_return_release_handle(FfiOpaqueHandle handle);{{#isNotEq returnType.typeRef.type.name "Void"}}
_GLUECODIUM_FFI_EXPORT {{resolveName returnType.typeRef}} {{libraryName}}_{{resolveName}}_return_get_result(FfiOpaqueHandle handle);{{/isNotEq}}
_GLUECODIUM_FFI_EXPORT {{resolveName exception.errorType}} {{libraryName}}_{{resolveName}}_return_get_error(FfiOpaqueHandle handle);
_GLUECODIUM_FFI_EXPORT bool {{libraryName}}_{{resolveName}}_return_has_error(FfiOpaqueHandle handle);

_GLUECODIUM_FFI_EXPORT FfiOpaqueHandle{{/if}}{{!!
}}{{#unless thrownType}}_GLUECODIUM_FFI_EXPORT {{resolveName returnType.typeRef}}{{/unless}} {{libraryName}}_{{resolveName}}({{!!
}}{{#unless isStatic}}FfiOpaqueHandle _self, {{/unless}}int32_t _isolate_id{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{/ffiFunctionDeclaration}}{{!!

}}{{+ffiEqualityFunctionDeclaration}}
_GLUECODIUM_FFI_EXPORT bool {{libraryName}}_{{resolveName}}_are_equal(FfiOpaqueHandle handle1, FfiOpaqueHandle handle2);
{{/ffiEqualityFunctionDeclaration}}{{!!

}}{{+ffiClassHeader}}
{{#functions}}{{#unless attributes.dart.skip}}
{{>ffiFunctionDeclaration}}
{{/unless}}{{/functions}}
{{#properties}}{{#unless attributes.dart.skip}}{{#getter}}
{{>ffiFunctionDeclaration}}
{{/getter}}{{#setter}}
{{>ffiFunctionDeclaration}}
{{/setter}}
{{/unless}}{{/properties}}
{{#structs}}
{{#functions}}{{#unless attributes.dart.skip}}
{{>ffiFunctionDeclaration}}
{{/unless}}{{/functions}}
{{/structs}}
{{#this.lambdas}}{{#asFunction}}
{{>ffiFunctionDeclaration}}
{{/asFunction}}{{/this.lambdas}}
{{#each classes interfaces}}
{{>ffiClassHeader}}
{{/each}}
{{/ffiClassHeader}}
