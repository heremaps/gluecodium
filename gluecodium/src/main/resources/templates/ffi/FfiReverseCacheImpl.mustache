{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#include "ReverseCache.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace ffi
{

std::unordered_map<ReverseCacheKey, uint64_t, ReverseCacheKeyHash> _reverse_cache{};
std::mutex _reverse_cache_mutex{};

uint64_t
get_cached_token(void* raw_pointer, int32_t isolate_id) {
    const std::lock_guard<std::mutex> lock(_reverse_cache_mutex);
    auto iter = _reverse_cache.find({raw_pointer, isolate_id});
    return (iter != _reverse_cache.end()) ? iter->second : 0;
}

void
cache_token(void* raw_pointer, int32_t isolate_id, uint64_t token) {
    const std::lock_guard<std::mutex> lock(_reverse_cache_mutex);
    _reverse_cache[{raw_pointer, isolate_id}] = token;
}

void
remove_cached_token(void* raw_pointer, int32_t isolate_id) {
    const std::lock_guard<std::mutex> lock(_reverse_cache_mutex);
    _reverse_cache.erase({raw_pointer, isolate_id});
}

}
{{#internalNamespace}}
}
{{/internalNamespace}}

#ifdef __cplusplus
extern "C" {
#endif

uint64_t
{{libraryName}}_get_cached_token(FfiOpaqueHandle handle, int32_t isolate_id) {
    auto ptr_ptr = reinterpret_cast<std::shared_ptr<void>*>(handle);
    return {{>ffi/FfiInternal}}::get_cached_token(ptr_ptr->get(), isolate_id);
}

void
{{libraryName}}_cache_token(FfiOpaqueHandle handle, int32_t isolate_id, uint64_t token) {
    auto ptr_ptr = reinterpret_cast<std::shared_ptr<void>*>(handle);
    {{>ffi/FfiInternal}}::cache_token(ptr_ptr->get(), isolate_id, token);
}

void
{{libraryName}}_uncache_token(FfiOpaqueHandle handle, int32_t isolate_id) {
    auto ptr_ptr = reinterpret_cast<std::shared_ptr<void>*>(handle);
    {{>ffi/FfiInternal}}::remove_cached_token(ptr_ptr->get(), isolate_id);
}

#ifdef __cplusplus
}
#endif
