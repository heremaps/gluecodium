{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#include "NullableHandles.h"

#include "ConversionBase.h"
#include "{{>common/InternalInclude}}Optional.h"
#include <new>

#ifdef __cplusplus
extern "C" {
#endif

{{#builtInTypes}}
FfiOpaqueHandle
{{this}}_create_handle_nullable({{resolveName}} value)
{
    return reinterpret_cast<FfiOpaqueHandle>(
        new (std::nothrow) {{#internalNamespace}}{{.}}::{{/internalNamespace}}optional<{{resolveName "C++"}}>(
            {{#unless isNumericType}}{{#isNotEq toString "Boolean"}}{{!!
            }}{{>ffi/FfiInternal}}::Conversion<{{resolveName "C++"}}>::toCpp{{/isNotEq}}{{/unless}}(value)
        )
    );
}

void
{{this}}_release_handle_nullable(FfiOpaqueHandle handle)
{
    delete reinterpret_cast<{{#internalNamespace}}{{.}}::{{/internalNamespace}}optional<{{resolveName "C++"}}>*>(handle);
}

{{resolveName}}
{{this}}_get_value_nullable(FfiOpaqueHandle handle)
{
    return {{#unless isNumericType}}{{#isNotEq toString "Boolean"}}{{!!
    }}{{>ffi/FfiInternal}}::Conversion<{{resolveName "C++"}}>::toFfi{{/isNotEq}}{{/unless}}(
        **reinterpret_cast<{{#internalNamespace}}{{.}}::{{/internalNamespace}}optional<{{resolveName "C++"}}>*>(handle)
    );
}
{{/builtInTypes}}

#ifdef __cplusplus
}
#endif
