{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#pragma once

#include "Export.h"
#include "OpaqueHandle.h"
#include <memory>
#include <mutex>
#include <string>
#include <unordered_map>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace ffi
{
struct ReverseCacheKey
{
    void* raw_pointer;
    int32_t isolate_id;

    bool
    operator==(const ReverseCacheKey& other) const {
        return raw_pointer == other.raw_pointer && isolate_id == other.isolate_id;
    }
};

struct ReverseCacheKeyHash
{
    inline size_t
    operator()(const ReverseCacheKey& key) const {
        size_t result = 7;
        result = 31 * result + reinterpret_cast<size_t>(key.raw_pointer);
        result = 31 * result + key.isolate_id;
        return result;
    }
};

extern std::unordered_map<ReverseCacheKey, uint64_t, ReverseCacheKeyHash> _reverse_cache;
extern std::mutex _reverse_cache_mutex;

uint64_t get_cached_token(void* raw_pointer, int32_t isolate_id);

void cache_token(void* raw_pointer, int32_t isolate_id, uint64_t token);

void remove_cached_token(void* raw_pointer, int32_t isolate_id);

}
{{#internalNamespace}}
}
{{/internalNamespace}}

#ifdef __cplusplus
extern "C" {
#endif

_GLUECODIUM_FFI_EXPORT uint64_t {{libraryName}}_get_cached_token(FfiOpaqueHandle handle, int32_t isolate_id);
_GLUECODIUM_FFI_EXPORT void {{libraryName}}_cache_token(FfiOpaqueHandle handle, int32_t isolate_id, uint64_t token);
_GLUECODIUM_FFI_EXPORT void {{libraryName}}_uncache_token(FfiOpaqueHandle handle, int32_t isolate_id);

#ifdef __cplusplus
}
#endif
