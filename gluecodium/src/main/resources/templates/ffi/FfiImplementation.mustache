{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#include "{{headerName}}.h"

#include "ConversionBase.h"
{{#if classes}}
#include "InstanceCache.h"
{{/if}}
{{#if classes lambdas asyncHelpers.lambdas logic="or"}}
#include "FinalizerData.h"
{{/if}}
{{#includes}}
{{>common/Include}}
{{/includes}}
#include <memory>
#include <new>

{{#interfaces}}
{{>ffi/FfiProxyDeclaration}}

{{/interfaces}}
{{#set isLambda=true}}{{#each lambdas asyncHelpers.lambdas}}
{{>ffi/FfiProxyDeclaration}}

{{/each}}{{/set}}

#ifdef __cplusplus
extern "C" {
#endif

{{#model}}
{{>ffiClassImpl}}
{{/model}}

{{#each classes lambdas}}
// "Private" finalizer, not exposed to be callable from Dart.
void
{{libraryName}}_{{resolveName}}_finalizer(FfiOpaqueHandle handle, int32_t isolate_id) {
{{#notInstanceOf this "LimeLambda"}}{{#unless this.attributes.nocache}}
    auto ptr_ptr = reinterpret_cast<{{>cppHandleType}}*>(handle);
    {{libraryName}}_uncache_dart_handle_by_raw_pointer(ptr_ptr->get(), isolate_id);
{{/unless}}{{/notInstanceOf}}
    {{libraryName}}_{{resolveName}}_release_handle(handle);
}

void
{{libraryName}}_{{resolveName}}_register_finalizer(FfiOpaqueHandle ffi_handle, int32_t isolate_id, Dart_Handle dart_handle) {
    FinalizerData* data = new (std::nothrow) FinalizerData{ffi_handle, isolate_id, &{{libraryName}}_{{resolveName}}_finalizer};
    Dart_NewFinalizableHandle_DL(dart_handle, data, sizeof data, &{{libraryName}}_execute_finalizer);
}

FfiOpaqueHandle
{{libraryName}}_{{resolveName}}_copy_handle(FfiOpaqueHandle handle) {
    return reinterpret_cast<FfiOpaqueHandle>(
        new (std::nothrow) {{>cppHandleType}}(
            *reinterpret_cast<{{>cppHandleType}}*>(handle)
        )
    );
}

void
{{libraryName}}_{{resolveName}}_release_handle(FfiOpaqueHandle handle) {
    delete reinterpret_cast<{{>cppHandleType}}*>(handle);
}

{{#if attributes.equatable}}{{>ffiEqualityFunction}}{{/if}}{{!!
}}{{#if attributes.pointerEquatable}}{{>ffiEqualityFunction}}{{/if}}{{!!
}}{{#instanceOf this "LimeLambda"}}{{#set type=this handleType="FfiOpaqueHandle"}}{{>ffi/FfiNullableImpl}}{{/set}}

{{/instanceOf}}
{{/each}}
{{#asyncHelpers.lambdas}}
void
{{libraryName}}_{{resolveName}}_release_handle(FfiOpaqueHandle handle) {
    delete reinterpret_cast<{{>cpp/CppLambdaType}}*>(handle);
}
{{/asyncHelpers.lambdas}}

{{#interfaces}}
FfiOpaqueHandle
{{libraryName}}_{{resolveName}}_create_proxy(uint64_t token, int32_t isolate_id, Dart_Handle dart_handle{{!!
}}{{#each inheritedFunctions functions}}{{#unless isStatic}}{{#ifPredicate "shouldRetain"}}{{!!
}}, FfiOpaqueHandle f{{iter.position}}{{/ifPredicate}}{{/unless}}{{/each}}{{!!
}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#ifPredicate "shouldRetain"}}, FfiOpaqueHandle p{{iter.position}}g{{!!
}}{{#if setter}}{{#ifPredicate setter "shouldRetain"}}, FfiOpaqueHandle p{{iter.position}}s{{/ifPredicate}}{{/if}}{{!!
}}{{/ifPredicate}}{{/unless}}{{/each}}) {
{{#unless this.attributes.nocache}}
    auto cached_proxy = {{>ffi/FfiInternal}}::get_cached_proxy<{{resolveName}}_Proxy>(token, isolate_id, "{{resolveName}}");
{{/unless}}
    std::shared_ptr<{{resolveName}}_Proxy>* proxy_ptr;
{{#unless this.attributes.nocache}}
    if (cached_proxy) {
        proxy_ptr = new (std::nothrow) std::shared_ptr<{{resolveName}}_Proxy>(cached_proxy);
    } else {
{{/unless}}
        proxy_ptr = new (std::nothrow) std::shared_ptr<{{resolveName}}_Proxy>(
            new (std::nothrow) {{resolveName}}_Proxy(token, isolate_id, dart_handle{{!!
            }}{{#each inheritedFunctions functions}}{{#unless isStatic}}{{#ifPredicate "shouldRetain"}}{{!!
            }}, f{{iter.position}}{{/ifPredicate}}{{/unless}}{{/each}}{{!!
            }}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#ifPredicate "shouldRetain"}}, p{{iter.position}}g{{!!
            }}{{#if setter}}{{#ifPredicate setter "shouldRetain"}}, p{{iter.position}}s{{/ifPredicate}}{{/if}}{{/ifPredicate}}{{/unless}}{{/each}})
        );
{{#unless this.attributes.nocache}}
        {{>ffi/FfiInternal}}::cache_proxy(token, isolate_id, "{{resolveName}}", *proxy_ptr);
    }
{{/unless}}

    return reinterpret_cast<FfiOpaqueHandle>(proxy_ptr);
}

{{/interfaces}}

{{+ffiLambdaProxy}}
FfiOpaqueHandle
{{libraryName}}_{{resolveName}}_create_proxy(uint64_t token, int32_t isolate_id, Dart_Handle dart_handle, FfiOpaqueHandle f0) {
{{#if this.attributes.nocache}}
    auto cached_proxy = std::make_shared<{{resolveName}}_Proxy>(token, isolate_id, dart_handle, f0);
{{/if}}{{#unless this.attributes.nocache}}
    auto cached_proxy = {{>ffi/FfiInternal}}::get_cached_proxy<{{resolveName}}_Proxy>(token, isolate_id, "{{resolveName}}");
    if (!cached_proxy) {
        cached_proxy = std::make_shared<{{resolveName}}_Proxy>(token, isolate_id, dart_handle, f0);
        {{>ffi/FfiInternal}}::cache_proxy(token, isolate_id, "{{resolveName}}", cached_proxy);
    }
{{/unless}}

    return reinterpret_cast<FfiOpaqueHandle>(
        new {{#if isAsyncLambda}}{{>cpp/CppLambdaType}}{{/if}}{{#unless isAsyncLambda}}{{resolveName "C++"}}{{/unless}}(
            std::bind(&{{resolveName}}_Proxy::operator(), cached_proxy{{#parameters}}, std::placeholders::_{{iter.index}}{{/parameters}})
        )
    );
}

{{/ffiLambdaProxy}}{{!!

}}{{#lambdas}}
{{>ffiLambdaProxy}}
{{/lambdas}}
{{#asyncHelpers.lambdas}}{{#set isAsyncLambda=true self=this}}{{#self}}
{{>ffiLambdaProxy}}
{{/self}}{{/set}}{{/asyncHelpers.lambdas}}

{{#structs}}
FfiOpaqueHandle
{{libraryName}}_{{resolveName}}_create_handle({{!!
}}{{#filter fields predicate="shouldRetain"}}{{#this}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/this}}{{/filter}}{{!!
}}) {
{{#ifPredicate "hasImmutableFields"}}
    auto _result = new (std::nothrow) {{resolveName "C++"}}({{!!
    }}{{#if allFieldsConstructor}}{{#allFieldsConstructor}}{{>immutableFieldsParameters}}{{/allFieldsConstructor}}{{/if}}{{!!
    }}{{#unless allFieldsConstructor}}{{>immutableFieldsParameters}}{{/unless}});
{{/ifPredicate}}
{{#unlessPredicate "hasImmutableFields"}}
    auto _result = new (std::nothrow) {{resolveName "C++"}}();
{{#set struct=this}}{{#fields}}{{#ifPredicate "shouldRetain"}}{{>ffiSetCppField}}{{/ifPredicate}}{{/fields}}{{/set}}
{{/unlessPredicate}}
    return reinterpret_cast<FfiOpaqueHandle>(_result);
}

{{>ffiStructReleaseAndGetters}}
{{/structs}}

{{#enums}}
{{#set type=this handleType="uint32_t"}}{{>ffi/FfiNullableImpl}}{{/set}}
{{/enums}}

{{#typeRepositories}}
FfiOpaqueHandle
{{libraryName}}_{{resolveName}}_get_type_id(FfiOpaqueHandle handle) {
    const auto& type_id = {{>common/InternalNamespace}}get_type_repository().{{!!
    }}get_id(reinterpret_cast<std::shared_ptr<{{resolveName "C++"}}>*>(handle)->get());
    return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) std::string(type_id));
}
{{/typeRepositories}}

#ifdef __cplusplus
}
#endif{{!!

}}{{+ffiStructReleaseAndGetters}}
void
{{libraryName}}_{{resolveName}}_release_handle(FfiOpaqueHandle handle) {
    delete reinterpret_cast<{{resolveName "C++"}}*>(handle);
}

{{#set parent=this}}{{#fields}}{{#ifPredicate "shouldRetain"}}
{{resolveName typeRef}}
{{libraryName}}_{{resolveName parent}}_get_field_{{resolveName}}(FfiOpaqueHandle handle) {
    return {{#if typeRef.attributes.optimized}}{{!!
    }}reinterpret_cast<FfiOpaqueHandle>(
        new (std::nothrow) std::shared_ptr<{{resolveName typeRef "C++"}}>(
            new (std::nothrow) {{resolveName typeRef "C++"}}(
                reinterpret_cast<{{resolveName parent "C++"}}*>(handle)->{{resolveName "C++"}}
            )
        )
    );{{/if}}{{#unless typeRef.attributes.optimized}}{{>ffi/FfiInternal}}::Conversion<{{resolveName typeRef "C++"}}>::toFfi(
        reinterpret_cast<{{resolveName parent "C++"}}*>(handle)->{{resolveName "C++"}}
    );{{/unless}}
}

{{/ifPredicate}}{{/fields}}{{/set}}

{{#set type=this handleType="FfiOpaqueHandle"}}{{>ffi/FfiNullableImpl}}{{/set}}

{{/ffiStructReleaseAndGetters}}{{!!

}}{{+ffiFunctionBody}}{{#if this.thrownType}}
void
{{>ffi/FfiFunctionName}}_return_release_handle(FfiOpaqueHandle handle) {
    delete reinterpret_cast<{{>ffiErrorReturnType}}*>(handle);
}

{{#unless returnType.isVoid}}{{resolveName returnType.typeRef}}
{{>ffi/FfiFunctionName}}_return_get_result(FfiOpaqueHandle handle) {
    return {{>ffi/FfiInternal}}::Conversion<{{resolveName returnType.typeRef "C++"}}>::toFfi(
        reinterpret_cast<{{>ffiErrorReturnType}}*>(handle)->unsafe_value()
    );
}
{{/unless}}

{{resolveName exception.errorType}}
{{>ffi/FfiFunctionName}}_return_get_error(FfiOpaqueHandle handle) {
    return {{>ffi/FfiInternal}}::Conversion<{{resolveName exception.errorType "C++"}}>::toFfi(
        reinterpret_cast<{{>ffiErrorReturnType}}*>(handle)->error()
    );
}

bool
{{>ffi/FfiFunctionName}}_return_has_error(FfiOpaqueHandle handle) {
    return !reinterpret_cast<{{>ffiErrorReturnType}}*>(handle)->has_value();
}

FfiOpaqueHandle
{{>ffi/FfiFunctionName}}({{#unless isStatic}}FfiOpaqueHandle _self, {{/unless}}int32_t _isolate_id{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}) {
    {{>ffi/FfiInternal}}::IsolateContext _isolate_context(_isolate_id);
    auto&& _cpp_call_result = {{prefixPartial "ffiCallCppFunction" "    " skipFirstLine=true}};
{{#instanceOf exception.errorType.type.actualType "LimeEnumeration"}}{{!!
}}{{#if returnType.isVoid}}
    if (_cpp_call_result.value() == 0) {
        return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) {{>ffiErrorReturnType}}(true));
    }
    auto _error_code = _cpp_call_result;
{{/if}}{{#unless returnType.isVoid}}
    if (_cpp_call_result.has_value()) {
        return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) {{>ffiErrorReturnType}}(
            std::forward<{{resolveName returnType.typeRef "C++"}}>(_cpp_call_result.unsafe_value())
        ));
    }
    auto _error_code = _cpp_call_result.error();
{{/unless}}
    return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) {{>ffiErrorReturnType}}(
        static_cast<{{resolveName exception.errorType "C++"}}>(_error_code.value())
    ));
{{/instanceOf}}{{#notInstanceOf exception.errorType.type.actualType "LimeEnumeration"}}
    return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) {{>ffiErrorReturnType}}(
        std::forward<{{>ffiErrorReturnType}}>(_cpp_call_result)
    ));
{{/notInstanceOf}}
}
{{/if}}{{!!

}}{{#unless this.thrownType}}
{{resolveName returnType.typeRef}}
{{>ffi/FfiFunctionName}}({{#unless isStatic}}FfiOpaqueHandle _self, {{/unless}}int32_t _isolate_id{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}) {
    {{>ffi/FfiInternal}}::IsolateContext _isolate_context(_isolate_id);
{{#if returnType.isVoid}}{{prefixPartial "ffiCallCppFunction" "    "}};{{/if}}{{!!
}}{{#unless returnType.isVoid}}    return {{#if returnType.typeRef.attributes.optimized}}{{!!
    }}reinterpret_cast<FfiOpaqueHandle>(
        new (std::nothrow) std::shared_ptr<{{resolveName returnType.typeRef "C++"}}>(
            new (std::nothrow) {{resolveName returnType.typeRef "C++"}}(
{{prefixPartial "ffiCallCppFunction" "                "}}
            )
        )
    );{{/if}}{{#unless returnType.typeRef.attributes.optimized}}{{!!
    }}{{>ffi/FfiInternal}}::Conversion<{{resolveName returnType.typeRef "C++"}}>::toFfi(
{{prefixPartial "ffiCallCppFunction" "        "}}
    );{{/unless}}{{/unless}}
}
{{/unless}}{{/ffiFunctionBody}}{{!!

}}{{+selfReferenceConversion}}{{#instanceOf parent "LimeStruct"}}{{!!
}}{{>ffi/FfiInternal}}::Conversion<{{resolveName parent "C++"}}>::toCpp(_self){{/instanceOf}}{{#notInstanceOf parent "LimeStruct"}}{{!!
}}{{#instanceOf parent "LimeLambda"}}{{>ffi/FfiInternal}}::Conversion<{{#if isAsyncLambda}}{{>cpp/CppLambdaType}}{{/if}}{{!!
}}{{#unless isAsyncLambda}}{{resolveName parent "C++"}}{{/unless}}>::toCpp(_self){{/instanceOf}}{{!!
}}{{#notInstanceOf parent "LimeLambda"}}(*{{>ffi/FfiInternal}}::Conversion<std::shared_ptr<{{resolveName parent "C++"}}>>::toCpp(_self)){{!!
}}{{/notInstanceOf}}{{/notInstanceOf}}{{/selfReferenceConversion}}{{!!

}}{{+ffiParameter}}    {{>ffi/FfiInternal}}::Conversion<{{!!
}}{{#if isAsyncHelper}}{{#if iter.isFirst}}{{#original}}{{>cpp/CppCompleterCallback}}{{/original}}{{/if}}{{!!
}}{{#unless iter.isFirst}}{{resolveName typeRef "C++"}}{{/unless}}{{/if}}{{!!
}}{{#unless isAsyncHelper}}{{resolveName typeRef "C++"}}{{/unless}}>::toCpp({{resolveName}}){{/ffiParameter}}{{!!

}}{{+ffiFieldToCpp}}{{>ffi/FfiInternal}}::Conversion<{{resolveName typeRef "C++"}}>::toCpp({{resolveName}}){{/ffiFieldToCpp}}{{!!

}}{{+immutableFieldsParameters}}{{#fields}}{{#ifPredicate "shouldRetain"}}{{>ffiFieldToCpp}}{{/ifPredicate}}{{!!
}}{{#unlessPredicate "shouldRetain"}}{{resolveName defaultValue "C++"}}{{/unlessPredicate}}{{!!
}}{{#if iter.hasNext}}, {{/if}}{{/fields}}{{/immutableFieldsParameters}}{{!!

}}{{+ffiCallCppFunction}}{{!!
}}{{#if isStatic}}{{resolveName parent "C++"}}::{{/if}}{{!!
}}{{#unless isStatic}}{{>selfReferenceConversion}}.{{/unless}}{{!!
}}{{resolveName "C++"}}({{#if parameters}}
{{#parameters}}{{>ffiParameter}}{{#if iter.hasNext}},
{{/if}}{{/parameters}}
{{/if}}){{!!
}}{{/ffiCallCppFunction}}{{!!

}}{{+ffiErrorReturnType}}{{#internalNamespace}}{{.}}::{{/internalNamespace}}Return<{{!!
}}{{resolveName returnType.typeRef "C++"}}, {{resolveName exception.errorType "C++"}}>{{/ffiErrorReturnType}}{{!!

}}{{+ffiEqualityFunction}}

bool
{{libraryName}}_{{resolveName}}_are_equal(FfiOpaqueHandle handle1, FfiOpaqueHandle handle2) {
    bool isNull1 = handle1 == 0;
    bool isNull2 = handle2 == 0;
    if (isNull1 && isNull2) return true;
    if (isNull1 || isNull2) return false;
    return {{#if attributes.equatable}}*{{/if}}*reinterpret_cast<std::shared_ptr<{{resolveName "C++"}}>*>(handle1) ==
        {{#if attributes.equatable}}*{{/if}}*reinterpret_cast<std::shared_ptr<{{resolveName "C++"}}>*>(handle2);
}
{{/ffiEqualityFunction}}{{!!

}}{{+ffiClassImpl}}
{{#set parent=this container=this}}{{#functions}}{{>ffiFunction}}{{/functions}}
{{#properties}}{{>ffiProperty}}{{/properties}}
{{#set isInherited=true}}
{{#container.interfaceInheritedFunctions}}{{>ffiFunction}}{{/container.interfaceInheritedFunctions}}
{{#container.interfaceInheritedProperties}}{{>ffiProperty}}{{/container.interfaceInheritedProperties}}
{{/set}}{{/set}}

{{#structs}}
{{#set parent=this}}{{#functions}}{{>ffiFunction}}{{/functions}}{{/set}}
{{/structs}}

{{#this.lambdas}}{{#set parent=this}}{{#asFunction}}
{{>ffiFunctionBody}}
{{/asFunction}}{{/set}}{{/this.lambdas}}
{{#asyncHelpers.lambdas}}{{#set parent=this isAsyncLambda=true}}{{#asFunction}}
{{>ffiFunctionBody}}
{{/asFunction}}{{/set}}{{/asyncHelpers.lambdas}}

{{#each classes interfaces}}
{{>ffiClassImpl}}
{{/each}}
{{/ffiClassImpl}}{{!!

}}{{+cppHandleType}}{{#instanceOf this "LimeLambda"}}{{resolveName "C++"}}{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeLambda"}}std::shared_ptr<{{resolveName "C++"}}>{{/notInstanceOf}}{{/cppHandleType}}{{!!

}}{{+ffiSetCppField}}
{{#if struct.attributes.cpp.accessors}}
    _result->{{resolveName this "C++" "setter"}}({{>ffiFieldToCpp}});
{{/if}}{{#unless struct.attributes.cpp.accessors}}{{#if external.cpp.setterName}}
    _result->{{resolveName this "C++" "setter"}}({{>ffiFieldToCpp}});
{{/if}}{{#unless external.cpp.setterName}}
    _result->{{resolveName "C++"}} = {{>ffiFieldToCpp}};
{{/unless}}{{/unless}}
{{/ffiSetCppField}}{{!!

}}{{+ffiFunction}}{{#ifPredicate "shouldRetain"}}{{#if attributes.async}}{{#set isAsyncHelper=true original=this}}
{{#eval "asyncHelpers.helpers" fullName}}{{>ffiFunctionBody}}{{/eval}}
{{/set}}{{/if}}{{#unless attributes.async}}
{{>ffiFunctionBody}}
{{/unless}}{{/ifPredicate}}{{/ffiFunction}}{{!!

}}{{+ffiProperty}}{{#ifPredicate "shouldRetain"}}{{#getter}}
{{>ffiFunctionBody}}
{{/getter}}{{#setter}}{{#ifPredicate "shouldRetain"}}
{{>ffiFunctionBody}}
{{/ifPredicate}}{{/setter}}
{{/ifPredicate}}{{/ffiProperty}}
