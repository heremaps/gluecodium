{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#include "{{headerName}}.h"

#include "ConversionBase.h"
{{#includes}}
{{>common/Include}}
{{/includes}}
#include <memory>
#include <new>

#ifdef __cplusplus
extern "C" {
#endif

{{#model}}
{{#set parent=this}}{{#functions}}
{{>ffiFunction}}
{{/functions}}
{{#properties}}{{#getter}}
{{>ffiFunction}}
{{/getter}}{{#setter}}
{{>ffiFunction}}
{{/setter}}
{{/properties}}{{/set}}
{{#structs}}
{{#set parent=this}}{{#functions}}
{{>ffiFunction}}
{{/functions}}{{/set}}
{{/structs}}
{{/model}}

{{#classes}}
void
{{resolveName}}_release_handle(FfiOpaqueHandle handle) {
    delete reinterpret_cast<std::shared_ptr<{{resolveName "C++"}}>*>(handle);
}
{{/classes}}

{{#nonExternalStructs}}
FfiOpaqueHandle
{{resolveName}}_create_handle({{#fields}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/fields}}) {
    auto _result = new (std::nothrow) {{resolveName "C++"}}({{joinPartial fields "ffiFieldToCpp" ", "}});
    return reinterpret_cast<FfiOpaqueHandle>(_result);
}

{{>ffiStructReleaseAndGetters}}
{{/nonExternalStructs}}
{{#externalStructs}}
FfiOpaqueHandle
{{resolveName}}_create_handle({{#fields}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/fields}}) {
    auto _result = new (std::nothrow) {{resolveName "C++"}}();
{{#set parent=this}}{{#fields}}
{{#ifHasAttribute parent "cpp" "Accessors"}}
    _result->{{resolveName this "C++" "setter"}}({{>ffiFieldToCpp}});
{{/ifHasAttribute}}{{#unlessHasAttribute parent "cpp" "Accessors"}}{{#ifHasAttribute "cpp" "ExternalSetter"}}
    _result->{{resolveName this "C++" "setter"}}({{>ffiFieldToCpp}});
{{/ifHasAttribute}}{{#unlessHasAttribute "cpp" "ExternalSetter"}}
    _result->{{resolveName "C++"}} = {{>ffiFieldToCpp}};
{{/unlessHasAttribute}}{{/unlessHasAttribute}}
{{/fields}}{{/set}}
    return reinterpret_cast<FfiOpaqueHandle>(_result);
}

{{>ffiStructReleaseAndGetters}}
{{/externalStructs}}

#ifdef __cplusplus
}
#endif{{!!

}}{{+ffiStructReleaseAndGetters}}
void
{{resolveName}}_release_handle(FfiOpaqueHandle handle) {
    delete reinterpret_cast<{{resolveName "C++"}}*>(handle);
}

{{#set parent=this}}{{#fields}}
{{resolveName typeRef}}
{{resolveName parent}}_get_field_{{resolveName}}(FfiOpaqueHandle handle) {
    return {{>ffi/FfiInternal}}::Conversion<{{resolveName typeRef "C++"}}>::toFfi(
        reinterpret_cast<{{resolveName parent "C++"}}*>(handle)->{{resolveName "C++"}}
    );
}

{{/fields}}{{/set}}
{{/ffiStructReleaseAndGetters}}{{!!

}}{{+ffiFunction}}{{#if thrownType}}
void
{{resolveName}}_return_release_handle(FfiOpaqueHandle handle) {
    delete reinterpret_cast<{{>ffiErrorReturnType}}*>(handle);
}

{{#isNotEq returnType.typeRef.type.name "Void"}}{{resolveName returnType.typeRef}}
{{resolveName}}_return_get_result(FfiOpaqueHandle handle) {
    return {{>ffi/FfiInternal}}::Conversion<{{resolveName returnType.typeRef "C++"}}>::toFfi(
        reinterpret_cast<{{>ffiErrorReturnType}}*>(handle)->unsafe_value()
    );
}
{{/isNotEq}}

{{resolveName exception.errorType}}
{{resolveName}}_return_get_error(FfiOpaqueHandle handle) {
    return {{>ffi/FfiInternal}}::Conversion<{{resolveName exception.errorType "C++"}}>::toFfi(
        reinterpret_cast<{{>ffiErrorReturnType}}*>(handle)->error()
    );
}

bool
{{resolveName}}_return_has_error(FfiOpaqueHandle handle) {
    return !reinterpret_cast<{{>ffiErrorReturnType}}*>(handle)->has_value();
}

FfiOpaqueHandle
{{resolveName}}({{#unless isStatic}}FfiOpaqueHandle _self{{#if parameters}}, {{/if}}{{/unless}}{{!!
}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}) {
    auto&& _cpp_call_result = {{>ffiCallCppFunction}};
{{#instanceOf exception.errorType.type.actualType "LimeEnumeration"}}{{!!
}}{{#isEq returnType.typeRef.type.name "Void"}}
    if (_cpp_call_result.value() == 0) {
        return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) {{>ffiErrorReturnType}}(true));
    }
    auto _error_code = _cpp_call_result;
{{/isEq}}{{#isNotEq returnType.typeRef.type.name "Void"}}
    if (_cpp_call_result.has_value()) {
        return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) {{>ffiErrorReturnType}}(
            std::forward<{{resolveName returnType.typeRef "C++"}}>(_cpp_call_result.unsafe_value())
        ));
    }
    auto _error_code = _cpp_call_result.error();
{{/isNotEq}}
    return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) {{>ffiErrorReturnType}}(
        static_cast<{{resolveName exception.errorType "C++"}}>(_error_code.value())
    ));
{{/instanceOf}}{{#notInstanceOf exception.errorType.type.actualType "LimeEnumeration"}}
    return reinterpret_cast<FfiOpaqueHandle>(new (std::nothrow) {{>ffiErrorReturnType}}(
        std::forward<{{>ffiErrorReturnType}}>(_cpp_call_result)
    ));
{{/notInstanceOf}}
}
{{/if}}{{!!

}}{{#unless thrownType}}
{{resolveName returnType.typeRef}}
{{resolveName}}({{#unless isStatic}}FfiOpaqueHandle _self{{#if parameters}}, {{/if}}{{/unless}}{{!!
}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}) {
    {{#isNotEq returnType.typeRef.type.name "Void"}}return {{>ffi/FfiInternal}}::Conversion<{{resolveName returnType.typeRef "C++"}}>::toFfi(
{{/isNotEq}}{{!!
}}{{>ffiCallCppFunction}}{{#isNotEq returnType.typeRef.type.name "Void"}}
    ){{/isNotEq}};
}
{{/unless}}{{/ffiFunction}}{{!!

}}{{+selfReferenceConversion}}{{#instanceOf parent "LimeStruct"}}{{!!
}}{{>ffi/FfiInternal}}::Conversion<{{resolveName parent "C++"}}>::toCpp(_self){{/instanceOf}}{{#notInstanceOf parent "LimeStruct"}}{{!!
}}(*{{>ffi/FfiInternal}}::Conversion<std::shared_ptr<{{resolveName parent "C++"}}>>::toCpp(_self)){{/notInstanceOf}}{{/selfReferenceConversion}}{{!!

}}{{+ffiParameter}}            {{>ffi/FfiInternal}}::Conversion<{{resolveName typeRef "C++"}}>::toCpp({{resolveName}}){{/ffiParameter}}{{!!

}}{{+ffiFieldToCpp}}{{>ffi/FfiInternal}}::Conversion<{{resolveName typeRef "C++"}}>::toCpp({{resolveName}}){{/ffiFieldToCpp}}{{!!

}}{{+ffiCallCppFunction}}{{!!
}}        {{#if isStatic}}{{resolveName parent "C++"}}::{{/if}}{{!!
        }}{{#unless isStatic}}{{>selfReferenceConversion}}.{{/unless}}{{!!
        }}{{resolveName "C++"}}({{#if parameters}}
{{joinPartial parameters "ffiParameter" ",
"}}
        {{/if}}){{!!
}}{{/ffiCallCppFunction}}{{!!

}}{{+ffiErrorReturnType}}{{#internalNamespace}}{{.}}::{{/internalNamespace}}Return<{{!!
}}{{resolveName returnType.typeRef "C++"}}, {{resolveName exception.errorType "C++"}}>{{/ffiErrorReturnType}}
