{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#include "IsolateContext.h"

#include "CallbacksHandle.h"
#include <new>

#ifdef __cplusplus
extern "C" {
#endif

void
{{libraryName}}_execute_context_guard_finalizer(void*, void* data) {
    int32_t* p_isolate_id = reinterpret_cast<int32_t*>(data);
    {{libraryName}}_library_callbacks_queue_release(*p_isolate_id);
    delete p_isolate_id;
}

void
{{libraryName}}_register_context_guard_finalizer(Dart_Handle dart_handle, int32_t isolate_id) {
    int32_t* p_isolate_id = new (std::nothrow) int32_t(isolate_id);
    Dart_NewFinalizableHandle_DL(dart_handle, p_isolate_id, sizeof(int32_t), &{{libraryName}}_execute_context_guard_finalizer);
}

#ifdef __cplusplus
}
#endif

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace ffi
{
thread_local int32_t IsolateContext::m_current_id = -1;
}
{{#internalNamespace}}
}
{{/internalNamespace}}
