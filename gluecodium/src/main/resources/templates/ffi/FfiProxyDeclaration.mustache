{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
class {{resolveName}}_Proxy{{#unless isLambda}} : public {{resolveName "C++"}}{{/unless}} {
public:
    {{resolveName}}_Proxy(uint64_t token, int32_t isolate_id, Dart_Handle dart_handle{{!!
    }}{{#each inheritedFunctions functions}}{{#unless attributes.dart.skip isStatic logic="and"}}{{!!
    }}, FfiOpaqueHandle f{{iter.position}}{{/unless}}{{/each}}{{!!
    }}{{#each inheritedProperties properties}}{{#unless attributes.dart.skip isStatic logic="and"}}, FfiOpaqueHandle p{{iter.position}}g{{!!
    }}{{#if setter}}, FfiOpaqueHandle p{{iter.position}}s{{/if}}{{/unless}}{{/each}})
        : token(token), isolate_id(isolate_id), dart_persistent_handle(Dart_NewPersistentHandle_DL(dart_handle)){{!!
        }}{{#each inheritedFunctions functions}}{{#unless attributes.dart.skip isStatic logic="and"}}{{!!
        }}, f{{iter.position}}(f{{iter.position}}){{/unless}}{{/each}}{{!!
        }}{{#each inheritedProperties properties}}{{#unless attributes.dart.skip isStatic logic="and"}}, p{{iter.position}}g(p{{iter.position}}g){{!!
        }}{{#if setter}}, p{{iter.position}}s(p{{iter.position}}s){{/if}}{{/unless}}{{/each}} {
{{#unless isLambda}}
        {{libraryName}}_cache_dart_handle_by_raw_pointer(this, isolate_id, dart_handle);
{{/unless}}
    }

    ~{{resolveName}}_Proxy() {
        {{>ffi/FfiInternal}}::remove_cached_proxy(token, isolate_id, "{{resolveName}}");

{{#unless isLambda}}
        auto raw_pointer_local = this;
        auto isolate_id_local = isolate_id;
{{/unless}}
        auto dart_persistent_handle_local = dart_persistent_handle;
        auto deleter = [{{#unless isLambda}}raw_pointer_local, isolate_id_local, {{/unless}}dart_persistent_handle_local]() {
{{#unless isLambda}}
            {{libraryName}}_uncache_dart_handle_by_raw_pointer(raw_pointer_local, isolate_id_local);
{{/unless}}
            Dart_DeletePersistentHandle_DL(dart_persistent_handle_local);
        };

        if ({{>ffi/FfiInternal}}::IsolateContext::is_current(isolate_id)) {
            deleter();
        } else {
            {{>ffi/FfiInternal}}::cbqm.enqueueCallback(isolate_id, deleter);
        }
    }

    {{resolveName}}_Proxy(const {{resolveName}}_Proxy&) = delete;
    {{resolveName}}_Proxy& operator=(const {{resolveName}}_Proxy&) = delete;

{{#each inheritedFunctions functions}}{{#unless isStatic}}
    {{resolveName "C++ return type"}}
    {{resolveName "C++"}}({{#parameters}}const {{resolveName typeRef "C++ parameter"}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{!!
    }}{{#if attributes.cpp.const}} const{{/if}}{{#unless isLambda}} override{{/unless}} {
{{#if attributes.dart.skip}}
{{#unless returnType.isVoid}}         return {};{{/unless}}
{{/if}}{{#unless attributes.dart.skip}}
        {{#unless returnType.isVoid}}{{resolveName returnType.typeRef}} _result_handle;{{/unless}}
        {{#if thrownType}}{{resolveName  exception.errorType}} _error_handle;
        bool _error_flag;{{/if}}
        dispatch([&]() { {{#if thrownType}}_error_flag = {{/if}}(*reinterpret_cast<bool (*)(Dart_Handle{{#if parameters}}, {{/if}}{{!!
        }}{{#parameters}}{{resolveName typeRef}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
        }}{{#unless returnType.isVoid}}, {{resolveName returnType.typeRef}}*{{/unless}}{{!!
        }}{{#if thrownType}}, {{resolveName  exception.errorType}}*{{/if}}){{!!
        }}>(f{{iter.position}}))(Dart_HandleFromPersistent_DL(dart_persistent_handle){{#if parameters}}, {{/if}}{{#parameters}}
            {{>ffi/FfiInternal}}::Conversion<{{resolveName typeRef "C++"}}>::toFfi({{resolveName}}){{#if iter.hasNext}},
{{/if}}{{/parameters}}{{#unless returnType.isVoid}},
            &_result_handle{{/unless}}{{#if thrownType}},
            &_error_handle{{/if}}
        ); });{{#if thrownType}}{{#if returnType.isVoid}}
{{prefixPartial "proxyReturnError" "        "}}{{/if}}{{!!
        }}{{#unless returnType.isVoid}}
        if (_error_flag) {
{{prefixPartial "proxyReturnError" "            "}}
        } else {
{{prefixPartial "proxyReturnResult" "            "}}
        }{{/unless}}{{/if}}{{!!
        }}{{#unless thrownType}}{{#unless returnType.isVoid}}
{{prefixPartial "proxyReturnResult" "        "}}{{/unless}}{{/unless}}
{{/unless}}
    }

{{/unless}}{{/each}}

{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set isSkipped=attributes.dart.skip}}
{{#getter}}
    {{resolveName returnType.typeRef "C++"}}
    {{resolveName "C++"}}() const override {
{{#if isSkipped}}
        return {};
{{/if}}{{#unless isSkipped}}
        {{resolveName returnType.typeRef}} _result_handle;
        dispatch([&]() { (*reinterpret_cast<bool (*)(Dart_Handle, {{resolveName returnType.typeRef}}*)>{{!!
        }}(p{{iter.position}}g))(Dart_HandleFromPersistent_DL(dart_persistent_handle), &_result_handle); });
        auto _result = {{>ffi/FfiInternal}}::Conversion<{{resolveName returnType.typeRef "C++"}}>::toCpp(_result_handle);
        {{#set typeRef=returnType.typeRef handle="_result_handle"}}{{>ffiReleaseHandle}}{{/set}};
        return _result;
{{/unless}}
    }
{{/getter}}
{{#setter}}
    void
    {{resolveName "C++"}}(const {{resolveName typeRef "C++ parameter"}} value) override {
{{#unless isSkipped}}
        dispatch([&]() { (*reinterpret_cast<bool (*)(Dart_Handle, {{resolveName typeRef}})>(p{{iter.position}}s))(
            Dart_HandleFromPersistent_DL(dart_persistent_handle),
            {{>ffi/FfiInternal}}::Conversion<{{resolveName typeRef "C++"}}>::toFfi(value)
        ); });
{{/unless}}
    }
{{/setter}}
{{/set}}{{/unless}}{{/each}}

private:
    const uint64_t token;
    const int32_t isolate_id;
    const Dart_PersistentHandle dart_persistent_handle;
{{#each inheritedFunctions functions}}{{#unless attributes.dart.skip isStatic logic="and"}}
    const FfiOpaqueHandle f{{iter.position}};
{{/unless}}{{/each}}
{{#each inheritedProperties properties}}{{#unless attributes.dart.skip isStatic logic="and"}}
    const FfiOpaqueHandle p{{iter.position}}g;{{#if setter}}
    const FfiOpaqueHandle p{{iter.position}}s;
{{/if}}
{{/unless}}{{/each}}
{{#if inheritedFunctions functions inheritedProperties properties logic="or"}}

    inline void dispatch(std::function<void()>&& callback) const
    {
        {{>ffi/FfiInternal}}::IsolateContext::is_current(isolate_id)
            ? callback()
            : {{>ffi/FfiInternal}}::cbqm.enqueueCallback(isolate_id, std::move(callback)).wait();
    }
{{/if}}
};{{!!

}}{{+ffiReleaseHandle}}{{#if typeRef.isNullable}}delete reinterpret_cast<{{resolveName typeRef "C++"}}*>({{handle}}){{/if}}{{!!
}}{{#unless typeRef.isNullable}}{{#typeRef.type.actualType}}{{!!
}}{{#instanceOf this "LimeBasicType"}}{{!!
}}{{#isEq typeId.toString "String"}}delete reinterpret_cast<{{resolveName typeRef "C++"}}*>({{handle}}){{/isEq}}{{!!
}}{{#isEq typeId.toString "Blob"}}delete reinterpret_cast<{{resolveName typeRef "C++"}}*>({{handle}}){{/isEq}}{{!!
}}{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeBasicType"}}{{#instanceOf this "LimeEnumeration"}}{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeEnumeration"}}delete reinterpret_cast<{{resolveName typeRef "C++"}}*>({{handle}}){{/notInstanceOf}}{{!!
}}{{/notInstanceOf}}{{!!
}}{{/typeRef.type.actualType}}{{/unless}}{{/ffiReleaseHandle}}{{!!

}}{{+proxyReturnResult}}auto _result = {{>ffi/FfiInternal}}::Conversion<{{resolveName returnType.typeRef "C++"}}>::toCpp(_result_handle);
{{#set typeRef=returnType.typeRef handle="_result_handle"}}{{>ffiReleaseHandle}}{{/set}};
return _result;{{/proxyReturnResult}}{{!!

}}{{+proxyReturnError}}{{#instanceOf exception.errorType.type.actualType "LimeEnumeration"}}{{!!
}}return make_error_code({{>ffi/FfiInternal}}::Conversion<{{resolveName exception.errorType "C++"}}>::toCpp({{!!
}}_error_flag ? (uint32_t)_error_handle : 0));{{/instanceOf}}{{!!
}}{{#notInstanceOf exception.errorType.type.actualType "LimeEnumeration"}}{{!!
}}auto _error_result = {{>ffi/FfiInternal}}::Conversion<{{resolveName exception.errorType "C++"}}>::toCpp(_error_handle);
{{#set typeRef=exception.errorType handle="_error_handle"}}{{>ffiReleaseHandle}}{{/set}};
return _error_result;{{!!
}}{{/notInstanceOf}}{{/proxyReturnError}}
