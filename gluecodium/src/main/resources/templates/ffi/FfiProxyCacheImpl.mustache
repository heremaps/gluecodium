{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#include "ProxyCache.h"

#include <mutex>
#include <unordered_map>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace ffi
{

namespace {

struct ProxyCacheKey
{
    uint64_t token;
    int32_t isolate_id;
    std::string type_key;

    bool
    operator==(const ProxyCacheKey& other) const {
        return token == other.token && isolate_id == other.isolate_id && type_key == other.type_key;
    }
};

struct ProxyCacheKeyHash
{
    inline size_t
    operator()(const ProxyCacheKey& key) const {
        size_t result = 7;
        result = 31 * result + key.token;
        result = 31 * result + key.isolate_id;
        result = 31 * result + std::hash<::std::string>{}(key.type_key);
        return result;
    }
};

static std::unordered_map<ProxyCacheKey, std::weak_ptr<void>, ProxyCacheKeyHash> g_proxy_cache;
static std::mutex g_cache_mutex;

} // namespace


void cache_proxy_impl(uint64_t token, int32_t isolate_id, const std::string& type_key, std::shared_ptr<void> proxy) {
    const std::lock_guard<std::mutex> lock(g_cache_mutex);
    g_proxy_cache[{token, isolate_id, type_key}] = std::weak_ptr<void>(proxy);
}

void
remove_cached_proxy(uint64_t token, int32_t isolate_id, const std::string& type_key) {
    const std::lock_guard<std::mutex> lock(g_cache_mutex);
    g_proxy_cache.erase({token, isolate_id, type_key});
}

std::shared_ptr<void> get_cached_proxy_impl(uint64_t token, int32_t isolate_id, const std::string& type_key)
{
    const std::lock_guard<std::mutex> lock(g_cache_mutex);
    const auto iter = g_proxy_cache.find({token, isolate_id, type_key});
    return (iter != g_proxy_cache.end()) ? iter->second.lock() : std::shared_ptr<void>{};
}

}
{{#internalNamespace}}
}
{{/internalNamespace}}
