{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#pragma once

#include <memory>
#include <mutex>
#include <unordered_map>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace ffi
{
static std::unordered_map<uint64_t, std::weak_ptr<void>> _proxy_cache{};
static std::mutex _cache_mutex;

template<class T>
std::shared_ptr<T>
get_cached_proxy(uint64_t token) {
    const std::lock_guard<std::mutex> lock(_cache_mutex);
    auto iter = _proxy_cache.find(token);
    return (iter != _proxy_cache.end())
        ? std::static_pointer_cast<T>(iter->second.lock())
        : std::shared_ptr<T>{};
}

template<class T>
void
cache_proxy(uint64_t token, std::shared_ptr<T> proxy) {
    const std::lock_guard<std::mutex> lock(_cache_mutex);
    _proxy_cache[token] = std::weak_ptr<void>(std::static_pointer_cast<void>(proxy));
}

}
{{#internalNamespace}}
}
{{/internalNamespace}}
