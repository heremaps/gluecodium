{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#include "CallbacksHandle.h"

#include "CallbacksQueue.h"

namespace {
// Due to the bug in Flutter (https://github.com/flutter/flutter/issues/58987)
// any hot restart which follows the first hangs if isolate is waiting
// for event in C++. This workaround makes waiting for callback non blocking
// so execution periodically returns to Flutter and the issue is eliminated.
std::chrono::milliseconds g_wait_timeout = std::chrono::milliseconds::zero();
bool g_is_first_init = true;
}

#ifdef __cplusplus
extern "C" {
#endif

int32_t
{{libraryName}}_library_callbacks_queue_init(bool is_main_isolate) {
    if (is_main_isolate && !g_is_first_init) {
        // This is required to clean up after hot restart.
        {{>ffi/FfiInternal}}::cbqm.closeAllQueues();
        g_wait_timeout = std::chrono::seconds(1);
    }
    g_is_first_init = false;
    return {{>ffi/FfiInternal}}::cbqm.createQueue();
}

void
{{libraryName}}_library_callbacks_queue_release(int32_t isolate_id) {
    {{>ffi/FfiInternal}}::cbqm.closeQueue(isolate_id);
}

uint8_t
{{libraryName}}_library_wait_for_callbacks(int32_t isolate_id) {
    if (auto queue = {{>ffi/FfiInternal}}::cbqm.getQueue(isolate_id)) {
      return static_cast<uint8_t>(queue->waitForIncoming(g_wait_timeout));
    }
    return static_cast<uint8_t>({{>ffi/FfiInternal}}::CallbackQueue::WaitResult::Stopped);
}

void
{{libraryName}}_library_execute_callbacks(int32_t isolate_id) {
    auto queue = {{>ffi/FfiInternal}}::cbqm.getQueue(isolate_id);
    if (queue) {
        queue->executeScheduled();
    }
}

#ifdef __cplusplus
}
#endif
