{{!!
  !
  ! Copyright (C) 2016-2021 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#include "ConversionBase.h"
{{#includes}}
{{>common/Include}}
{{/includes}}
#include <memory>
#include <new>

#ifdef __cplusplus
extern "C" {
#endif

// "Private" finalizer, not exposed to be callable from Dart.
void
{{>lazyListPrefix}}_finalizer(FfiOpaqueHandle handle, int32_t /*isolate_id*/) {
    delete reinterpret_cast<std::shared_ptr<{{resolveName listType "C++"}}>*>(handle);
}

void
{{>lazyListPrefix}}_register_finalizer(FfiOpaqueHandle ffi_handle, int32_t isolate_id, Dart_Handle dart_handle) {
    FinalizerData* data = new (std::nothrow) FinalizerData{ffi_handle, isolate_id, &{{>lazyListPrefix}}_finalizer};
    Dart_NewFinalizableHandle_DL(dart_handle, data, sizeof data, &{{libraryName}}_execute_finalizer);
}

uint64_t
{{>lazyListPrefix}}_get_size(FfiOpaqueHandle handle) {
    auto& vector = *reinterpret_cast<std::shared_ptr<{{resolveName listType "C++"}}>*>(handle);
    return vector->size();
}

{{resolveName elementType}}
{{>lazyListPrefix}}_get(FfiOpaqueHandle handle, uint64_t index) {
    auto& vector = *reinterpret_cast<std::shared_ptr<{{resolveName listType "C++"}}>*>(handle);
    auto& result = {{>typeDereference}}vector->operator[](index);
    return {{>ffi/FfiInternal}}::Conversion<{{resolveName elementType "C++"}}>::toFfi(result);
}

#ifdef __cplusplus
}
#endif{{!!

}}{{+lazyListPrefix}}{{libraryName}}_{{resolveName container}}_{{resolveName elementType.type.actualType}}LazyList{{/lazyListPrefix}}{{!!

}}{{+typeDereference}}{{!!
}}{{#notInstanceOf elementType.type.actualType "LimeClass"}}{{#notInstanceOf elementType.type.actualType "LimeInterface"}}{{!!
}}*{{/notInstanceOf}}{{/notInstanceOf}}{{!!
}}{{/typeDereference}}
