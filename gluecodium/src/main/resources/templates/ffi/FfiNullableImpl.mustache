{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
FfiOpaqueHandle
{{resolveName type}}_create_handle_nullable({{handleType}} value)
{
    return reinterpret_cast<FfiOpaqueHandle>(
        new (std::nothrow) {{#internalNamespace}}{{.}}::{{/internalNamespace}}optional<{{resolveName type "C++"}}>(
            {{>ffi/FfiInternal}}::Conversion<{{resolveName type "C++"}}>::toCpp(value)
        )
    );
}

void
{{resolveName type}}_release_handle_nullable(FfiOpaqueHandle handle)
{
    delete reinterpret_cast<{{#internalNamespace}}{{.}}::{{/internalNamespace}}optional<{{resolveName type "C++"}}>*>(handle);
}

{{handleType}}
{{resolveName type}}_get_value_nullable(FfiOpaqueHandle handle)
{
    return {{>ffi/FfiInternal}}::Conversion<{{resolveName type "C++"}}>::toFfi(
        **reinterpret_cast<{{#internalNamespace}}{{.}}::{{/internalNamespace}}optional<{{resolveName type "C++"}}>*>(handle)
    );
}
