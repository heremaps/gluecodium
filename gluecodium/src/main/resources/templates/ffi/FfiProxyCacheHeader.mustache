{{!!
  !
  ! Copyright (C) 2016-2024 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>ffi/FfiCopyrightHeader}}

#pragma once

#include "Export.h"

#include <memory>
#include <string>

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace ffi
{

_GLUECODIUM_FFI_EXPORT void cache_proxy_impl(uint64_t token, int32_t isolate_id, const std::string& type_key, std::shared_ptr<void> proxy);
_GLUECODIUM_FFI_EXPORT void remove_cached_proxy(uint64_t token, int32_t isolate_id, const std::string& type_key);
_GLUECODIUM_FFI_EXPORT std::shared_ptr<void> get_cached_proxy_impl(uint64_t token, int32_t isolate_id, const std::string& type_key);

template<class T>
void
cache_proxy(uint64_t token, int32_t isolate_id, const std::string& type_key, std::shared_ptr<T> proxy) {
    cache_proxy_impl(token, isolate_id, type_key, std::static_pointer_cast<void>(proxy));
}

template<class T>
std::shared_ptr<T>
get_cached_proxy(uint64_t token, int32_t isolate_id, const std::string& type_key) {
    return std::static_pointer_cast<T>(get_cached_proxy_impl(token, isolate_id, type_key));
}

}
{{#internalNamespace}}
}
{{/internalNamespace}}
