{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
final _{{resolveName "Ffi"}}_create_handle_nullable = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function({{resolveName "FfiApiTypes"}}),
    Pointer<Void> Function({{resolveName "FfiDartTypes"}})
  >('{{resolveName "Ffi"}}_create_handle_nullable');
final _{{resolveName "Ffi"}}_release_handle_nullable = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{resolveName "Ffi"}}_release_handle_nullable');
final _{{resolveName "Ffi"}}_get_value_nullable = __lib.nativeLibrary.lookupFunction<
    {{resolveName "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName "FfiDartTypes"}} Function(Pointer<Void>)
  >('{{resolveName "Ffi"}}_get_value_nullable');

Pointer<Void> {{resolveName "Ffi"}}_toFfi_nullable({{resolveName}} value) {
  if (value == null) return Pointer<Void>.fromAddress(0);
  final _handle = {{resolveName "Ffi"}}_toFfi(value);
  final result = _{{resolveName "Ffi"}}_create_handle_nullable(_handle);
  {{resolveName "Ffi"}}_releaseFfiHandle(_handle);
  return result;
}

{{resolveName}} {{resolveName "Ffi"}}_fromFfi_nullable(Pointer<Void> handle) {
  if (handle.address == 0) return null;
  final _handle = _{{resolveName "Ffi"}}_get_value_nullable(handle);
  final result = {{resolveName "Ffi"}}_fromFfi(_handle);
  {{resolveName "Ffi"}}_releaseFfiHandle(_handle);
  return result;
}

void {{resolveName "Ffi"}}_releaseFfiHandle_nullable(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}_release_handle_nullable(handle);
