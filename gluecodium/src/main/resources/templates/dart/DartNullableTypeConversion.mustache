{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
final _{{resolveName "Ffi"}}CreateHandleNullable = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function({{resolveName "FfiApiTypes"}}),
    Pointer<Void> Function({{resolveName "FfiDartTypes"}})
  >('{{libraryName}}_{{internalPrefix}}{{resolveName "FfiSnakeCase"}}_create_handle_nullable'));
final _{{resolveName "Ffi"}}ReleaseHandleNullable = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{internalPrefix}}{{resolveName "FfiSnakeCase"}}_release_handle_nullable'));
final _{{resolveName "Ffi"}}GetValueNullable = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    {{resolveName "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName "FfiDartTypes"}} Function(Pointer<Void>)
  >('{{libraryName}}_{{internalPrefix}}{{resolveName "FfiSnakeCase"}}_get_value_nullable'));

Pointer<Void> {{resolveName "Ffi"}}ToFfiNullable({{resolveName this "" "ref"}} value) {
  if (value == null) return Pointer<Void>.fromAddress(0);
  final _handle = {{resolveName "Ffi"}}ToFfi(value);
  final result = _{{resolveName "Ffi"}}CreateHandleNullable(_handle);
  {{resolveName "Ffi"}}ReleaseFfiHandle(_handle);
  return result;
}

{{resolveName this "" "ref"}} {{resolveName "Ffi"}}FromFfiNullable(Pointer<Void> handle) {
  if (handle.address == 0) return null;
  final _handle = _{{resolveName "Ffi"}}GetValueNullable(handle);
  final result = {{resolveName "Ffi"}}FromFfi(_handle);
  {{resolveName "Ffi"}}ReleaseFfiHandle(_handle);
  return result;
}

void {{resolveName "Ffi"}}ReleaseFfiHandleNullable(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}ReleaseHandleNullable(handle);
