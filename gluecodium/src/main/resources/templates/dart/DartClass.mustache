{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>dart/DartDocumentation}}{{>dart/DartAttributes}}
abstract class {{resolveName}}{{!!
}}{{#if this.parents}} implements {{#this.parents}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/this.parents}}{{/if}} {
{{#set parent=this container=this}}{{#constructors}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
  factory {{resolveName parent}}{{>dart/DartConstructorName}}({{!!
  }}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
  }}) => $prototype.{{resolveName visibility}}{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{/constructors}}{{/set}}

{{#set isInClass=true}}{{#constants}}
{{prefixPartial "dart/DartConstant" "  "}}
{{/constants}}{{/set}}
{{#set parent=this}}{{#functions}}{{#unless isConstructor}}
{{>dart/DartRedirectFunction}}
{{/unless}}{{/functions}}{{/set}}
{{#set parent=this}}{{#properties}}
{{prefixPartial "dart/DartRedirectProperty" "  "}}
{{/properties}}{{/set}}
{{#ifPredicate "hasStaticFunctions"}}

  /// @nodoc
  @visibleForTesting
  static dynamic $prototype = {{resolveName}}$Impl(Pointer<Void>.fromAddress(0));
{{/ifPredicate}}
}

{{#enumerations}}
{{>dart/DartEnumeration}}
{{/enumerations}}
{{#exceptions}}
{{>dart/DartException}}
{{/exceptions}}
{{#structs}}
{{>dart/DartStruct}}
{{/structs}}
{{#classes}}
{{>dart/DartClass}}
{{/classes}}
{{#interfaces}}
{{>dart/DartInterface}}
{{/interfaces}}
{{#lambdas}}
{{>dart/DartLambda}}
{{/lambdas}}

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}RegisterFinalizer = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>, Int32, Handle),
    void Function(Pointer<Void>, int, Object)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_register_finalizer'));
final _{{resolveName "Ffi"}}CopyHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_copy_handle'));
final _{{resolveName "Ffi"}}ReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_release_handle'));
{{#if attributes.equatable}}{{>dart/DartFfiEqualityFunction}}{{/if}}{{!!
}}{{#if attributes.pointerEquatable}}{{>dart/DartFfiEqualityFunction}}{{/if}}
{{#if this.parents this.isOpen logic="or"}}
final _{{resolveName "Ffi"}}GetTypeId = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_get_type_id'));
{{/if}}

{{>dart/DartOptimizedLists}}

{{#functions}}
{{>dart/DartFunctionException}}

{{/functions}}
{{#ifPredicate "hasStaticFunctions"}}
/// @nodoc
@visibleForTesting
{{/ifPredicate}}
class {{resolveName}}$Impl extends {{#if this.parentClass}}{{resolveName this.parentClass}}$Impl{{/if}}{{!!
}}{{#unless this.parentClass}}__lib.NativeBase{{/unless}} implements {{resolveName}} {

  {{resolveName}}$Impl(Pointer<Void> handle) : super(handle);

{{#set parent=this container=this ignoreStatic=true}}{{#constructors}}
{{prefixPartial "dartConstructor" "  "}}
{{/constructors}}
{{#functions}}
{{#unless isStatic}}  @override
{{/unless}}
{{prefixPartial "dart/DartFunction" "  "}}
{{/functions}}
{{#set isInherited=true}}{{#container.interfaceInheritedFunctions}}
{{#unless isStatic}}  @override
{{/unless}}
{{prefixPartial "dart/DartFunction" "  "}}
{{/container.interfaceInheritedFunctions}}{{/set}}
{{#set override=true skipDocs=true}}{{#properties}}{{#if attributes.cached}}
{{prefixPartial "dartCachedProperty" "  "}}
{{/if}}{{#unless attributes.cached}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/unless}}{{/properties}}
{{#set isInherited=true}}{{#container.interfaceInheritedProperties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/container.interfaceInheritedProperties}}{{/set}}
{{/set}}{{/set}}
{{#if attributes.equatable}}{{prefixPartial "dart/DartEqualityOperator" "  "}}{{/if}}{{!!
}}{{#if attributes.pointerEquatable}}{{prefixPartial "dart/DartEqualityOperator" "  "}}{{/if}}
}

Pointer<Void> {{resolveName "Ffi"}}ToFfi({{resolveName}} value) =>
  _{{resolveName "Ffi"}}CopyHandle((value as __lib.NativeBase).handle);

{{resolveName}} {{resolveName "Ffi"}}FromFfi(Pointer<Void> handle) {
{{#unless this.attributes.nocache}}
  final instance = __lib.getCachedInstance(handle);
  if (instance != null && instance is {{resolveName}}) return instance;
{{/unless}}

{{#if this.parents this.isOpen logic="or"}}
  final _typeIdHandle = _{{resolveName "Ffi"}}GetTypeId(handle);
  final factoryConstructor = __lib.typeRepository[stringFromFfi(_typeIdHandle)];
  stringReleaseFfiHandle(_typeIdHandle);

{{/if}}
  final _copiedHandle = _{{resolveName "Ffi"}}CopyHandle(handle);
  final result = {{#if this.parents this.isOpen logic="or"}}factoryConstructor != null
    ? factoryConstructor(_copiedHandle)
    : {{/if}}{{resolveName}}$Impl(_copiedHandle);
{{#unless this.attributes.nocache}}
  __lib.cacheInstance(_copiedHandle, result);
{{/unless}}
  _{{resolveName "Ffi"}}RegisterFinalizer(_copiedHandle, __lib.LibraryContext.isolateId, result);
  return result;
}

void {{resolveName "Ffi"}}ReleaseFfiHandle(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}ReleaseHandle(handle);

Pointer<Void> {{resolveName "Ffi"}}ToFfiNullable({{resolveName}}? value) =>
  value != null ? {{resolveName "Ffi"}}ToFfi(value) : Pointer<Void>.fromAddress(0);

{{resolveName}}? {{resolveName "Ffi"}}FromFfiNullable(Pointer<Void> handle) =>
  handle.address != 0 ? {{resolveName "Ffi"}}FromFfi(handle) : null;

void {{resolveName "Ffi"}}ReleaseFfiHandleNullable(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}ReleaseHandle(handle);

// End of {{resolveName}} "private" section.{{!!

}}{{+dartConstructor}}
{{resolveName parent}} {{resolveName visibility}}{{resolveName}}({{!!
}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}) {
  final _result_handle = _{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
  final _result = {{resolveName parent}}$Impl(_result_handle);
{{#unless parent.attributes.nocache}}
  __lib.cacheInstance(_result_handle, _result);
{{/unless}}
  _{{resolveName parent "Ffi"}}RegisterFinalizer(_result_handle, __lib.LibraryContext.isolateId, _result);
  return _result;
}
{{/dartConstructor}}{{!!

}}{{+dartCachedProperty}}
late {{resolveName typeRef}} _{{resolveName}}Cache;
bool _{{resolveName}}IsCached = false;
{{#unless isStatic}}@override
{{/unless}}
{{resolveName typeRef}} get {{resolveName visibility}}{{resolveName}} {
  if (!_{{resolveName}}IsCached) {
    final _{{resolveName getter}}Ffi = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<{{!!
    }}{{resolveName typeRef "FfiApiTypes"}} Function({{#unless isStatic}}Pointer<Void>, {{/unless}}Int32), {{!!
    }}{{resolveName typeRef "FfiDartTypes"}} Function({{#unless isStatic}}Pointer<Void>, {{/unless}}int)>{{!!
    }}('{{libraryName}}_{{resolveName getter "FfiSnakeCase"}}'));
    final __resultHandle = _{{resolveName getter}}Ffi({{!!
    }}{{#unless isStatic}}this.handle, {{/unless}}__lib.LibraryContext.isolateId);
    try {
      _{{resolveName}}Cache = {{#set call="FromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(__resultHandle);
    } finally {
      {{#set varName="__resultHandle"}}{{>dart/DartFfiReleaseHandle}}{{/set}}
    }
    _{{resolveName}}IsCached = true;
  }
  return _{{resolveName}}Cache;
}
{{/dartCachedProperty}}
