{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>dart/DartDocumentation}}
abstract class {{resolveName}} {{#if parent}}implements {{resolveName parent}} {{/if}}{
{{#set parent=this}}{{#constructors}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
  factory {{resolveName parent}}{{#isNotEq constructors.size 1}}.{{resolveName}}{{/isNotEq}}({{!!
  }}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
  }}){{>dartImplRedirect}};
{{/constructors}}{{/set}}

  void release();

{{#set isInClass=true}}{{#constants}}
{{prefixPartial "dart/DartConstant" "  "}}
{{/constants}}{{/set}}
{{#set parent=this}}{{#functions}}{{#unless isConstructor}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
{{prefixPartial "dart/DartFunctionSignature" "  "}}{{#if isStatic}}{{>dartImplRedirect}}{{/if}};
{{/unless}}{{/functions}}{{/set}}
{{#set parent=this}}{{#properties}}
{{#set property=this}}{{prefixPartial "dartPropertyRedirect" "  "}}{{/set}}
{{/properties}}{{/set}}
}

{{#enumerations}}
{{>dart/DartEnumeration}}
{{/enumerations}}
{{#exceptions}}
{{>dart/DartException}}
{{/exceptions}}
{{#structs}}
{{>dart/DartStruct}}
{{/structs}}
{{#classes}}
{{>dart/DartClass}}
{{/classes}}
{{#interfaces}}
{{>dart/DartInterface}}
{{/interfaces}}
{{#lambdas}}
{{>dart/DartLambda}}
{{/lambdas}}

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}_copy_handle = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_copy_handle');
final _{{resolveName "Ffi"}}_release_handle = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_release_handle');
{{#ifHasAttribute "Equatable"}}{{>dartFfiEqualityFunction}}{{/ifHasAttribute}}{{!!
}}{{#ifHasAttribute "PointerEquatable"}}{{>dartFfiEqualityFunction}}{{/ifHasAttribute}}
{{#if parent visibility.isOpen logic="or"}}
final _{{resolveName "Ffi"}}_get_type_id = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_get_type_id');
{{/if}}

{{#functions}}
{{>dart/DartFunctionException}}

{{/functions}}
class {{resolveName}}$Impl{{!!
}}{{#if hasClassParent}} extends {{resolveName parent}}$Impl{{/if}} implements {{resolveName}} {
{{#unless hasClassParent}}
  final Pointer<Void> handle;

{{/unless}}
  {{resolveName}}$Impl({{#if hasClassParent}}Pointer<Void> {{/if}}{{#unless hasClassParent}}this.{{/unless}}handle){{!!
  }}{{#if hasClassParent}} : super(handle){{/if}};

  @override
  void release() => _{{resolveName "Ffi"}}_release_handle(handle);

{{#set inheritanceParent=parent parent=this}}{{#constructors}}
{{prefixPartial "dartConstructor" "  "}}
{{/constructors}}
{{#functions}}
{{#unless isStatic}}  @override
{{/unless}}
{{prefixPartial "dart/DartFunction" "  "}}
{{/functions}}{{#if inheritanceParent}}{{#instanceOf inheritanceParent.type "LimeInterface"}}
{{#inheritedFunctions}}
{{#unless isStatic}}  @override
{{/unless}}
{{prefixPartial "dart/DartFunction" "  "}}
{{/inheritedFunctions}}{{/instanceOf}}{{/if}}{{/set}}
{{#set override=true skipDocs=true}}{{#properties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/properties}}
{{#inheritedProperties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/inheritedProperties}}{{/set}}
{{#ifHasAttribute "Equatable"}}{{>dartFfiEqualityOperator}}{{/ifHasAttribute}}{{!!
}}{{#ifHasAttribute "PointerEquatable"}}{{>dartFfiEqualityOperator}}{{/ifHasAttribute}}
}

Pointer<Void> {{resolveName "Ffi"}}_toFfi({{resolveName}} value) =>
  _{{resolveName "Ffi"}}_copy_handle((value as {{resolveName}}$Impl).handle);

{{#if parent visibility.isOpen logic="or"}}
{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) {
  final _copied_handle = _{{resolveName "Ffi"}}_copy_handle(handle);
  final _type_id_handle = _{{resolveName "Ffi"}}_get_type_id(handle);
  final _type_id = String_fromFfi(_type_id_handle);
  final result = _type_id.isEmpty
    ? {{resolveName}}$Impl(_copied_handle)
    : __lib.typeRepository[_type_id](_copied_handle);
  String_releaseFfiHandle(_type_id_handle);
  return result;
}
{{/if}}{{#unless parent visibility.isOpen logic="and"}}
{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) =>
  {{resolveName}}$Impl(_{{resolveName "Ffi"}}_copy_handle(handle));
{{/unless}}

void {{resolveName "Ffi"}}_releaseFfiHandle(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}_release_handle(handle);

Pointer<Void> {{resolveName "Ffi"}}_toFfi_nullable({{resolveName}} value) =>
  value != null ? {{resolveName "Ffi"}}_toFfi(value) : Pointer<Void>.fromAddress(0);

{{resolveName}} {{resolveName "Ffi"}}_fromFfi_nullable(Pointer<Void> handle) =>
  handle.address != 0 ? {{resolveName "Ffi"}}_fromFfi(handle) : null;

void {{resolveName "Ffi"}}_releaseFfiHandle_nullable(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}_release_handle(handle);

// End of {{resolveName}} "private" section.{{!!

}}{{+dartConstructor}}{{resolveName parent}}$Impl.{{resolveName}}({{!!
}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}) : {{!!
}}this(_{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}));
{{/dartConstructor}}{{!!

}}{{+dartFfiEqualityFunction}}
final __are_equal = __lib.nativeLibrary.lookupFunction<
    Uint8 Function(Pointer<Void>, Pointer<Void>),
    int Function(Pointer<Void>, Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_are_equal');
{{/dartFfiEqualityFunction}}{{!!

}}{{+dartFfiEqualityOperator}}
  @override
  bool operator ==(dynamic other) {
    if (identical(this, other)) return true;
    if (other is! {{resolveName}}$Impl) return false;
    return __are_equal((this as {{resolveName}}$Impl).handle, other.handle) != 0;
  }
{{/dartFfiEqualityOperator}}{{!!

}}{{+dartImplRedirect}} => {{resolveName parent}}$Impl.{{resolveName}}({{!!
    }}{{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{!!
}}{{/dartImplRedirect}}{{!!

}}{{+dartPropertyRedirect}}
{{#getter}}
{{>dart/DartDocumentation}}
{{#if isStatic}}static {{/if}}{{resolveName property.typeRef}} get {{resolveName visibility}}{{resolveName property}}{{!!
}}{{#if isStatic}} => {{resolveName parent}}$Impl.{{resolveName property}}{{/if}};
{{/getter}}
{{#setter}}
{{>dart/DartDocumentation}}
{{#if isStatic}}static {{/if}}set {{resolveName visibility}}{{resolveName property}}({{resolveName property.typeRef}} value){{!!
}}{{#if isStatic}} { {{resolveName parent}}$Impl.{{resolveName property}} = value; }{{/if}}{{#unless isStatic}};{{/unless}}
{{/setter}}
{{/dartPropertyRedirect}}
