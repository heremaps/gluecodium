{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}

import 'dart:async';
import 'dart:ffi';
import 'dart:io';
import 'dart:isolate';

import 'package:{{libraryName}}/src/_library_init.dart' as __lib;

final _library_callbacks_queue_init = __lib.nativeLibrary.lookupFunction<
    Int32 Function(Uint8),
    int Function(int)
  >('{{libraryName}}_library_callbacks_queue_init');
final _library_callbacks_queue_release = __lib.nativeLibrary.lookupFunction<
    Void Function(Int32),
    void Function(int)
  >('{{libraryName}}_library_callbacks_queue_release');
final _library_wait_for_callbacks = __lib.nativeLibrary.lookupFunction<
    Uint8 Function(Int32),
    int Function(int)
  >('{{libraryName}}_library_wait_for_callbacks');
final _library_execute_callbacks = __lib.nativeLibrary.lookupFunction<
    Void Function(Int32),
    void Function(int)
  >('{{libraryName}}_library_execute_callbacks');

class _SlaveIsolateMessage {
  _SlaveIsolateMessage(this.port, this.isolateId);
  final SendPort port;
  final int isolateId;
}

enum IsolateOrigin {
  main,
  spawned
}

class LibraryContext {
  static int get isolateId => _isolateId;

  static int _isolateId = -1;
  /*late*/ static StreamSubscription _callbackStream;

  static void init(IsolateOrigin isolateOrigin) {
    _isolateId = _library_callbacks_queue_init(isolateOrigin == IsolateOrigin.main ? 1 : 0);

    final receivePort = ReceivePort();
    Isolate.spawn(_slaveIsolate, _SlaveIsolateMessage(receivePort.sendPort, isolateId));
    _callbackStream = receivePort.listen((dynamic _) { _library_execute_callbacks(isolateId); });
  }

  static void release() {
    _callbackStream.cancel();
    _library_callbacks_queue_release(isolateId);
  }

  static void _slaveIsolate(_SlaveIsolateMessage message) {
    while (_library_wait_for_callbacks(message.isolateId) != 0) {
      message.port.send(1);
    }
    message.port.send(0);
  }
}
