{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
 {
  final _{{resolveName}}_ffi = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<{{>ffiApi}}, {{>ffiDart}}>('{{libraryName}}_{{resolveName "Ffi"}}'));
{{#parameters}}
  final _{{resolveName}}_handle = {{#set call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}});
{{/parameters}}{{#unless isStatic}}
  final _handle = {{#if isStruct}}{{resolveName parent "Ffi"}}_toFfi(this){{/if}}{{!!
  }}{{#unless isStruct}}this.handle{{/unless}};
{{/unless}}
  final __{{#if thrownType}}call_{{/if}}result_handle = _{{resolveName}}_ffi({{!!
  }}{{#unless isStatic}}_handle, {{/unless}}__lib.LibraryContext.isolateId{{#if parameters}}, {{/if}}{{!!
  }}{{#parameters}}_{{resolveName}}_handle{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{#if isStruct}}{{#unless isStatic}}  {{resolveName parent "Ffi"}}_releaseFfiHandle(_handle);
{{/unless}}{{/if}}{{!!
}}{{#parameters}}
  {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_{{resolveName}}_handle);
{{/parameters}}
{{#if thrownType}}
  if (_{{resolveName}}_return_has_error(__call_result_handle) != 0) {
      final __error_handle = _{{resolveName}}_return_get_error(__call_result_handle);
      _{{resolveName}}_return_release_handle(__call_result_handle);
      try {
        throw {{resolveName exception}}({{#set call="fromFfi" typeRef=exception.errorType}}{{>dart/DartFfiConversionCall}}{{/set}}(__error_handle));
      } finally {
        {{#set call="releaseFfiHandle" typeRef=exception.errorType}}{{>dart/DartFfiConversionCall}}{{/set}}(__error_handle);
      }
  }
  final __result_handle = _{{resolveName}}_return_get_result(__call_result_handle);
  _{{resolveName}}_return_release_handle(__call_result_handle);
{{/if}}
{{#if isConstructor}}{{#if isStruct}}{{>ffiReturnConversion}}{{/if}}{{!!
}}{{#unless isStruct}}  return __result_handle;{{/unless}}{{/if}}{{!!
}}{{#unless isConstructor}}{{>ffiReturnConversion}}{{/unless}}
}{{!!

}}{{+ffiApi}}{{#if thrownType}}Pointer<Void>{{/if}}{{#unless thrownType}}{{!!
}}{{resolveName returnType.typeRef "FfiApiTypes"}}{{/unless}} Function({{!!
}}{{#unless isStatic}}Pointer<Void>, {{/unless}}Int32{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{/ffiApi}}{{!!

}}{{+ffiDart}}{{#if thrownType}}Pointer<Void>{{/if}}{{#unless thrownType}}{{!!
}}{{resolveName returnType.typeRef "FfiDartTypes"}}{{/unless}} Function({{!!
}}{{#unless isStatic}}Pointer<Void>, {{/unless}}int{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiDartTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{/ffiDart}}{{!!

}}{{+ffiReturnConversion}}{{!!
}}  {{#returnType}}{{#if typeRef.attributes.optimized}}{{!!
}}{{#set elementType=typeRef.type.actualType.elementType.type.actualType typeRef=typeRef.type.actualType.elementType}}{{!!
    }}return {{#set varName="__result_handle"}}{{prefixPartial "dart/InitLazyList" "    " skipFirstLine=true}}{{/set}};{{/set}}
{{/if}}{{#unless typeRef.attributes.optimized}}try {
    return {{#set call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(__result_handle);
  } finally {
    {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(__result_handle);
  }
{{/unless}}{{/returnType}}{{!!
}}{{/ffiReturnConversion}}
