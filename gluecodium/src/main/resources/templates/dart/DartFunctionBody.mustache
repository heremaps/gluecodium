{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
 {
  final _{{resolveName}}Ffi = __lib.catchArgumentError(() => {{!!
  }}__lib.nativeLibrary.lookupFunction<{{>ffiApi}}, {{>ffiDart}}>('{{libraryName}}_{{resolveName "FfiSnakeCase"}}'));
{{#parameters}}
  final _{{resolveName}}Handle = {{#set call="ToFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}});
{{/parameters}}{{#unless isStatic}}
  final _handle = {{#if isStruct}}{{resolveName parent "Ffi"}}ToFfi($that){{/if}}{{#unless isStruct}}this.handle{{/unless}};
{{/unless}}
  {{#if thrownType}}final __callResultHandle = {{/if}}{{!!
  }}{{#unless thrownType returnType.isVoid logic="and"}}final __resultHandle = {{/unless}}{{!!
  }}_{{resolveName}}Ffi({{#unless isStatic}}_handle, {{/unless}}__lib.LibraryContext.isolateId{{#if parameters}}, {{/if}}{{!!
  }}{{#parameters}}_{{resolveName}}Handle{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{#if isStruct}}{{#unless isStatic}}  {{resolveName parent "Ffi"}}ReleaseFfiHandle(_handle);
{{/unless}}{{/if}}{{!!
}}{{#parameters}}
  {{#resolveName}}{{#setJoin "varName" "_" this "Handle" delimiter=""}}{{>dart/DartFfiReleaseHandle}}{{/setJoin}}{{/resolveName}}
{{/parameters}}
{{#if thrownType}}
  if (_{{resolveName}}ReturnHasError(__callResultHandle) != 0) {
      final __errorHandle = _{{resolveName}}ReturnGetError(__callResultHandle);
      _{{resolveName}}ReturnReleaseHandle(__callResultHandle);
      try {
        throw {{resolveName exception}}({{#set call="FromFfi" typeRef=exception.errorType}}{{>dart/DartFfiConversionCall}}{{/set}}(__errorHandle));
      } finally {
        {{#set typeRef=exception.errorType varName="__errorHandle"}}{{>dart/DartFfiReleaseHandle}}{{/set}}
      }
  }
{{#unless returnType.isVoid}}
  final __resultHandle = _{{resolveName}}ReturnGetResult(__callResultHandle);
{{/unless}}
  _{{resolveName}}ReturnReleaseHandle(__callResultHandle);
{{/if}}
{{#if isConstructor}}{{#if isStruct}}{{>ffiReturnConversion}}{{/if}}{{!!
}}{{#unless isStruct}}  return __resultHandle;{{/unless}}{{/if}}{{!!
}}{{#unless isConstructor returnType.isVoid logic="and"}}{{>ffiReturnConversion}}{{/unless}}
}{{!!

}}{{+ffiApi}}{{#if thrownType}}Pointer<Void>{{/if}}{{#unless thrownType}}{{!!
}}{{resolveName returnType.typeRef "FfiApiTypes"}}{{/unless}} Function({{!!
}}{{#unless isStatic}}Pointer<Void>, {{/unless}}Int32{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{/ffiApi}}{{!!

}}{{+ffiDart}}{{#if thrownType}}Pointer<Void>{{/if}}{{#unless thrownType}}{{!!
}}{{resolveName returnType.typeRef "FfiDartTypes"}}{{/unless}} Function({{!!
}}{{#unless isStatic}}Pointer<Void>, {{/unless}}int{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiDartTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{/ffiDart}}{{!!

}}{{+ffiReturnConversion}}{{!!
}}  {{#returnType}}{{#if typeRef.attributes.optimized}}{{!!
}}{{#set elementType=typeRef.type.actualType.elementType.type.actualType typeRef=typeRef.type.actualType.elementType}}{{!!
    }}return {{#set varName="__resultHandle"}}{{prefixPartial "dart/InitLazyList" "    " skipFirstLine=true}}{{/set}};{{/set}}
{{/if}}{{#unless typeRef.attributes.optimized}}try {
    return {{#if isConstructor parent.external.dart.converter}}{{#set call="FromFfiInternal"}}{{>dart/DartFfiConversionCall}}{{/set}}{{/if}}{{!!
    }}{{#unless isConstructor parent.external.dart.converter}}{{#set call="FromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}{{/unless}}{{!!
    }}(__resultHandle);
  } finally {
    {{#set varName="__resultHandle"}}{{>dart/DartFfiReleaseHandle}}{{/set}}
  }
{{/unless}}{{/returnType}}{{!!
}}{{/ffiReturnConversion}}
