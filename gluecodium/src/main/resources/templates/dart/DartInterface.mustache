{{!!
  !
  ! Copyright (C) 2016-2024 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>dart/DartDocumentation}}{{>dart/DartAttributes}}
abstract class {{resolveName}}{{!!
}}{{#unless disableFinalizableMarker}}{{!!
}} implements {{#if this.parents}}{{#this.parents}}{{resolveName}}, {{/this.parents}}{{/if}}Finalizable{{!!
}}{{/unless}}{{!!
}}{{#if disableFinalizableMarker}}{{!!
}}{{#if this.parents}} implements {{#this.parents}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/this.parents}}{{/if}}{{!!
}}{{/if}} {
{{#if inheritedFunctions functions inheritedProperties properties logic="or"}}
{{prefixPartial "dart/DartDocumentation" "  "}}
  factory {{resolveName}}(
{{#each inheritedFunctions functions}}{{#unless isStatic}}
    {{>dart/DartLambdaType}} {{resolveName}}Lambda,
{{/unless}}{{/each}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{#getter}}
    {{>dart/DartLambdaType}} {{resolveName property}}GetLambda{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    {{>dart/DartLambdaType}} {{resolveName property}}SetLambda{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/unless}}{{/each}}

  ) => {{resolveName}}$Lambdas(
{{#each inheritedFunctions functions}}{{#unless isStatic}}
    {{resolveName}}Lambda,
{{/unless}}{{/each}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{#getter}}
    {{resolveName property}}GetLambda{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    {{resolveName property}}SetLambda{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/unless}}{{/each}}

  );
{{/if}}

{{#set isInClass=true}}{{#constants}}
{{prefixPartial "dart/DartConstant" "  "}}
{{/constants}}{{/set}}
{{#set parent=this}}{{#functions}}
{{>dart/DartRedirectFunction}}
{{/functions}}{{/set}}
{{#set parent=this}}{{#properties}}
{{prefixPartial "dart/DartRedirectProperty" "  "}}
{{/properties}}{{/set}}
{{#ifPredicate "hasStaticFunctions"}}

  /// @nodoc
  @visibleForTesting
  static dynamic $prototype = {{resolveName}}$Impl(Pointer<Void>.fromAddress(0));
{{/ifPredicate}}
}

{{#enumerations}}
{{>dart/DartEnumeration}}
{{/enumerations}}
{{#exceptions}}
{{>dart/DartException}}
{{/exceptions}}
{{#structs}}
{{>dart/DartStruct}}
{{/structs}}
{{#classes}}
{{>dart/DartClass}}
{{/classes}}
{{#interfaces}}
{{>dart/DartInterface}}
{{/interfaces}}
{{#lambdas}}
{{>dart/DartLambda}}
{{/lambdas}}

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}RegisterFinalizer = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>, Int32, Handle),
    void Function(Pointer<Void>, int, Object)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_register_finalizer'));
final _{{resolveName "Ffi"}}CopyHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_copy_handle'));
final _{{resolveName "Ffi"}}ReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_release_handle'));
final _{{resolveName "Ffi"}}CreateProxy = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Uint64, Int32, Handle, Pointer{{>ffiFunctionPointers}}),
    Pointer<Void> Function(int, int, Object, Pointer{{>ffiFunctionPointers}})
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_create_proxy'));
{{#if attributes.equatable}}{{>dart/DartFfiEqualityFunction}}{{/if}}
final _{{resolveName "Ffi"}}GetTypeId = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_get_type_id'));

{{#functions}}
{{>dart/DartFunctionException}}

{{/functions}}{{!!
}}{{#if inheritedFunctions functions inheritedProperties properties logic="or"}}
class {{resolveName}}$Lambdas implements {{resolveName}} {
{{#each inheritedFunctions functions}}{{#unless isStatic}}
  {{>dart/DartLambdaType}} {{resolveName}}Lambda;
{{/unless}}{{/each}}
{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}
{{#getter}}  {{>dart/DartLambdaType}} {{resolveName property}}GetLambda;
{{/getter}}{{!!
}}{{#setter}}  {{>dart/DartLambdaType}} {{resolveName property}}SetLambda;
{{/setter}}
{{/set}}{{/unless}}{{/each}}

  {{resolveName}}$Lambdas(
{{#each inheritedFunctions functions}}{{#unless isStatic}}
    this.{{resolveName}}Lambda,
{{/unless}}{{/each}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{#getter}}
    this.{{resolveName property}}GetLambda{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    this.{{resolveName property}}SetLambda{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/unless}}{{/each}}

  );

{{#each inheritedFunctions functions}}{{#unless isStatic}}
  @override
  {{>dart/DartFunctionSignature}} =>
    {{resolveName}}Lambda({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{/unless}}{{/each}}
{{#each inheritedProperties properties}}{{#unless isStatic}}
  @override
  {{resolveName typeRef}} get {{resolveName}} => {{resolveName}}GetLambda();
{{#if setter}}
  @override
  set {{resolveName}}({{resolveName typeRef}} value) => {{resolveName}}SetLambda(value);
{{/if}}
{{/unless}}{{/each}}
}
{{/if}}

{{#ifPredicate "hasStaticFunctions"}}
/// @nodoc
@visibleForTesting
{{/ifPredicate}}
class {{resolveName}}$Impl extends __lib.NativeBase implements {{resolveName}} {

  {{resolveName}}$Impl(Pointer<Void> handle) : super(handle);

{{#set ignoreStatic=true}}{{#set parent=this}}{{#each inheritedFunctions functions}}
{{#unless isStatic}}  @override
{{/unless}}{{prefixPartial "dart/DartFunction" "  "}}
{{/each}}{{/set}}
{{#each inheritedProperties properties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/each}}{{/set}}
{{#if attributes.equatable}}{{#set self=this nameSuffix="$Impl"}}{{#self}}{{!!
}}{{prefixPartial "dart/DartEqualityOperator" "  "}}{{!!
}}{{/self}}{{/set}}{{/if}}
}

{{#set parent=this}}{{#each inheritedFunctions functions}}{{#unless isStatic}}
void _{{resolveName parent "Ffi"}}{{resolveName}}Static({{!!
}}{{resolveName parent}} _obj{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiDartTypes"}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}> _result{{/unless}}{{!!
}}{{#if thrownType}}, Pointer<{{resolveName exception.errorType "FfiApiTypes"}}> _error, Pointer<Int8> _errorFlag{{/if}}) {
{{#unless returnType.isVoid}}
  {{resolveName returnType.typeRef}}{{#unless returnType.typeRef.isNullable}}?{{/unless}} _resultObject;{{/unless}}
  try {
    {{#unless returnType.isVoid}}_resultObject = {{/unless}}{{!!
  }}_obj.{{resolveName}}({{#parameters}}{{!!
  }}{{#set call="FromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}}){{#if iter.hasNext}}, {{/if}}{{!!
  }}{{/parameters}});{{#unless returnType.isVoid}}
    _result.value = {{#returnType}}{{#set call="ToFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}{{/returnType}}(_resultObject);{{/unless}}
{{#if thrownType}}
    _errorFlag.value = booleanToFfi(false);
  } on {{resolveName exception}} catch(e) {
    _errorFlag.value = booleanToFfi(true);
    final _errorObject = e.error;
    _error.value = {{#set typeRef=exception.errorType call="ToFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_errorObject);
{{/if}}
  } finally {
{{#parameters}}
    {{#resolveName}}{{#set varName=this}}{{>dart/DartFfiReleaseHandle}}{{/set}}{{/resolveName}}
{{/parameters}}
  }
}
{{/unless}}{{/each}}

{{#each inheritedProperties properties}}{{#unless isStatic}}
void _{{resolveName parent "Ffi"}}{{resolveName}}GetStatic({{resolveName parent}} _obj, Pointer<{{resolveName typeRef "FfiApiTypes"}}> _result) {
  _result.value = {{#set call="ToFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{!!
  }}_obj.{{resolveName}});
}
{{#if setter}}

void _{{resolveName parent "Ffi"}}{{resolveName}}SetStatic({{resolveName parent}} _obj, {{resolveName typeRef "FfiDartTypes"}} _value) {
  try {
    _obj.{{resolveName}} = {{#set call="FromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_value);
  } finally {
    {{#set varName="_value"}}{{>dart/DartFfiReleaseHandle}}{{/set}}
  }
}
{{/if}}
{{/unless}}{{/each}}{{/set}}

Pointer<Void> {{resolveName "Ffi"}}ToFfi({{resolveName}} value) {
{{#unless isNarrow}}
  if (value is __lib.NativeBase) return _{{resolveName "Ffi"}}CopyHandle((value as __lib.NativeBase).handle);
{{#eval "descendantInterfaces" fullName}}

  final descendantResult = tryDescendantToFfi(value);
  if (descendantResult != null) {
    return descendantResult;
  }
{{/eval}}
{{/unless}}

{{#set parent=this}}{{#each inheritedFunctions functions}}{{#unless isStatic}}
  void __{{resolveName}}Caller({{#parameters}}{{resolveName typeRef "FfiDartTypes"}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}{{#if parameters}}, {{/if}}Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}> _result{{/unless}}{{!!
}}{{#if thrownType}}{{#if parameters}}, {{/if}}{{!!
}}{{#unless parameters}}{{#unless returnType.isVoid}}, {{/unless}}{{/unless}}Pointer<{{resolveName exception.errorType "FfiApiTypes"}}> _error, Pointer<Int8> _errorFlag{{/if}}) { {{!!
}}_{{resolveName parent "Ffi"}}{{resolveName}}Static(value{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, _result{{/unless}}{{!!
}}{{#if thrownType}}, _error, _errorFlag{{/if}}); }
  final __{{resolveName}}Callback = NativeCallable<Void Function({{#parameters}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}{{#if parameters}}, {{/if}}Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}>{{/unless}}{{!!
}}{{#if thrownType}}{{#if parameters}}, {{/if}}{{!!
}}{{#unless parameters}}{{#unless returnType.isVoid}}, {{/unless}}{{/unless}}Pointer<{{resolveName exception.errorType "FfiApiTypes"}}>, Pointer<Int8>{{/if}})>.isolateLocal(__{{resolveName}}Caller);
  __{{resolveName}}Callback.keepIsolateAlive = false;

{{/unless}}{{/each}}
{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{!!
}}{{#getter}}
  void __{{resolveName parent "Ffi"}}{{resolveName property}}GetCaller(Pointer<{{resolveName property.typeRef "FfiApiTypes"}}> _result) { {{!!
}}_{{resolveName parent "Ffi"}}{{resolveName property}}GetStatic(value, _result); }
  final __{{resolveName parent "Ffi"}}{{resolveName property}}GetCallback = NativeCallable<Void Function(Pointer<{{resolveName property.typeRef "FfiApiTypes"}}>)>.isolateLocal(__{{resolveName parent "Ffi"}}{{resolveName property}}GetCaller);
  __{{resolveName parent "Ffi"}}{{resolveName property}}GetCallback.keepIsolateAlive = false;

{{/getter}}{{!!
}}{{#setter}}
  void __{{resolveName parent "Ffi"}}{{resolveName property}}SetCaller({{resolveName property.typeRef "FfiDartTypes"}} _value) { {{!!
}}_{{resolveName parent "Ffi"}}{{resolveName property}}SetStatic(value, _value); }
  final __{{resolveName parent "Ffi"}}{{resolveName property}}SetCallback = NativeCallable<Void Function({{resolveName property.typeRef "FfiApiTypes"}})>.isolateLocal(__{{resolveName parent "Ffi"}}{{resolveName property}}SetCaller);
  __{{resolveName parent "Ffi"}}{{resolveName property}}SetCallback.keepIsolateAlive = false;

{{/setter}}
{{/set}}{{/unless}}{{/each}}
{{/set}}
  late final NativeCallable<Void Function()> __closeAllCallback;
  void __closeAll() {
{{#set parent=this}}{{!!
}}{{#each inheritedFunctions functions}}{{#unless isStatic}}
    __{{resolveName}}Callback.close();
{{/unless}}{{/each}}{{!!
}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{!!
}}{{#getter}}
    __{{resolveName parent "Ffi"}}{{resolveName property}}GetCallback.close();{{/getter}}{{!!
}}{{#setter}}
    __{{resolveName parent "Ffi"}}{{resolveName property}}SetCallback.close();
{{/setter}}{{!!
}}{{/set}}{{/unless}}{{/each}}{{!!
}}{{/set}}
    __closeAllCallback.close();
  }
  __closeAllCallback = NativeCallable<Void Function()>.isolateLocal(__closeAll);
  __closeAllCallback.keepIsolateAlive = false;

  final result = _{{resolveName "Ffi"}}CreateProxy(
    __lib.getObjectToken(value),
    __lib.LibraryContext.isolateId,
    value,
    __closeAllCallback.nativeFunction{{#set parent=this}}{{#each inheritedFunctions functions}}{{#unless isStatic}},
    __{{resolveName}}Callback.nativeFunction{{!!
    }}{{/unless}}{{/each}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{#getter}},
    __{{resolveName parent "Ffi"}}{{resolveName property}}GetCallback.nativeFunction{{/getter}}{{#setter}},
    __{{resolveName parent "Ffi"}}{{resolveName property}}SetCallback.nativeFunction{{/setter}}{{!!
    }}{{/set}}{{/unless}}{{/each}}{{/set}}
  );

  return result;
}

{{resolveName}} {{resolveName "Ffi"}}FromFfi(Pointer<Void> handle) {
  if (handle.address == 0) throw StateError("Expected non-null value.");
{{#unless this.attributes.nocache}}
  final instance = __lib.getCachedInstance(handle);
  if (instance != null && instance is {{resolveName}}) return instance;
{{/unless}}

  final _typeIdHandle = _{{resolveName "Ffi"}}GetTypeId(handle);
  final factoryConstructor = __lib.typeRepository[stringFromFfi(_typeIdHandle)];
  stringReleaseFfiHandle(_typeIdHandle);

  final _copiedHandle = _{{resolveName "Ffi"}}CopyHandle(handle);
  final result = factoryConstructor != null
    ? factoryConstructor(_copiedHandle)
    : {{resolveName}}$Impl(_copiedHandle);
{{#unless this.attributes.nocache}}
  __lib.cacheInstance(_copiedHandle, result);
{{/unless}}
  _{{resolveName "Ffi"}}RegisterFinalizer(_copiedHandle, __lib.LibraryContext.isolateId, result);
  return result;
}

void {{resolveName "Ffi"}}ReleaseFfiHandle(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}ReleaseHandle(handle);

Pointer<Void> {{resolveName "Ffi"}}ToFfiNullable({{resolveName}}? value) =>
  value != null ? {{resolveName "Ffi"}}ToFfi(value) : Pointer<Void>.fromAddress(0);

{{resolveName}}? {{resolveName "Ffi"}}FromFfiNullable(Pointer<Void> handle) =>
  handle.address != 0 ? {{resolveName "Ffi"}}FromFfi(handle) : null;

void {{resolveName "Ffi"}}ReleaseFfiHandleNullable(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}ReleaseHandle(handle);

{{#unless isNarrow}}{{#set interface=this}}{{#eval "descendantInterfaces" fullName}}
Pointer<Void>? tryDescendantToFfi({{resolveName interface}} value) {
{{#this}}{{!! pre-sorted, most distant descendants are prioritized }}
  if (value is {{resolveName}}) return {{resolveName "Ffi"}}ToFfi(value);
{{/this}}
  return null;
}

{{/eval}}{{/set}}{{/unless}}
// End of {{resolveName}} "private" section.{{!!

}}{{+ffiApi}}Uint8 Function(Handle{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}>{{/unless}}{{!!
}}{{#if thrownType}}, Pointer<{{resolveName exception.errorType "FfiApiTypes"}}>{{/if}}){{/ffiApi}}{{!!

}}{{+ffiFunctionPointers}}{{#each inheritedFunctions functions}}{{#unless isStatic}}, Pointer{{/unless}}{{/each}}{{!!
}}{{#each inheritedProperties properties}}{{#unless isStatic}}, Pointer{{#if setter}}, Pointer{{/if}}{{/unless}}{{/each}}{{/ffiFunctionPointers}}
