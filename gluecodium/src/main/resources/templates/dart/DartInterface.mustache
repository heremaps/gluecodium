{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>dart/DartDocumentation}}{{>dart/DartAttributes}}
abstract class {{resolveName}} {{#if this.parent}}implements {{resolveName this.parent}} {{/if}}{
{{#if inheritedFunctions functions inheritedProperties properties logic="or"}}
  {{resolveName}}();

  factory {{resolveName}}.fromLambdas({
{{#each inheritedFunctions functions}}{{#unless isStatic}}
    @required {{>dart/DartLambdaType}} lambda_{{resolveName}},
{{/unless}}{{/each}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{#getter}}
    @required {{>dart/DartLambdaType}} lambda_{{resolveName property}}_get{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    @required {{>dart/DartLambdaType}} lambda_{{resolveName property}}_set{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/unless}}{{/each}}

  }) => {{resolveName}}$Lambdas(
{{#each inheritedFunctions functions}}{{#unless isStatic}}
    lambda_{{resolveName}},
{{/unless}}{{/each}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{#getter}}
    lambda_{{resolveName property}}_get{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    lambda_{{resolveName property}}_set{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/unless}}{{/each}}

  );
{{/if}}

{{prefixPartial "dart/DartReleaseDocs" "  "}}
  void release() {}

{{#set isInClass=true}}{{#constants}}
{{prefixPartial "dart/DartConstant" "  "}}
{{/constants}}{{/set}}
{{#set parent=this}}{{#functions}}
{{>dart/DartRedirectFunction}}
{{/functions}}{{/set}}
{{#set parent=this}}{{#properties}}
{{prefixPartial "dart/DartRedirectProperty" "  "}}
{{/properties}}{{/set}}
}

{{#enumerations}}
{{>dart/DartEnumeration}}
{{/enumerations}}
{{#exceptions}}
{{>dart/DartException}}
{{/exceptions}}
{{#structs}}
{{>dart/DartStruct}}
{{/structs}}
{{#classes}}
{{>dart/DartClass}}
{{/classes}}
{{#interfaces}}
{{>dart/DartInterface}}
{{/interfaces}}
{{#lambdas}}
{{>dart/DartLambda}}
{{/lambdas}}

// {{resolveName}} "private" section, not exported.

final _{{resolveName "FfiCamelCase"}}CopyHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_copy_handle'));
final _{{resolveName "FfiCamelCase"}}ReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_release_handle'));
final _{{resolveName "FfiCamelCase"}}CreateProxy = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Uint64, Int32, Pointer{{>ffiFunctionPointers}}),
    Pointer<Void> Function(int, int, Pointer{{>ffiFunctionPointers}})
  >('{{libraryName}}_{{resolveName "Ffi"}}_create_proxy'));
{{#if attributes.equatable}}{{>dart/DartFfiEqualityFunction}}{{/if}}
final _{{resolveName "FfiCamelCase"}}GetTypeId = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_get_type_id'));

{{#functions}}
{{>dart/DartFunctionException}}

{{/functions}}{{!!
}}{{#if inheritedFunctions functions inheritedProperties properties logic="or"}}
class {{resolveName}}$Lambdas implements {{resolveName}} {
{{#each inheritedFunctions functions}}{{#unless isStatic}}
  {{>dart/DartLambdaType}} lambda_{{resolveName}};
{{/unless}}{{/each}}
{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}
{{#getter}}  {{>dart/DartLambdaType}} lambda_{{resolveName property}}_get;
{{/getter}}{{!!
}}{{#setter}}  {{>dart/DartLambdaType}} lambda_{{resolveName property}}_set;
{{/setter}}
{{/set}}{{/unless}}{{/each}}

  {{resolveName}}$Lambdas(
{{#each inheritedFunctions functions}}{{#unless isStatic}}
    this.lambda_{{resolveName}},
{{/unless}}{{/each}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{#getter}}
    this.lambda_{{resolveName property}}_get{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    this.lambda_{{resolveName property}}_set{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/unless}}{{/each}}

  );

  @override
  void release() {}

{{#each inheritedFunctions functions}}{{#unless isStatic}}
  @override
  {{>dart/DartFunctionSignature}} =>
    lambda_{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{/unless}}{{/each}}
{{#each inheritedProperties properties}}{{#unless isStatic}}
  @override
  {{resolveName typeRef}} get {{resolveName visibility}}{{resolveName}} => lambda_{{resolveName}}_get();
{{#if setter}}
  @override
  set {{resolveName visibility}}{{resolveName}}({{resolveName typeRef}} value) => lambda_{{resolveName}}_set(value);
{{/if}}
{{/unless}}{{/each}}
}
{{/if}}

class {{resolveName}}$Impl extends __lib.NativeBase implements {{resolveName}} {

  {{resolveName}}$Impl(Pointer<Void> handle) : super(handle);

  @override
  void release() {
    if (handle == null) return;
    __lib.uncacheObject(this);
    __lib.ffiUncacheToken(handle, __lib.LibraryContext.isolateId);
    _{{resolveName "FfiCamelCase"}}ReleaseHandle(handle);
    handle = null;
  }

{{#set parent=this}}{{#each inheritedFunctions functions}}
  @override
{{prefixPartial "dart/DartFunction" "  "}}
{{/each}}{{/set}}
{{#each inheritedProperties properties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/each}}
{{#if attributes.equatable}}{{#set self=this nameSuffix="$Impl"}}{{#self}}{{!!
}}{{prefixPartial "dart/DartEqualityOperator" "  "}}{{!!
}}{{/self}}{{/set}}{{/if}}
}

{{#set parent=this}}{{#each inheritedFunctions functions}}{{#unless isStatic}}
int _{{resolveName parent}}_{{resolveName}}_static({{!!
}}int _token{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiDartTypes"}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}> _result{{/unless}}{{!!
}}{{#if thrownType}}, Pointer<{{resolveName exception.errorType "FfiApiTypes"}}> _error{{/if}}) {
{{#if thrownType}}
  bool _errorFlag = false;
{{/if}}{{#unless returnType.isVoid}}
  {{resolveName returnType.typeRef}} _resultObject = null;{{/unless}}
  try {
    {{#unless returnType.isVoid}}_resultObject = {{/unless}}{{!!
  }}(__lib.instanceCache[_token] as {{resolveName parent}}).{{resolveName visibility}}{{resolveName}}({{#parameters}}{{!!
  }}{{#set call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}}){{#if iter.hasNext}}, {{/if}}{{!!
  }}{{/parameters}});{{#unless returnType.isVoid}}
    _result.value = {{#returnType}}{{#set call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}{{/returnType}}(_resultObject);{{/unless}}
{{#if thrownType}}
  } on {{resolveName exception}} catch(e) {
    _errorFlag = true;
    final _errorObject = e.error;
    _error.value = {{#set typeRef=exception.errorType call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_errorObject);
{{#instanceOf exception.errorType.type.actualType "LimeClass"}}
    if (_errorObject != null) _errorObject.release();
{{/instanceOf}}{{#instanceOf exception.errorType.type.actualType "LimeInterface"}}
    if (_errorObject != null) _errorObject.release();
{{/instanceOf}}
{{/if}}
  } finally {
{{#parameters}}
    {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}});
{{/parameters}}{{!!
}}{{#instanceOf returnType.typeRef.type.actualType "LimeClass"}}
    if (_resultObject != null) _resultObject.release();
{{/instanceOf}}{{#instanceOf returnType.typeRef.type.actualType "LimeInterface"}}
    if (_resultObject != null) _resultObject.release();
{{/instanceOf}}
  }
  return{{#if thrownType}} _errorFlag ? 1 :{{/if}} 0;
}
{{/unless}}{{/each}}

{{#each inheritedProperties properties}}{{#unless isStatic}}
int _{{resolveName parent}}_{{resolveName}}_get_static(int _token, Pointer<{{resolveName typeRef "FfiApiTypes"}}> _result) {
  _result.value = {{#set call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{!!
  }}(__lib.instanceCache[_token] as {{resolveName parent}}).{{resolveName visibility}}{{resolveName}});
  return 0;
}
{{#if setter}}

int _{{resolveName parent}}_{{resolveName}}_set_static(int _token, {{resolveName typeRef "FfiDartTypes"}} _value) {
  try {
    (__lib.instanceCache[_token] as {{resolveName parent}}).{{resolveName visibility}}{{resolveName}} =
      {{#set call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_value);
  } finally {
    {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_value);
  }
  return 0;
}
{{/if}}
{{/unless}}{{/each}}{{/set}}

Pointer<Void> {{resolveName "Ffi"}}_toFfi({{resolveName}} value) {
  if (value is __lib.NativeBase) return _{{resolveName "FfiCamelCase"}}CopyHandle((value as __lib.NativeBase).handle);

  final result = _{{resolveName "FfiCamelCase"}}CreateProxy(
    __lib.cacheObject(value),
    __lib.LibraryContext.isolateId,
    __lib.uncacheObjectFfi{{#set parent=this}}{{#each inheritedFunctions functions}}{{#unless isStatic}},
    Pointer.fromFunction<{{>ffiApi}}>(_{{resolveName parent}}_{{resolveName}}_static, __lib.unknownError){{!!
    }}{{/unless}}{{/each}}{{#each inheritedProperties properties}}{{#unless isStatic}}{{#set property=this}}{{#getter}},
    Pointer.fromFunction<{{>ffiApi}}>(_{{resolveName parent}}_{{resolveName property}}_get_static, __lib.unknownError){{/getter}}{{#setter}},
    Pointer.fromFunction<{{>ffiApi}}>(_{{resolveName parent}}_{{resolveName property}}_set_static, __lib.unknownError){{/setter}}{{!!
    }}{{/set}}{{/unless}}{{/each}}{{/set}}
  );

  return result;
}

{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) {
  final isolateId = __lib.LibraryContext.isolateId;
  final token = __lib.ffiGetCachedToken(handle, isolateId);
  final instance = __lib.instanceCache[token] as {{resolveName}};
  if (instance != null) return instance;

  final _typeIdHandle = _{{resolveName "FfiCamelCase"}}GetTypeId(handle);
  final factoryConstructor = __lib.typeRepository[String_fromFfi(_typeIdHandle)];
  String_releaseFfiHandle(_typeIdHandle);

  final _copiedHandle = _{{resolveName "FfiCamelCase"}}CopyHandle(handle);
  final result = factoryConstructor != null
    ? factoryConstructor(_copiedHandle)
    : {{resolveName}}$Impl(_copiedHandle);
  __lib.ffiCacheToken(_copiedHandle, isolateId, __lib.cacheObject(result));
  return result;
}

void {{resolveName "Ffi"}}_releaseFfiHandle(Pointer<Void> handle) =>
  _{{resolveName "FfiCamelCase"}}ReleaseHandle(handle);

Pointer<Void> {{resolveName "Ffi"}}_toFfi_nullable({{resolveName}} value) =>
  value != null ? {{resolveName "Ffi"}}_toFfi(value) : Pointer<Void>.fromAddress(0);

{{resolveName}} {{resolveName "Ffi"}}_fromFfi_nullable(Pointer<Void> handle) =>
  handle.address != 0 ? {{resolveName "Ffi"}}_fromFfi(handle) : null;

void {{resolveName "Ffi"}}_releaseFfiHandle_nullable(Pointer<Void> handle) =>
  _{{resolveName "FfiCamelCase"}}ReleaseHandle(handle);

// End of {{resolveName}} "private" section.{{!!

}}{{+ffiApi}}Uint8 Function(Uint64{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}>{{/unless}}{{!!
}}{{#if thrownType}}, Pointer<{{resolveName exception.errorType "FfiApiTypes"}}>{{/if}}){{/ffiApi}}{{!!

}}{{+ffiFunctionPointers}}{{#each inheritedFunctions functions}}{{#unless isStatic}}, Pointer{{/unless}}{{/each}}{{!!
}}{{#each inheritedProperties properties}}{{#unless isStatic}}, Pointer{{#if setter}}, Pointer{{/if}}{{/unless}}{{/each}}{{/ffiFunctionPointers}}
