{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>dart/DartDocumentation}}
abstract class {{resolveName}} {{#if parent}}implements {{resolveName parent}} {{/if}}{
{{#if inheritedFunctions functions inheritedProperties properties logic="or"}}
  {{resolveName}}() {}

  factory {{resolveName}}.fromLambdas({
{{#each inheritedFunctions functions}}
    @required {{>dart/DartLambdaType}} lambda_{{resolveName}}{{#if iter.hasNext}},
{{/if}}{{/each}}{{#if inheritedFunctions functions logic="or"}}{{#if inheritedProperties properties logic="or"}},
{{/if}}{{/if}}{{#each inheritedProperties properties}}{{#set property=this}}{{#getter}}
    @required {{>dart/DartLambdaType}} lambda_{{resolveName property}}_get{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    @required {{>dart/DartLambdaType}} lambda_{{resolveName property}}_set{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/each}}

  }) => {{resolveName}}$Lambdas(
{{#each inheritedFunctions functions}}
    lambda_{{resolveName}}{{#if iter.hasNext}},
{{/if}}{{/each}}{{#if inheritedFunctions functions logic="or"}}{{#if inheritedProperties properties logic="or"}},
{{/if}}{{/if}}{{#each inheritedProperties properties}}{{#set property=this}}{{#getter}}
    lambda_{{resolveName property}}_get{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    lambda_{{resolveName property}}_set{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/each}}

  );
{{/if}}

  void release() {}

{{#set isInClass=true}}{{#constants}}
{{prefixPartial "dart/DartConstant" "  "}}
{{/constants}}{{/set}}
{{#set parent=this}}{{#functions}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
{{prefixPartial "dart/DartFunctionSignature" "  "}};
{{/functions}}{{/set}}
{{#set skipBody=true}}{{#properties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/properties}}{{/set}}
}

{{#enumerations}}
{{>dart/DartEnumeration}}
{{/enumerations}}
{{#exceptions}}
{{>dart/DartException}}
{{/exceptions}}
{{#structs}}
{{>dart/DartStruct}}
{{/structs}}
{{#classes}}
{{>dart/DartClass}}
{{/classes}}
{{#interfaces}}
{{>dart/DartInterface}}
{{/interfaces}}
{{#lambdas}}
{{>dart/DartLambda}}
{{/lambdas}}

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}_copy_handle = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_copy_handle');
final _{{resolveName "Ffi"}}_release_handle = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_release_handle');
final _{{resolveName "Ffi"}}_create_proxy = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Uint64, Int32, Pointer{{>ffiFunctionPointers}}),
    Pointer<Void> Function(int, int, Pointer{{>ffiFunctionPointers}})
  >('{{libraryName}}_{{resolveName "Ffi"}}_create_proxy');
final _{{resolveName "Ffi"}}_get_raw_pointer = __lib.nativeLibrary.lookupFunction<
      Pointer<Void> Function(Pointer<Void>),
      Pointer<Void> Function(Pointer<Void>)
    >('{{libraryName}}_{{resolveName "Ffi"}}_get_raw_pointer');
{{#ifHasAttribute "Equatable"}}{{>dart/DartFfiEqualityFunction}}{{/ifHasAttribute}}
final _{{resolveName "Ffi"}}_get_type_id = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_get_type_id');

{{#functions}}
{{>dart/DartFunctionException}}

{{/functions}}{{!!
}}{{#if inheritedFunctions functions inheritedProperties properties logic="or"}}
class {{resolveName}}$Lambdas {{#if parent}}extends {{resolveName parent}}$Lambdas {{/if}}implements {{resolveName}} {
{{#functions}}
  {{>dart/DartLambdaType}} lambda_{{resolveName}};
{{/functions}}
{{#properties}}{{#set property=this}}
{{#getter}}  {{>dart/DartLambdaType}} lambda_{{resolveName property}}_get;
{{/getter}}{{!!
}}{{#setter}}  {{>dart/DartLambdaType}} lambda_{{resolveName property}}_set;
{{/setter}}
{{/set}}{{/properties}}

  {{resolveName}}$Lambdas(
{{#each inheritedFunctions functions}}
    {{>dart/DartLambdaType}} lambda_{{resolveName}}{{#if iter.hasNext}},
{{/if}}{{/each}}{{#if inheritedFunctions functions logic="or"}}{{#if inheritedProperties properties logic="or"}},
{{/if}}{{/if}}{{#each inheritedProperties properties}}{{#set property=this}}{{#getter}}
    {{>dart/DartLambdaType}} lambda_{{resolveName property}}_get{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    {{>dart/DartLambdaType}} lambda_{{resolveName property}}_set{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/each}}

  ){{#if parent}} : super(
{{#inheritedFunctions}}
    lambda_{{resolveName}}{{#if iter.hasNext}},
{{/if}}{{/inheritedFunctions}}{{#if inheritedFunctions inheritedProperties}},
{{/if}}{{#inheritedProperties}}{{#set property=this}}{{#getter}}
    lambda_{{resolveName property}}_get{{#if setter}},
{{/if}}{{/getter}}{{#setter}}
    lambda_{{resolveName property}}_set{{/setter}}{{#if iter.hasNext}},
{{/if}}{{/set}}{{/inheritedProperties}}

  ){{/if}} {
{{#functions}}
    this.lambda_{{resolveName}} = lambda_{{resolveName}};
{{/functions}}
{{#properties}}{{#set property=this}}
    this.lambda_{{resolveName property}}_get = lambda_{{resolveName property}}_get;
{{#setter}}    this.lambda_{{resolveName property}}_set = lambda_{{resolveName property}}_set;
{{/setter}}
{{/set}}{{/properties}}

  }

  @override
  void release() {}

{{#functions}}
  @override
  {{>dart/DartFunctionSignature}} =>
    lambda_{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{/functions}}
{{#properties}}
  @override
  {{resolveName typeRef}} get {{resolveName visibility}}{{resolveName}} => lambda_{{resolveName}}_get();
{{#if setter}}
  @override
  set {{resolveName visibility}}{{resolveName}}({{resolveName typeRef}} value) => lambda_{{resolveName}}_set(value);
{{/if}}
{{/properties}}
}
{{/if}}

class {{resolveName}}$Impl {{#if parent}}extends {{resolveName parent}}$Impl {{/if}}implements {{resolveName}} {
  {{#if parent}}{{resolveName}}$Impl(Pointer<Void> handle) : super(handle);{{/if}}{{!!
  }}{{#unless parent}}@protected
  Pointer<Void> handle;
  {{resolveName}}$Impl(this.handle);{{/unless}}

  @override
  void release() {
    if (handle == null) return;
    __lib.reverseCache.remove(_{{resolveName "Ffi"}}_get_raw_pointer(handle));
    _{{resolveName "Ffi"}}_release_handle(handle);
    handle = null;
  }

{{#set parent=this}}{{#functions}}
  @override
{{prefixPartial "dart/DartFunction" "  "}}
{{/functions}}{{/set}}
{{#properties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/properties}}
{{#ifHasAttribute "Equatable"}}{{#set self=this nameSuffix="$Impl"}}{{#self}}{{!!
}}{{prefixPartial "dart/DartEqualityOperator" "  "}}{{!!
}}{{/self}}{{/set}}{{/ifHasAttribute}}
}

{{#set parent=this}}{{#each inheritedFunctions functions}}
int _{{resolveName parent}}_{{resolveName}}_static({{!!
}}int _token{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiDartTypes"}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#isNotEq returnType.typeRef.toString "Void"}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}> _result{{/isNotEq}}) {
  {{#if thrownType}}
  int _error = 0;
  try {
  {{/if}}
{{#parameters}}
  final __{{resolveName}} = {{#set call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}});
  {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}});
{{/parameters}}
  {{#isNotEq returnType.typeRef.toString "Void"}}final _result_object = {{/isNotEq}}{{!!
  }}(__lib.instanceCache[_token] as {{resolveName parent}}).{{resolveName visibility}}{{resolveName}}({{#parameters}}{{!!
  }}__{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{!!
  }}{{/parameters}});{{#isNotEq returnType.typeRef.toString "Void"}}
  _result.value = {{#returnType}}{{#set call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}{{/returnType}}(_result_object);{{/isNotEq}}
{{#if thrownType}}
  } on {{resolveName exception}} catch(e) {
{{#instanceOf exception.errorType.type.actualType "LimeEnumeration"}}{{!! TODO: #140 handle arbitrary payload}}{{!!
}}    _error = {{#set typeRef=exception.errorType call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(e.error);{{/instanceOf}}
  } finally {
  {{/if}}{{!!
}}{{#instanceOf returnType.typeRef.type.actualType "LimeClass"}}
  if (_result_object != null) _result_object.release();
{{/instanceOf}}{{#instanceOf returnType.typeRef.type.actualType "LimeInterface"}}
  if (_result_object != null) _result_object.release();
{{/instanceOf}}{{!!
  }}{{#if thrownType}}
  }
  {{/if}}
  return {{#if thrownType}}_error{{/if}}{{#unless thrownType}}0{{/unless}};
}
{{/each}}

{{#each inheritedProperties properties}}
int _{{resolveName parent}}_{{resolveName}}_get_static(int _token, Pointer<{{resolveName typeRef "FfiApiTypes"}}> _result) {
  _result.value = {{#set call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{!!
  }}(__lib.instanceCache[_token] as {{resolveName parent}}).{{resolveName visibility}}{{resolveName}});
  return 0;
}
{{#if setter}}

int _{{resolveName parent}}_{{resolveName}}_set_static(int _token, {{resolveName typeRef "FfiDartTypes"}} _value) {
  final __value = {{#set call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_value);
  {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_value);
  (__lib.instanceCache[_token] as {{resolveName parent}}).{{resolveName visibility}}{{resolveName}} = __value;
  return 0;
}
{{/if}}
{{/each}}{{/set}}

Pointer<Void> {{resolveName "Ffi"}}_toFfi({{resolveName}} value) {
  if (value is {{resolveName}}$Impl) return _{{resolveName "Ffi"}}_copy_handle(value.handle);

  final result = _{{resolveName "Ffi"}}_create_proxy(
    __lib.cacheObject(value),
    __lib.LibraryContext.isolateId,
    __lib.uncacheObjectFfi{{#set parent=this}}{{#each inheritedFunctions functions}},
    Pointer.fromFunction<{{>ffiApi}}>(_{{resolveName parent}}_{{resolveName}}_static, __lib.unknownError){{!!
    }}{{/each}}{{#each inheritedProperties properties}}{{#set property=this}}{{#getter}},
    Pointer.fromFunction<{{>ffiApi}}>(_{{resolveName parent}}_{{resolveName property}}_get_static, __lib.unknownError){{/getter}}{{#setter}},
    Pointer.fromFunction<{{>ffiApi}}>(_{{resolveName parent}}_{{resolveName property}}_set_static, __lib.unknownError){{/setter}}{{!!
    }}{{/set}}{{/each}}{{/set}}
  );
  __lib.reverseCache[_{{resolveName "Ffi"}}_get_raw_pointer(result)] = value;

  return result;
}

{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) {
  final raw_handle = _{{resolveName "Ffi"}}_get_raw_pointer(handle);
  final instance = __lib.reverseCache[raw_handle] as {{resolveName}};
  if (instance != null) return instance;

  final _type_id_handle = _{{resolveName "Ffi"}}_get_type_id(handle);
  final factoryConstructor = __lib.typeRepository[String_fromFfi(_type_id_handle)];
  String_releaseFfiHandle(_type_id_handle);

  final _copied_handle = _{{resolveName "Ffi"}}_copy_handle(handle);
  final result = factoryConstructor != null
    ? factoryConstructor(_copied_handle)
    : {{resolveName}}$Impl(_copied_handle);
  __lib.reverseCache[raw_handle] = result;
  return result;
}

void {{resolveName "Ffi"}}_releaseFfiHandle(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}_release_handle(handle);

Pointer<Void> {{resolveName "Ffi"}}_toFfi_nullable({{resolveName}} value) =>
  value != null ? {{resolveName "Ffi"}}_toFfi(value) : Pointer<Void>.fromAddress(0);

{{resolveName}} {{resolveName "Ffi"}}_fromFfi_nullable(Pointer<Void> handle) =>
  handle.address != 0 ? {{resolveName "Ffi"}}_fromFfi(handle) : null;

void {{resolveName "Ffi"}}_releaseFfiHandle_nullable(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}_release_handle(handle);

// End of {{resolveName}} "private" section.{{!!

}}{{+ffiApi}}Int64 Function(Uint64{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#isNotEq returnType.typeRef.toString "Void"}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}>{{/isNotEq}}){{/ffiApi}}{{!!

}}{{+ffiFunctionPointers}}{{#if inheritedFunctions functions logic="or"}}, {{!!
}}{{#each inheritedFunctions functions}}Pointer{{#if iter.hasNext}}, {{/if}}{{/each}}{{/if}}{{!!
}}{{#if inheritedProperties properties logic="or"}}, {{!!
}}{{#each inheritedProperties properties}}Pointer{{#if setter}}, Pointer{{/if}}{{#if iter.hasNext}}, {{/if}}{{/each}}{{/if}}{{/ffiFunctionPointers}}
