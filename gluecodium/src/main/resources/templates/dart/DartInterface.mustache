{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>dart/DartDocumentation}}
abstract class {{resolveName}} {{!!
}}{{#if parent}}implements {{resolveName parent}} {{/if}}{
  void release();

{{#set isInClass=true}}{{#constants}}
{{prefixPartial "dart/DartConstant" "  "}}
{{/constants}}{{/set}}
{{#set parent=this}}{{#functions}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
{{prefixPartial "dart/DartFunctionSignature" "  "}};
{{/functions}}{{/set}}
{{#set skipBody=true}}{{#properties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/properties}}{{/set}}
}

{{#enumerations}}
{{>dart/DartEnumeration}}
{{/enumerations}}
{{#exceptions}}
{{>dart/DartException}}
{{/exceptions}}
{{#structs}}
{{>dart/DartStruct}}
{{/structs}}
{{#classes}}
{{>dart/DartClass}}
{{/classes}}
{{#interfaces}}
{{>dart/DartInterface}}
{{/interfaces}}

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}_copy_handle = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{resolveName "Ffi"}}_copy_handle');
final _{{resolveName "Ffi"}}_release_handle = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{resolveName "Ffi"}}_release_handle');

{{#functions}}
{{>dart/DartFunctionException}}

{{/functions}}{{!!
}}class {{resolveName}}__Impl {{#if parent}}extends {{resolveName parent}}__Impl {{/if}}implements {{resolveName}} {
  Pointer<Void> get _handle => handle;
  {{#if parent}}{{resolveName}}__Impl(Pointer<Void> handle) : super(handle);{{/if}}{{!!
  }}{{#unless parent}}final Pointer<Void> handle;
  {{resolveName}}__Impl(this.handle);{{/unless}}

  @override
  void release() => _{{resolveName "Ffi"}}_release_handle(handle);

{{#set parent=this}}{{#functions}}
  @override
{{prefixPartial "dart/DartFunction" "  "}}
{{/functions}}{{/set}}
{{#properties}}
{{prefixPartial "dart/DartProperty" "  "}}
{{/properties}}
}

Pointer<Void> {{resolveName "Ffi"}}_toFfi({{resolveName}}__Impl value) =>
  _{{resolveName "Ffi"}}_copy_handle(value._handle);

{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) =>
  {{resolveName}}__Impl(_{{resolveName "Ffi"}}_copy_handle(handle));

void {{resolveName "Ffi"}}_releaseFfiHandle(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}_release_handle(handle);

Pointer<Void> {{resolveName "Ffi"}}_toFfi_nullable({{resolveName}}__Impl value) =>
  value != null ? {{resolveName "Ffi"}}_toFfi(value) : Pointer<Void>.fromAddress(0);

{{resolveName}} {{resolveName "Ffi"}}_fromFfi_nullable(Pointer<Void> handle) =>
  handle.address != 0 ? {{resolveName "Ffi"}}_fromFfi(handle) : null;

void {{resolveName "Ffi"}}_releaseFfiHandle_nullable(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}_release_handle(handle);

// End of {{resolveName}} "private" section.
