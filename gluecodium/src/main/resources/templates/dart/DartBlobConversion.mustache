{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}

import 'dart:ffi';
import 'package:ffi/ffi.dart';

import 'package:{{libraryName}}/src/_library_init.dart' as __lib;

final _Blob_create_handle = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(),
    Pointer<Void> Function()
  >('blob_create_handle');
final _Blob_release_handle = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('blob_release_handle');
final _Blob_insert = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>, Uint8),
    void Function(Pointer<Void>, int)
  >('blob_insert');
final _Blob_iterator = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
>('blob_iterator');
final _Blob_iterator_release_handle = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
>('blob_iterator_release_handle');
final _Blob_iterator_is_valid = __lib.nativeLibrary.lookupFunction<
    Int8 Function(Pointer<Void>, Pointer<Void>),
    int Function(Pointer<Void>, Pointer<Void>)
>('blob_iterator_is_valid');
final _Blob_iterator_increment = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
>('blob_iterator_increment');
final _Blob_iterator_get = __lib.nativeLibrary.lookupFunction<
    Uint8 Function(Pointer<Void>),
    int Function(Pointer<Void>)
>('blob_iterator_get');

Pointer<Void> Blob_toFfi(List<int> value) {
  final _result = _Blob_create_handle();
  for (final element in value) {
    _Blob_insert(_result, element);
  }
  return _result;
}

List<int> Blob_fromFfi(Pointer<Void> handle) {
  final result = List<int>();
  final _iterator_handle = _Blob_iterator(handle);
  while (_Blob_iterator_is_valid(handle, _iterator_handle) != 0) {
    final _element_handle = _Blob_iterator_get(_iterator_handle);
    result.add(_element_handle);
    _Blob_iterator_increment(_iterator_handle);
  }
  _Blob_iterator_release_handle(_iterator_handle);
  return result;
}

void Blob_releaseFfiHandle(Pointer<Void> handle) => _Blob_release_handle(handle);
