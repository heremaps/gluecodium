{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>dart/DartDocumentation}}{{>dart/DartAttributes}}
typedef {{resolveName}} = {{>dart/DartLambdaType}};

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}RegisterFinalizer = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>, Int32, Handle),
    void Function(Pointer<Void>, int, Object)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_register_finalizer'));
final _{{resolveName "Ffi"}}CopyHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_copy_handle'));
final _{{resolveName "Ffi"}}ReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_release_handle'));
final _{{resolveName "Ffi"}}CreateProxy = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Uint64, Int32, Handle, Pointer),
    Pointer<Void> Function(int, int, Object, Pointer)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_create_proxy'));

class {{resolveName}}$Impl {
  final Pointer<Void> handle;
  {{resolveName}}$Impl(this.handle);

{{#set parent=this}}{{#asFunction}}
{{prefixPartial "dart/DartFunction" "  "}}
{{/asFunction}}{{/set}}
}

{{#set lambda=this}}{{#asFunction}}
int _{{resolveName lambda "Ffi"}}{{resolveName}}Static({{!!
}}Object _obj{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiDartTypes"}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}> _result{{/unless}}) {
  {{#unless returnType.isVoid}}{{resolveName returnType.typeRef}}{{!!
  }}{{#unless returnType.typeRef.isNullable}}?{{/unless}} _resultObject;{{/unless}}
  try {
    {{#unless returnType.isVoid}}_resultObject = {{/unless}}{{!!
  }}(_obj as {{resolveName lambda}})({{#parameters}}{{!!
  }}{{#set call="FromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}}){{#if iter.hasNext}}, {{/if}}{{!!
  }}{{/parameters}});{{#unless returnType.isVoid}}
    _result.value = {{#returnType}}{{#set call="ToFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}{{/returnType}}(_resultObject);{{/unless}}
  } finally {
{{#parameters}}
    {{#resolveName}}{{#set varName=this}}{{>dart/DartFfiReleaseHandle}}{{/set}}{{/resolveName}}
{{/parameters}}
  }
  return 0;
}
{{/asFunction}}{{/set}}

Pointer<Void> {{resolveName "Ffi"}}ToFfi({{resolveName}} value) =>
  _{{resolveName "Ffi"}}CreateProxy(
    __lib.getObjectToken(value),
    __lib.LibraryContext.isolateId,
    value,{{#set lambda=this}}{{#asFunction}}
    Pointer.fromFunction<{{>ffiApi}}>(_{{resolveName lambda "Ffi"}}{{resolveName}}Static, __lib.unknownError){{/asFunction}}{{/set}}
  );

{{resolveName}} {{resolveName "Ffi"}}FromFfi(Pointer<Void> handle) {
  final _copiedHandle = _{{resolveName "Ffi"}}CopyHandle(handle);
  final _impl = {{resolveName}}$Impl(_copiedHandle);
  final result = {{#asFunction}}({{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}) => {{!!
  }}_impl.{{resolveName visibility}}{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}){{/asFunction}};
  _{{resolveName "Ffi"}}RegisterFinalizer(_copiedHandle, __lib.LibraryContext.isolateId, result);
  return result;
}

void {{resolveName "Ffi"}}ReleaseFfiHandle(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}ReleaseHandle(handle);

// Nullable {{resolveName}}

{{>dart/DartNullableTypeConversion}}

// End of {{resolveName}} "private" section.{{!!

}}{{+ffiApi}}Int64 Function(Handle{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}>{{/unless}}){{/ffiApi}}
