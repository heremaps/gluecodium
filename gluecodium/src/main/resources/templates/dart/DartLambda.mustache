{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>dart/DartDocumentation}}{{>dart/DartAttributes}}
typedef {{resolveName}} = {{>dart/DartLambdaType}};

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}_copy_handle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_copy_handle'));
final _{{resolveName "Ffi"}}_release_handle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_release_handle'));
final _{{resolveName "Ffi"}}_create_proxy = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Uint64, Int32, Pointer, Pointer),
    Pointer<Void> Function(int, int, Pointer, Pointer)
  >('{{libraryName}}_{{resolveName "Ffi"}}_create_proxy'));

class {{resolveName}}$Impl {
  Pointer<Void> get _handle => handle;
  final Pointer<Void> handle;
  {{resolveName}}$Impl(this.handle);

  void release() => _{{resolveName "Ffi"}}_release_handle(handle);

{{#set parent=this}}{{#asFunction}}
{{prefixPartial "dart/DartFunction" "  "}}
{{/asFunction}}{{/set}}
}

{{#set parent=this}}{{#asFunction}}
int _{{resolveName parent}}_{{resolveName}}_static({{!!
}}int _token{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiDartTypes"}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}> _result{{/unless}}) {
  {{#unless returnType.isVoid}}{{resolveName returnType.typeRef}}{{!!
  }}{{#unless returnType.typeRef.isNullable}}?{{/unless}} _result_object = null;{{/unless}}
  try {
    {{#unless returnType.isVoid}}_result_object = {{/unless}}{{!!
  }}(__lib.instanceCache[_token] as {{resolveName parent}})({{#parameters}}{{!!
  }}{{#set call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}}){{#if iter.hasNext}}, {{/if}}{{!!
  }}{{/parameters}});{{#unless returnType.isVoid}}
    _result.value = {{#returnType}}{{#set call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}{{/returnType}}(_result_object);{{/unless}}
  } finally {
{{#parameters}}
    {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}({{resolveName}});
{{/parameters}}{{#instanceOf returnType.typeRef.type.actualType "LimeClass"}}
    _result_object?.release();
{{/instanceOf}}{{#instanceOf returnType.typeRef.type.actualType "LimeInterface"}}
    _result_object?.release();
{{/instanceOf}}
  }
  return 0;
}
{{/asFunction}}{{/set}}

Pointer<Void> {{resolveName "Ffi"}}_toFfi({{resolveName}} value) {
  final result = _{{resolveName "Ffi"}}_create_proxy(
    __lib.cacheObject(value),
    __lib.LibraryContext.isolateId,
    __lib.uncacheObjectFfi,{{#set parent=this}}{{#asFunction}}
    Pointer.fromFunction<{{>ffiApi}}>(_{{resolveName parent}}_{{resolveName}}_static, __lib.unknownError){{/asFunction}}{{/set}}
  );

  return result;
}

{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) {
  final _impl = {{resolveName}}$Impl(_{{resolveName "Ffi"}}_copy_handle(handle));
  return ({{#asFunction}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{/asFunction}}){{!!
  }} {
    final _result =_impl.{{#asFunction}}{{resolveName visibility}}{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{/asFunction}});
    _impl.release();
    return _result;
  };
}

void {{resolveName "Ffi"}}_releaseFfiHandle(Pointer<Void> handle) =>
  _{{resolveName "Ffi"}}_release_handle(handle);

// Nullable {{resolveName}}

{{>dart/DartNullableTypeConversion}}

// End of {{resolveName}} "private" section.{{!!

}}{{+ffiApi}}Int64 Function(Uint64{{#if parameters}}, {{/if}}{{!!
}}{{#parameters}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
}}{{#unless returnType.isVoid}}, Pointer<{{resolveName returnType.typeRef "FfiApiTypes"}}>{{/unless}}){{/ffiApi}}
