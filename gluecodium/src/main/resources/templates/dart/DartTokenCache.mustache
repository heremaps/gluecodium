{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}

import 'dart:ffi';
import 'package:ffi/ffi.dart';

import 'package:{{libraryName}}/src/_library_context.dart' as __lib;

const unknownError = -1;

int _instanceCounter = 1024;
final Map<int, Object> instanceCache = {};
final Map<Object, int> tokenCache = {};

int cacheObject(Object obj) {
  int? token = tokenCache[obj];
  if (token == null) {
    token = _instanceCounter++;
    instanceCache[token] = obj;
    tokenCache[obj] = token;
  }
  return token;
}

void uncacheObjectByToken(int token) {
  tokenCache.remove(instanceCache[token]);
  instanceCache.remove(token);
}

void uncacheObject(Object object) {
  instanceCache.remove(tokenCache[object]);
  tokenCache.remove(object);
}

final uncacheObjectFfi = Pointer.fromFunction<Void Function(Uint64)>(uncacheObjectByToken);

final ffi_get_cached_token = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
      Uint64 Function(Pointer<Void>, Int32),
      int Function(Pointer<Void>, int)
    >('{{libraryName}}_get_cached_token'));
final ffi_cache_token = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
      Void Function(Pointer<Void>, Int32, Uint64),
      void Function(Pointer<Void>, int, int)
    >('{{libraryName}}_cache_token'));
final ffi_uncache_token = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
      Void Function(Pointer<Void>, Int32),
      void Function(Pointer<Void>, int)
    >('{{libraryName}}_uncache_token'));
