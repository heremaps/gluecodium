{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}

import 'dart:ffi';

import 'package:{{libraryName}}/src/_library_context.dart' as __lib;

final _ffiGetCachedDartHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
      Handle Function(Pointer<Void>, Handle),
      Object? Function(Pointer<Void>, Object?)
    >('{{libraryName}}_get_cached_dart_handle'));
final _ffiCacheDartHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
      Void Function(Pointer<Void>, Int32, Handle),
      void Function(Pointer<Void>, int, Object)
    >('{{libraryName}}_cache_dart_handle'));

const unknownError = -1;

int _instanceCounter = 1024;
final Expando<int> tokenCache = Expando<int>();

// "Token" here is a unique-id stand-in for a Dart object on FFI side, to be used as a cache key where necessary.
// Dart_Handle cannot be used as a cache key in FFI due to lack of meaningful FFI-side hash function.
// Currently these tokens are only used for caching "proxy" objects and nothing else.
int getObjectToken(Object obj) {
  int? token = tokenCache[obj];
  if (token == null) {
    token = _instanceCounter++;
    tokenCache[obj] = token;
  }
  return token;
}

Object? getCachedInstance(Pointer<Void> handle) => _ffiGetCachedDartHandle(handle, null);

void cacheInstance(Pointer<Void> handle, Object obj) => _ffiCacheDartHandle(handle, __lib.LibraryContext.isolateId, obj);
