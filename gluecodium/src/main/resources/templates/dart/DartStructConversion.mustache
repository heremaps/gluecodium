{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}

{{#imports}}
import 'package:{{libraryName}}/src/{{filePath}}.dart'{{#asAlias}} as {{.}}{{/asAlias}};
{{/imports}}

import 'dart:ffi';
import 'package:ffi/ffi.dart';

import 'package:{{libraryName}}/src/_library_init.dart' as __lib;

{{#model}}
final _create_handle = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function({{#fields}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/fields}}),
    Pointer<Void> Function({{#fields}}{{resolveName typeRef "FfiDartTypes"}}{{#if iter.hasNext}}, {{/if}}{{/fields}})
  >('{{resolveName "Ffi"}}_create_handle');
final _release_handle = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{resolveName "Ffi"}}_release_handle');
{{#set parent=this}}{{#fields}}
final _get_field_{{resolveName "Ffi"}} = __lib.nativeLibrary.lookupFunction<
    {{resolveName typeRef "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName typeRef "FfiDartTypes"}} Function(Pointer<Void>)
  >('{{resolveName parent "Ffi"}}_get_field_{{resolveName "Ffi"}}');
{{/fields}}{{/set}}

Pointer<Void> {{resolveName "Ffi"}}_toFfi({{resolveName}} value) {
{{#fields}}
  final _{{resolveName}}_handle = {{#set call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(value.{{resolveName}});
{{/fields}}
  final _result = _create_handle({{#fields}}_{{resolveName}}_handle{{#if iter.hasNext}}, {{/if}}{{/fields}});
{{#fields}}
  {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_{{resolveName}}_handle);
{{/fields}}
  return _result;
}

{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) {
{{#set parent=this}}{{#fields}}
  final _{{resolveName}}_handle = _get_field_{{resolveName "Ffi"}}(handle);
{{/fields}}{{/set}}
  final _result = {{resolveName}}({{#fields}}
    {{#set call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_{{resolveName}}_handle){{#if iter.hasNext}}, {{/if}}
  {{/fields}});
{{#fields}}
  {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_{{resolveName}}_handle);
{{/fields}}
  return _result;
}

void {{resolveName "Ffi"}}_releaseFfiHandle(Pointer<Void> handle) => _release_handle(handle);
{{/model}}
