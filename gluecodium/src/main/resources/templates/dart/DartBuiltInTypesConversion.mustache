{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}

import 'dart:ffi';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:intl/locale.dart';

import 'package:{{libraryName}}/src/_library_context.dart' as __lib;

// Blob

final _blobCreateHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Uint64),
    Pointer<Void> Function(int)
  >('{{libraryName}}_blob_create_handle'));
final _blobReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_blob_release_handle'));
final _blobGetLength = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Uint64 Function(Pointer<Void>),
    int Function(Pointer<Void>)
>('{{libraryName}}_blob_get_length'));
final _blobGetDataPointer = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Uint8> Function(Pointer<Void>),
    Pointer<Uint8> Function(Pointer<Void>)
>('{{libraryName}}_blob_get_data_pointer'));

Pointer<Void> blobToFfi(Uint8List list) {
  final result = _blobCreateHandle(list.length);
  (_blobGetDataPointer(result) as Pointer<Uint8>).asTypedList(list.length).setRange(0, list.length, list);
  return result;
}

Uint8List blobFromFfi(Pointer<Void> handle) =>
  Uint8List.fromList((_blobGetDataPointer(handle) as Pointer<Uint8>).asTypedList(_blobGetLength(handle)));

void blobReleaseFfiHandle(Pointer<Void> handle) => _blobReleaseHandle(handle);

// Boolean

int booleanToFfi(bool value) => value ? 1 : 0;

bool booleanFromFfi(int handle) => handle != 0;

void booleanReleaseFfiHandle(int handle) {}

// Date

int dateToFfi(DateTime value) => value.microsecondsSinceEpoch;

DateTime dateFromFfi(int us) => DateTime.fromMicrosecondsSinceEpoch(us, isUtc: true);

void dateReleaseFfiHandle(int handle) {}

// String

final _stringCreateHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Utf8>),
    Pointer<Void> Function(Pointer<Utf8>)
  >('{{libraryName}}_std_string_create_handle'));
final _stringReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_std_string_release_handle'));
final _stringGetValue = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Utf8> Function(Pointer<Void>),
    Pointer<Utf8> Function(Pointer<Void>)
  >('{{libraryName}}_std_string_get_value'));

Pointer<Void> stringToFfi(String value) {
  final cValue = Utf8.toUtf8(value);
  final result = _stringCreateHandle(cValue);
  free(cValue);
  return result;
}

String stringFromFfi(Pointer<Void> handle) => Utf8.fromUtf8(_stringGetValue(handle));

void stringReleaseFfiHandle(Pointer<Void> handle) => _stringReleaseHandle(handle);

// Locale

final _localeCreateHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>),
    Pointer<Void> Function(Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>)
  >('{{libraryName}}_locale_create_handle'));
final _localeReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_locale_release_handle'));
final _localeGetLanguageCode = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Utf8> Function(Pointer<Void>),
    Pointer<Utf8> Function(Pointer<Void>)
>('{{libraryName}}_locale_get_language_code'));
final _localeGetCountryCode = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Utf8> Function(Pointer<Void>),
    Pointer<Utf8> Function(Pointer<Void>)
>('{{libraryName}}_locale_get_country_code'));
final _localeGetScriptCode = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Utf8> Function(Pointer<Void>),
    Pointer<Utf8> Function(Pointer<Void>)
>('{{libraryName}}_locale_get_script_code'));
final _localeGetLanguageTag = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Utf8> Function(Pointer<Void>),
    Pointer<Utf8> Function(Pointer<Void>)
>('{{libraryName}}_locale_get_language_tag'));

Pointer<Void> localeToFfi(Locale locale) {
  final cLanguageCode = Utf8.toUtf8(locale.languageCode);
  final cCountryCode =
    locale.countryCode != null ? Utf8.toUtf8(locale.countryCode) : Pointer<Utf8>.fromAddress(0);
  final cScriptCode =
    locale.scriptCode != null ? Utf8.toUtf8(locale.scriptCode) : Pointer<Utf8>.fromAddress(0);
  final cLanguageTag = Utf8.toUtf8(locale.toLanguageTag());

  final result = _localeCreateHandle(cLanguageCode, cCountryCode, cScriptCode, cLanguageTag);

  free(cLanguageCode);
  if (cCountryCode.address != 0) free(cCountryCode);
  if (cScriptCode.address != 0) free(cScriptCode);
  free(cLanguageTag);

  return result;
}

Locale localeFromFfi(Pointer<Void> handle) {
  final Pointer<Utf8> languageTagCstring = _localeGetLanguageTag(handle);
  if (languageTagCstring.address != 0) {
    // BCP 47 language tag takes precedence if present.
    return Locale.parse(Utf8.fromUtf8(languageTagCstring));
  }

  final Pointer<Utf8> languageCodeCstring = _localeGetLanguageCode(handle);
  final Pointer<Utf8> countryCodeCstring = _localeGetCountryCode(handle);
  final Pointer<Utf8> scriptCodeCstring = _localeGetScriptCode(handle);

  return Locale.fromSubtags(
    languageCode: languageCodeCstring.address != 0 ? Utf8.fromUtf8(languageCodeCstring) : null,
    countryCode: countryCodeCstring.address != 0 ? Utf8.fromUtf8(countryCodeCstring) : null,
    scriptCode: scriptCodeCstring.address != 0 ? Utf8.fromUtf8(scriptCodeCstring) : null
  );
}

void localeReleaseFfiHandle(Pointer<Void> handle) => _localeReleaseHandle(handle);

{{#builtInTypes}}
// Nullable {{this}}

final _{{resolveName toString "Ffi"}}CreateHandleNullable = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function({{resolveName "FfiApiTypes"}}),
    Pointer<Void> Function({{resolveName "FfiDartTypes"}})
  >('{{libraryName}}_{{this}}_create_handle_nullable'));
final _{{resolveName toString "Ffi"}}ReleaseHandleNullable = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{this}}_release_handle_nullable'));
final _{{resolveName toString "Ffi"}}GetValueNullable = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    {{resolveName "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName "FfiDartTypes"}} Function(Pointer<Void>)
  >('{{libraryName}}_{{this}}_get_value_nullable'));

Pointer<Void> {{resolveName toString "Ffi"}}ToFfiNullable({{resolveName}} value) {
  if (value == null) return Pointer<Void>.fromAddress(0);
  final _handle = {{#unless isNumericType}}{{resolveName toString "Ffi"}}ToFfi{{/unless}}(value);
  final result = _{{resolveName toString "Ffi"}}CreateHandleNullable(_handle);{{#unless isNumericType}}
  {{resolveName toString "Ffi"}}ReleaseFfiHandle(_handle);{{/unless}}
  return result;
}

{{resolveName}} {{resolveName toString "Ffi"}}FromFfiNullable(Pointer<Void> handle) {
  if (handle.address == 0) return null;
  final _handle = _{{resolveName toString "Ffi"}}GetValueNullable(handle);
  final result = {{#unless isNumericType}}{{resolveName toString "Ffi"}}FromFfi{{/unless}}(_handle);{{#unless isNumericType}}
  {{resolveName toString "Ffi"}}ReleaseFfiHandle(_handle);{{/unless}}
  return result;
}

void {{resolveName toString "Ffi"}}ReleaseFfiHandleNullable(Pointer<Void> handle) =>
  _{{resolveName toString "Ffi"}}ReleaseHandleNullable(handle);

{{/builtInTypes}}
