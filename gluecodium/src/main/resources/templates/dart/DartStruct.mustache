{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#functions}}
{{>dart/DartFunctionException}}

{{/functions}}{{!!
}}{{#unless comment.isEmpty}}{{prefix comment "/// "}}
{{/unless}}
class {{resolveName visibility}}{{resolveName}} {
{{#set parent=this}}{{#fields}}{{prefixPartial "dart/DartField" "  "}}
{{/fields}}{{/set}}
{{#if fields}}  {{resolveName}}{{#if constructors}}._{{/if}}({{#fields}}this.{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/fields}});
{{#if constructors}}  {{resolveName}}{{#if constructors}}._copy{{/if}}({{resolveName}} _other) : {{!!
}}this._({{#fields}}_other.{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/fields}});
{{/if}}{{#unless constructors}}{{#if initializedFields}}
  {{resolveName}}.withDefaults({{#uninitializedFields}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/uninitializedFields}})
    : {{#fields}}{{resolveName}} = {{#if defaultValue}}{{resolveName defaultValue}}{{/if}}{{!!
    }}{{#unless defaultValue}}{{resolveName}}{{/unless}}{{#if iter.hasNext}}, {{/if}}{{/fields}};
{{/if}}{{/unless}}{{/if}}
{{#set isInClass=true}}{{#constants}}{{prefixPartial "dart/DartConstant" "  "}}
{{/constants}}{{/set}}
{{#set parent=this isStruct=true}}{{#constructors}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
{{prefixPartial "dartConstructor" "  "}}
{{/constructors}}
{{#functions}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
{{prefixPartial "dart/DartFunction" "  "}}
{{/functions}}{{/set}}
{{#ifHasAttribute "Equatable"}}
  @override
  bool operator ==(dynamic other) {
    if (identical(this, other)) return true;
    if (other is! {{resolveName}}) return false;
    {{resolveName}} _other = other;
    return {{joinPartial fields "dartFieldEq" " &&
        "}};
  }

  @override
  int get hashCode {
    int result = 7;
{{#fields}}
    result = 31 * result + {{resolveName}}.hashCode;
{{/fields}}
    return result;
  }
{{/ifHasAttribute}}
}

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}_create_handle = __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function({{#fields}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/fields}}),
    Pointer<Void> Function({{#fields}}{{resolveName typeRef "FfiDartTypes"}}{{#if iter.hasNext}}, {{/if}}{{/fields}})
  >('{{resolveName "Ffi"}}_create_handle');
final _{{resolveName "Ffi"}}_release_handle = __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{resolveName "Ffi"}}_release_handle');
{{#set parent=this}}{{#fields}}
final _{{resolveName parent "Ffi"}}_get_field_{{resolveName "Ffi"}} = __lib.nativeLibrary.lookupFunction<
    {{resolveName typeRef "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName typeRef "FfiDartTypes"}} Function(Pointer<Void>)
  >('{{resolveName parent "Ffi"}}_get_field_{{resolveName "Ffi"}}');
{{/fields}}{{/set}}

Pointer<Void> {{resolveName "Ffi"}}_toFfi({{resolveName}} value) {
{{#fields}}
  final _{{resolveName}}_handle = {{#set call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(value.{{resolveName}});
{{/fields}}
  final _result = _{{resolveName "Ffi"}}_create_handle({{#fields}}_{{resolveName}}_handle{{#if iter.hasNext}}, {{/if}}{{/fields}});
{{#fields}}
  {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_{{resolveName}}_handle);
{{/fields}}
  return _result;
}

{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) {
{{#set parent=this}}{{#fields}}
  final _{{resolveName}}_handle = _{{resolveName parent "Ffi"}}_get_field_{{resolveName "Ffi"}}(handle);
{{/fields}}{{/set}}
  final _result = {{resolveName}}{{#if constructors}}._{{/if}}({{#fields}}
    {{#set call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_{{resolveName}}_handle){{#if iter.hasNext}}, {{/if}}
  {{/fields}});
{{#fields}}
  {{#set call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_{{resolveName}}_handle);
{{/fields}}
  return _result;
}

void {{resolveName "Ffi"}}_releaseFfiHandle(Pointer<Void> handle) => _{{resolveName "Ffi"}}_release_handle(handle);

// Nullable {{resolveName}}

{{>dart/DartNullableTypeConversion}}

// End of {{resolveName}} "private" section.{{!!

}}{{+dartConstructor}}{{resolveName visibility}}{{resolveName parent}}{{#isNotEq constructors.size 1}}.{{resolveName}}{{/isNotEq}}({{!!
}}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}) : {{!!
}}this._copy(_{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}));
{{/dartConstructor}}{{!!

}}{{+dartFieldEq}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeList"}}DeepCollectionEquality().equals({{resolveName}}, _other.{{resolveName}}){{/instanceOf}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeSet"}}DeepCollectionEquality().equals({{resolveName}}, _other.{{resolveName}}){{/instanceOf}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeMap"}}DeepCollectionEquality().equals({{resolveName}}, _other.{{resolveName}}){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeList"}}{{#notInstanceOf typeRef.type.actualType "LimeSet"}}{{#notInstanceOf typeRef.type.actualType "LimeMap"}}{{!!
}}{{resolveName}} == _other.{{resolveName}}{{/notInstanceOf}}{{/notInstanceOf}}{{/notInstanceOf}}{{!!
}}{{/dartFieldEq}}
