{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unlessPredicate "skipDeclaration"}}
{{#functions}}
{{>dart/DartFunctionException}}

{{/functions}}{{!!
}}{{>dart/DartDocumentation}}{{>dart/DartAttributes}}
{{#if attributes.immutable}}
@immutable{{/if}}
class {{resolveName}}{{#if external.dart.converter}}Internal{{/if}} {
{{#set parent=this}}{{#fields}}{{prefixPartial "dart/DartField" "  "}}
{{/fields}}{{/set}}
{{>dart/DartStructConstructors}}
{{#set isInClass=true}}{{#constants}}{{prefixPartial "dart/DartConstant" "  "}}
{{/constants}}{{/set}}
{{#set parent=this container=this isStruct=true}}{{#constructors}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
  factory {{resolveName parent}}{{#if external.dart.converter}}Internal{{/if}}{{>dart/DartConstructorName}}({{!!
  }}{{#parameters}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}}{{!!
  }}) => $prototype.{{resolveName}}({{#parameters}}{{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/parameters}});
{{/constructors}}
{{#functions}}{{#unless isConstructor}}
{{prefixPartial "dart/DartFunctionDocs" "  "}}
{{prefixPartial "dart/DartFunctionSignature" "  "}}{{>dart/DartRedirectImpl}};
{{/unless}}{{/functions}}{{/set}}
{{#if attributes.equatable}}{{#unless external.dart.converter}}
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! {{resolveName}}) return false;
    {{resolveName}} _other = other;
    return {{joinPartial fields "dartFieldEq" " &&
        "}};
  }

  @override
  int get hashCode {
    int result = 7;
{{#fields}}
    result = 31 * result + {{>dartFieldHash}};
{{/fields}}
    return result;
  }
{{/unless}}{{/if}}
{{#if functions}}

  /// @nodoc
  @visibleForTesting
  static dynamic $prototype = {{resolveName}}$Impl();
{{/if}}
}
{{/unlessPredicate}}

{{#typeAliases}}
{{>dart/DartTypeAlias}}
{{/typeAliases}}
{{#enumerations}}
{{>dart/DartEnumeration}}
{{/enumerations}}
{{#exceptions}}
{{>dart/DartException}}
{{/exceptions}}
{{#structs}}
{{>dart/DartStruct}}
{{/structs}}
{{#classes}}
{{>dart/DartClass}}
{{/classes}}
{{#interfaces}}
{{>dart/DartInterface}}
{{/interfaces}}
{{#lambdas}}
{{>dart/DartLambda}}
{{/lambdas}}

// {{resolveName}} "private" section, not exported.

final _{{resolveName "Ffi"}}CreateHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function({{#fields}}{{resolveName typeRef "FfiApiTypes"}}{{#if iter.hasNext}}, {{/if}}{{/fields}}),
    Pointer<Void> Function({{#fields}}{{resolveName typeRef "FfiDartTypes"}}{{#if iter.hasNext}}, {{/if}}{{/fields}})
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_create_handle'));
final _{{resolveName "Ffi"}}ReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "FfiSnakeCase"}}_release_handle'));
{{#set parent=this}}{{#fields}}
final _{{resolveName parent "Ffi"}}GetField{{resolveName "Ffi"}} = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    {{resolveName typeRef "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName typeRef "FfiDartTypes"}} Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName parent "FfiSnakeCase"}}_get_field_{{resolveName "FfiSnakeCase"}}'));
{{/fields}}{{/set}}

{{#unlessPredicate "skipDeclaration"}}
{{>dart/DartOptimizedLists}}

{{#if functions}}

/// @nodoc
@visibleForTesting
class {{resolveName}}$Impl {
{{#set parent=this isStruct=true ignoreStatic=true addThat=true}}{{#functions}}
{{prefixPartial "dart/DartFunction" "  "}}
{{/functions}}{{/set}}
}
{{/if}}
{{/unlessPredicate}}

Pointer<Void> {{resolveName "Ffi"}}ToFfi({{resolveName this "" "ref"}} value{{#if external.dart.converter}}External{{/if}}) {
{{#if external.dart.converter}}
  final value = {{external.dart.converter}}.convertToInternal(valueExternal);
{{/if}}
{{#fields}}{{#if typeRef.attributes.optimized}}
  final _{{resolveName}}Handle = (value.{{resolveName "visibility"}}{{resolveName}} as __lib.LazyList).handle;
{{/if}}{{#unless typeRef.attributes.optimized}}
  final _{{resolveName}}Handle = {{#set call="ToFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(value.{{resolveName "visibility"}}{{resolveName}});
{{/unless}}{{/fields}}
  final _result = _{{resolveName "Ffi"}}CreateHandle({{#fields}}_{{resolveName}}Handle{{#if iter.hasNext}}, {{/if}}{{/fields}});
{{#fields}}{{#unless typeRef.attributes.optimized}}
  {{#resolveName}}{{#setJoin "varName" "_" this "Handle" delimiter=""}}{{>dart/DartFfiReleaseHandle}}{{/setJoin}}{{/resolveName}}
{{/unless}}{{/fields}}
  return _result;
}

{{resolveName this "" "ref"}} {{resolveName "Ffi"}}FromFfi(Pointer<Void> handle) {
{{#set parent=this}}{{#fields}}
  final _{{resolveName}}Handle = _{{resolveName parent "Ffi"}}GetField{{resolveName "Ffi"}}(handle);
{{/fields}}{{/set}}
  try {
{{#if external.dart.converter}}
    final resultInternal = {{resolveName}}Internal(
{{#set container=this}}{{#fields}}
{{>fromFfiFieldInit}}
{{/fields}}{{/set}}
    );
    return {{external.dart.converter}}.convertFromInternal(resultInternal);
{{/if}}{{#unless external.dart.converter}}
    return {{resolveName this "" "ref"}}{{#set container=this}}{{!!
    }}{{#if container.allFieldsConstructor}}{{#allFieldsConstructor}}{{>dart/DartConstructorName}}{{/allFieldsConstructor}}{{/if}}{{!!
    }}{{#unless container.allFieldsConstructor}}{{#unless container.attributes.dart.positionalDefaults}}{{!!
    }}{{#unlessPredicate container "allFieldsCtorIsPublic"}}._{{/unlessPredicate}}{{/unless}}{{/unless}}(
{{#if attributes.dart.positionalDefaults initializedFields}}
{{#each uninitializedFields initializedFields}}
{{>fromFfiFieldInit}}
{{/each}}
{{/if}}{{!!
}}{{#unless attributes.dart.positionalDefaults initializedFields}}{{!!
}}{{#if container.allFieldsConstructor}}{{#allFieldsConstructor}}
{{#fields}}
{{>fromFfiFieldInit}}
{{/fields}}
{{/allFieldsConstructor}}{{/if}}{{!!
}}{{#unless container.allFieldsConstructor}}
{{#fields}}
{{>fromFfiFieldInit}}
{{/fields}}
{{/unless}}{{!!
}}{{/unless}}{{/set}}
    );
{{/unless}}
  } finally {
{{#fields}}{{#unless typeRef.attributes.optimized}}
    {{#resolveName}}{{#setJoin "varName" "_" this "Handle" delimiter=""}}{{>dart/DartFfiReleaseHandle}}{{/setJoin}}{{/resolveName}}
{{/unless}}{{/fields}}
  }
}
{{#if external.dart.converter constructors}}

{{resolveName}}Internal {{resolveName "Ffi"}}FromFfiInternal(Pointer<Void> handle) {
{{#set parent=this}}{{#fields}}
  final _{{resolveName}}Handle = _{{resolveName parent "Ffi"}}GetField{{resolveName "Ffi"}}(handle);
{{/fields}}{{/set}}
  try {
    return {{resolveName}}Internal._(
{{#set container=this}}{{#fields}}
{{>fromFfiFieldInit}}
{{/fields}}{{/set}}
    );
  } finally {
{{#fields}}{{#unless typeRef.attributes.optimized}}
    {{#resolveName}}{{#setJoin "varName" "_" this "Handle" delimiter=""}}{{>dart/DartFfiReleaseHandle}}{{/setJoin}}{{/resolveName}}
{{/unless}}{{/fields}}
  }
}
{{/if}}

void {{resolveName "Ffi"}}ReleaseFfiHandle(Pointer<Void> handle) => _{{resolveName "Ffi"}}ReleaseHandle(handle);

// Nullable {{resolveName}}

{{>dart/DartNullableTypeConversion}}

// End of {{resolveName}} "private" section.{{!!

}}{{+dartFieldEq}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeList"}}DeepCollectionEquality().equals({{resolveName "visibility"}}{{resolveName}}, _other.{{resolveName "visibility"}}{{resolveName}}){{/instanceOf}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeSet"}}DeepCollectionEquality().equals({{resolveName "visibility"}}{{resolveName}}, _other.{{resolveName "visibility"}}{{resolveName}}){{/instanceOf}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeMap"}}DeepCollectionEquality().equals({{resolveName "visibility"}}{{resolveName}}, _other.{{resolveName "visibility"}}{{resolveName}}){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeList"}}{{#notInstanceOf typeRef.type.actualType "LimeSet"}}{{#notInstanceOf typeRef.type.actualType "LimeMap"}}{{!!
}}{{resolveName "visibility"}}{{resolveName}} == _other.{{resolveName "visibility"}}{{resolveName}}{{/notInstanceOf}}{{/notInstanceOf}}{{/notInstanceOf}}{{!!
}}{{/dartFieldEq}}{{!!

}}{{+dartFieldHash}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeList"}}DeepCollectionEquality().hash({{resolveName "visibility"}}{{resolveName}}){{/instanceOf}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeSet"}}DeepCollectionEquality().hash({{resolveName "visibility"}}{{resolveName}}){{/instanceOf}}{{!!
}}{{#instanceOf typeRef.type.actualType "LimeMap"}}DeepCollectionEquality().hash({{resolveName "visibility"}}{{resolveName}}){{/instanceOf}}{{!!
}}{{#notInstanceOf typeRef.type.actualType "LimeList"}}{{#notInstanceOf typeRef.type.actualType "LimeSet"}}{{#notInstanceOf typeRef.type.actualType "LimeMap"}}{{!!
}}{{resolveName "visibility"}}{{resolveName}}.hashCode{{/notInstanceOf}}{{/notInstanceOf}}{{/notInstanceOf}}{{!!
}}{{/dartFieldHash}}{{!!

}}{{+fromFfiFieldInit}}{{!!
}}      {{#if typeRef.attributes.optimized}}{{!!
}}{{#resolveName}}{{#setJoin "varName" "_" this "Handle" delimiter=""}}{{!!
}}{{#set elementType=typeRef.type.actualType.elementType.type.actualType typeRef=typeRef.type.actualType.elementType}}{{!!
}}{{prefixPartial "dart/InitLazyList" "      " skipFirstLine=true}}{{/set}}{{/setJoin}}{{/resolveName}}{{/if}}{{!!
}}{{#unless typeRef.attributes.optimized}}{{!!
}}{{#set call="FromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_{{resolveName}}Handle){{/unless}}{{#if iter.hasNext}}, {{/if}}
{{/fromFfiFieldInit}}
