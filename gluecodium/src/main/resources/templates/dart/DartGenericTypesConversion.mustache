{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}

{{#imports}}
{{>dart/DartImport}}
{{/imports}}

import 'dart:ffi';

import 'package:{{libraryName}}/src/_library_context.dart' as __lib;

{{#genericTypes}}
final _{{resolveName "FfiCamelCase"}}CreateHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(),
    Pointer<Void> Function()
  >('{{libraryName}}_{{resolveName "Ffi"}}_create_handle'));
final _{{resolveName "FfiCamelCase"}}ReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
  >('{{libraryName}}_{{resolveName "Ffi"}}_release_handle'));
{{#instanceOf this "LimeMap"}}
final _{{resolveName "FfiCamelCase"}}Put = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>, {{resolveName keyType "FfiApiTypes"}}, {{resolveName valueType "FfiApiTypes"}}),
    void Function(Pointer<Void>, {{resolveName keyType "FfiDartTypes"}}, {{resolveName valueType "FfiDartTypes"}})
  >('{{libraryName}}_{{resolveName "Ffi"}}_put'));
{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeMap"}}
final _{{resolveName "FfiCamelCase"}}Insert = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>, {{resolveName elementType "FfiApiTypes"}}),
    void Function(Pointer<Void>, {{resolveName elementType "FfiDartTypes"}})
  >('{{libraryName}}_{{resolveName "Ffi"}}_insert'));
{{/notInstanceOf}}
final _{{resolveName "FfiCamelCase"}}Iterator = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Pointer<Void> Function(Pointer<Void>),
    Pointer<Void> Function(Pointer<Void>)
>('{{libraryName}}_{{resolveName "Ffi"}}_iterator'));
final _{{resolveName "FfiCamelCase"}}IteratorReleaseHandle = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
>('{{libraryName}}_{{resolveName "Ffi"}}_iterator_release_handle'));
final _{{resolveName "FfiCamelCase"}}IteratorIsValid = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Int8 Function(Pointer<Void>, Pointer<Void>),
    int Function(Pointer<Void>, Pointer<Void>)
>('{{libraryName}}_{{resolveName "Ffi"}}_iterator_is_valid'));
final _{{resolveName "FfiCamelCase"}}IteratorIncrement = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    Void Function(Pointer<Void>),
    void Function(Pointer<Void>)
>('{{libraryName}}_{{resolveName "Ffi"}}_iterator_increment'));
{{#instanceOf this "LimeMap"}}
final _{{resolveName "FfiCamelCase"}}IteratorGetKey = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    {{resolveName keyType "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName keyType "FfiDartTypes"}} Function(Pointer<Void>)
>('{{libraryName}}_{{resolveName "Ffi"}}_iterator_get_key'));
final _{{resolveName "FfiCamelCase"}}IteratorGetValue = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    {{resolveName valueType "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName valueType "FfiDartTypes"}} Function(Pointer<Void>)
>('{{libraryName}}_{{resolveName "Ffi"}}_iterator_get_value'));
{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeMap"}}
final _{{resolveName "FfiCamelCase"}}IteratorGet = __lib.catchArgumentError(() => __lib.nativeLibrary.lookupFunction<
    {{resolveName elementType "FfiApiTypes"}} Function(Pointer<Void>),
    {{resolveName elementType "FfiDartTypes"}} Function(Pointer<Void>)
>('{{libraryName}}_{{resolveName "Ffi"}}_iterator_get'));
{{/notInstanceOf}}

Pointer<Void> {{resolveName "Ffi"}}_toFfi({{resolveName}} value) {
  final _result = _{{resolveName "FfiCamelCase"}}CreateHandle();
{{#instanceOf this "LimeMap"}}
  for (final entry in value.entries) {
    final _keyHandle = {{#set typeRef=keyType call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(entry.key);
    final _valueHandle = {{#set typeRef=valueType call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(entry.value);
    _{{resolveName "FfiCamelCase"}}Put(_result, _keyHandle, _valueHandle);
    {{#set typeRef=keyType call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_keyHandle);
    {{#set typeRef=valueType call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_valueHandle);
  }
{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeMap"}}
  for (final element in value) {
    final _elementHandle = {{#set typeRef=elementType call="toFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(element);
    _{{resolveName "FfiCamelCase"}}Insert(_result, _elementHandle);
    {{#set typeRef=elementType call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_elementHandle);
  }
{{/notInstanceOf}}
  return _result;
}

{{resolveName}} {{resolveName "Ffi"}}_fromFfi(Pointer<Void> handle) {
  final result = {{resolveName}}{{#instanceOf this "LimeList"}}.empty(growable: true){{/instanceOf}}{{!!
  }}{{#notInstanceOf this "LimeList"}}(){{/notInstanceOf}};
  final _iteratorHandle = _{{resolveName "FfiCamelCase"}}Iterator(handle);
  while (_{{resolveName "FfiCamelCase"}}IteratorIsValid(handle, _iteratorHandle) != 0) {
{{#instanceOf this "LimeMap"}}
    final _keyHandle = _{{resolveName "FfiCamelCase"}}IteratorGetKey(_iteratorHandle);
    final _valueHandle = _{{resolveName "FfiCamelCase"}}IteratorGetValue(_iteratorHandle);
    try {
      result[{{#set typeRef=keyType call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_keyHandle)] =
        {{#set typeRef=valueType call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_valueHandle);
    } finally {
      {{#set typeRef=keyType call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_keyHandle);
      {{#set typeRef=valueType call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_valueHandle);
    }
{{/instanceOf}}{{!!
}}{{#notInstanceOf this "LimeMap"}}
    final _elementHandle = _{{resolveName "FfiCamelCase"}}IteratorGet(_iteratorHandle);
    try {
      result.add({{#set typeRef=elementType call="fromFfi"}}{{>dart/DartFfiConversionCall}}{{/set}}(_elementHandle));
    } finally {
      {{#set typeRef=elementType call="releaseFfiHandle"}}{{>dart/DartFfiConversionCall}}{{/set}}(_elementHandle);
    }
{{/notInstanceOf}}
    _{{resolveName "FfiCamelCase"}}IteratorIncrement(_iteratorHandle);
  }
  _{{resolveName "FfiCamelCase"}}IteratorReleaseHandle(_iteratorHandle);
  return result;
}

void {{resolveName "Ffi"}}_releaseFfiHandle(Pointer<Void> handle) => _{{resolveName "FfiCamelCase"}}ReleaseHandle(handle);

{{#set self=this internalPrefix=""}}{{#self}}{{>dart/DartNullableTypeConversion}}{{/self}}{{/set}}

{{/genericTypes}}
