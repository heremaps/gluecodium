{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unlessHasAttribute "Cpp" "ExternalType"}}
{{>cpp/CppDocComment}}
struct {{>cpp/CppExportMacro}}{{resolveName}} {
{{#ifHasAttribute "Cpp" "Accessors"}}
private:
{{#fields}}
    {{resolveName typeRef}} {{resolveName}}{{#defaultValue}} = {{resolveName}}{{/defaultValue}};
{{/fields}}
public:
{{/ifHasAttribute}}{{!!
}}{{#unlessHasAttribute "Cpp" "Accessors"}}
{{#set structElement=this}}{{#fields}}
{{prefixPartial "cpp/CppFieldDoc" "    "}}{{!!
}}    {{#ifHasAttribute structElement "Immutable"}}const {{/ifHasAttribute}}{{resolveName typeRef}} {{resolveName}}{{!!
}}{{#defaultValue}} = {{resolveName}}{{/defaultValue}};
{{/fields}}{{/set}}
{{/unlessHasAttribute}}{{!!
}}{{#if fields}}

{{#ifPredicate "hasDefaultConstructor"}}
{{#resolveName constructorComment}}{{#unless this.isEmpty}}
    /**
{{prefix this "     * "}}
     */
{{/unless}}{{/resolveName}}
    {{resolveName}}( );{{/ifPredicate}}{{!!
}}{{#ifPredicate "hasPartialDefaults"}}
{{#resolveName constructorComment}}{{#unless this.isEmpty}}
    /**
{{prefix this "     * "}}
{{#uninitializedFields}}
     * @param {{resolveName}} {{#resolveName comment}}{{prefix this "     * " skipFirstLine=true}}{{/resolveName}}
{{#ifPredicate typeRef "needsNotNullComment"}}
     * \warning @NotNull
{{/ifPredicate}}
{{/uninitializedFields}}
     */
{{/unless}}{{/resolveName}}
    {{resolveName}}( {{#uninitializedFields}}{{!!
    }}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/uninitializedFields}} );{{/ifPredicate}}
{{#resolveName constructorComment}}{{#unless this.isEmpty}}
    /**
{{prefix this "     * "}}
{{#fields}}
     * @param {{resolveName}} {{#resolveName comment}}{{prefix this "     * " skipFirstLine=true}}{{/resolveName}}
{{#ifPredicate typeRef "needsNotNullComment"}}
     * \warning @NotNull
{{/ifPredicate}}
{{/fields}}
     */
{{/unless}}{{/resolveName}}
    {{resolveName}}( {{#fields}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/fields}} );

{{/if}}{{!!
}}{{#ifHasAttribute "Cpp" "Accessors"}}
{{#set structElement=this}}{{#fields}}
{{prefixPartial "cpp/CppFieldDoc" "    "}}
    {{resolveName typeRef}} {{resolveName this "" "getter"}}( ) const { return {{resolveName}}; }{{!!
}}{{#unlessHasAttribute structElement "Immutable"}}
{{prefixPartial "cpp/CppFieldDoc" "    "}}
    void {{resolveName this "" "setter"}}( {{resolveName typeRef}} value_ ) { {{resolveName}} = value_; }{{!!
}}{{/unlessHasAttribute}}
{{/fields}}{{/set}}

{{/ifHasAttribute}}{{!!
}}{{#if functions}}
{{#set isConst=true}}{{#functions}}
{{prefixPartial "cpp/CppFunctionSignature" "    "}};
{{/functions}}{{/set}}

{{/if}}{{!!
}}{{#if constants}}
{{#set storageQualifier="static"}}{{#constants}}
{{prefixPartial "cpp/CppConstant" "    "}}
{{/constants}}{{/set}}

{{/if}}{{!!
}}{{#ifHasAttribute "Equatable"}}
    bool operator==( const {{resolveName}}& rhs ) const;
    bool operator!=( const {{resolveName}}& rhs ) const;

{{/ifHasAttribute}}
};
{{/unlessHasAttribute}}
