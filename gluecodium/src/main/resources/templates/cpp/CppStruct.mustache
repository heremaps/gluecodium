{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unless external.cpp}}
{{>cpp/CppDocComment}}
struct {{>cpp/CppExportMacro}}{{>cpp/CppAttributesInline}}{{resolveName}} {
{{#sort structs constants enumerations}}
{{#instanceOf this "LimeStruct"}}{{prefixPartial "cpp/CppStruct" "    "}}{{/instanceOf}}{{!!
}}{{#instanceOf this "LimeConstant"}}{{#set constant=this storageQualifier="static"}}{{#constant}}{{!!
}}{{prefixPartial "cpp/CppConstant" "    "}}{{/constant}}{{/set}}{{/instanceOf}}{{!!
}}{{#instanceOf this "LimeEnumeration"}}{{prefixPartial "cpp/CppEnumeration" "    "}}{{/instanceOf}}
{{/sort}}
{{#each classes interfaces}}
{{prefixPartial "cpp/CppClass" "    "}}
{{/each}}{{!!

}}{{#if attributes.cpp.accessors}}
private:
{{#fields}}
    {{resolveName typeRef}} {{resolveName}}{{#defaultValue}} = {{resolveName}}{{/defaultValue}};
{{/fields}}
public:
{{/if}}{{!!
}}{{#unless attributes.cpp.accessors}}
{{#set structElement=this}}{{#fields}}
{{prefixPartial "cpp/CppFieldDoc" "    "}}{{prefixPartial "cpp/CppAttributes" "    "}}{{!!
}}    {{#if structElement.attributes.immutable}}const {{/if}}{{resolveName typeRef}} {{resolveName}}{{!!
}}{{#defaultValue}} = {{resolveName}}{{/defaultValue}};
{{/fields}}{{/set}}
{{/unless}}{{!!

}}{{>cpp/CppStructConstructors}}{{!!

}}{{#if attributes.cpp.accessors}}
{{#set structElement=this}}{{#fields}}
{{prefixPartial "cpp/CppFieldDoc" "    "}}
    {{resolveName typeRef}} {{resolveName this "" "getter"}}( ) const { return {{resolveName}}; }{{!!
}}{{#unless structElement.attributes.immutable}}
{{prefixPartial "cpp/CppFieldDoc" "    "}}
    void {{resolveName this "" "setter"}}( {{resolveName typeRef}} value_ ) { {{resolveName}} = value_; }{{!!
}}{{/unless}}
{{/fields}}{{/set}}

{{/if}}
{{#if functions}}
{{#set isConst=true}}{{>cpp/CppFunctions}}{{/set}}

{{/if}}{{!!
}}{{#if attributes.equatable}}
    bool operator==( const {{resolveName}}& rhs ) const;
    bool operator!=( const {{resolveName}}& rhs ) const;

{{/if}}
};
{{/unless}}
