{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unless isExternal}}
{{>cpp/DocComment}}
struct {{>cpp/CppExportMacro}}{{name}} {
{{#if hasAccessors}}
private:
{{#fields}}
    {{type.name}} {{name}}{{#initializer}} = {{name}}{{/initializer}};
{{/fields}}
public:
{{/if}}{{!!
}}{{#unless hasAccessors}}
{{#fields}}
{{#if hasComment}}{{prefixPartial "cpp/CppFieldComment" "    "}}{{/if}}{{!!
}}    {{#if isImmutable}}const {{/if}}{{type.name}} {{name}}{{#initializer}} = {{name}}{{/initializer}};
{{/fields}}
{{/unless}}{{!!
}}{{#if fields}}

{{#if hasDefaultConstructor}}
{{#if constructorComment}}
    /**
{{prefix constructorComment "     * "}}
     */
{{/if}}
    {{name}}( );{{/if}}{{!!
}}{{#if hasPartialDefaults}}
{{#if constructorComment}}
    /**
{{prefix constructorComment "     * "}}
{{#uninitializedFields}}
     * @param {{name}} {{prefix comment.documentation "     * " skipFirstLine=true}}
{{#if isNotNull}}
     * \warning @NotNull
{{/if}}
{{/uninitializedFields}}
     */
{{/if}}
    {{name}}( {{joinPartial uninitializedFields "structConstructorParameter" ", "}} );{{/if}}
{{#if constructorComment}}
    /**
{{prefix constructorComment "     * "}}
{{#fields}}
     * @param {{name}} {{prefix comment.documentation "     * " skipFirstLine=true}}
{{#if isNotNull}}
     * \warning @NotNull
{{/if}}
{{/fields}}
     */
{{/if}}
    {{name}}( {{joinPartial fields "structConstructorParameter" ", "}} );

{{/if}}{{!!
}}{{#if hasAccessors}}
{{#fields}}
{{#if hasComment}}
{{prefixPartial "cpp/CppFieldComment" "    "}}
{{/if}}
    {{type.name}} {{getterName}}( ) const { return {{name}}; }{{#unless isImmutable}}
{{#if hasComment}}
{{prefixPartial "cpp/CppFieldComment" "    "}}
{{/if}}
    void {{setterName}}( {{type.name}} value_ ) { {{name}} = value_; }{{/unless}}
{{/fields}}

{{/if}}{{!!
}}{{#if methods}}
{{#methods}}
{{prefixPartial "cpp/CppMethodSignature" "    "}};
{{/methods}}

{{/if}}{{!!
}}{{#if constants}}
{{#constants}}
{{#set storageQualifier="static"}}{{prefixPartial "cpp/CppConstant" "    "}}{{/set}}
{{/constants}}

{{/if}}{{!!
}}{{#if isEquatable}}
    bool operator==( const {{name}}& rhs ) const;
    bool operator!=( const {{name}}& rhs ) const;

{{/if}}
};
{{/unless}}{{!!

}}{{+structConstructorParameter}}{{type.name}} {{name}}{{/structConstructorParameter}}
