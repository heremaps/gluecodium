{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unless external.cpp}}{{!!
}}{{>cpp/CppDocComment}}
class {{>cpp/CppExportMacro}}{{>cpp/CppAttributesInline}}{{resolveName}}{{!!
}}{{#if this.parent}}: public {{resolveName this.parent.type "FQN"}}{{/if}} {
public:
    {{resolveName}}();
    virtual ~{{resolveName}}() = 0;

{{#if enumerations typeAliases structs constants classes interfaces lambdas logic="or"}}
public:
{{#sort enumerations lambdas typeAliases structs constants}}
{{#instanceOf this "LimeEnumeration"}}{{prefixPartial "cpp/CppEnumeration" "    "}}{{/instanceOf}}{{!!
}}{{#instanceOf this "LimeLambda"}}{{prefixPartial "cpp/CppLambda" "    "}}{{/instanceOf}}{{!!
}}{{#instanceOf this "LimeTypeAlias"}}{{prefixPartial "cpp/CppTypeAlias" "    "}}{{/instanceOf}}{{!!
}}{{#instanceOf this "LimeStruct"}}{{prefixPartial "cpp/CppStruct" "    "}}{{/instanceOf}}{{!!
}}{{#instanceOf this "LimeConstant"}}{{#set constant=this storageQualifier="static"}}{{#constant}}{{!!
}}{{prefixPartial "cpp/CppConstant" "    "}}{{/constant}}{{/set}}{{/instanceOf}}
{{/sort}}
{{#each classes interfaces}}
{{prefixPartial "cpp/CppClass" "    "}}
{{/each}}
{{/if}}
{{#if functions properties logic="or"}}
public:
{{#set isVirtual=true}}{{#functions}}{{#ifPredicate "hasCstringParameters"}}{{#set self=this useCstring=true}}{{#self}}
{{prefixPartial "cpp/CppFunctionSignature" "    "}};
{{/self}}{{/set}}{{/ifPredicate}}
{{prefixPartial "cpp/CppFunctionSignature" "    "}};
{{/functions}}{{/set}}
{{#properties}}
{{prefixPartial "cpp/CppProperty" "    "}}
{{/properties}}

{{/if}}
{{#if attributes.equatable}}
public:
    bool operator==( const {{resolveName}}& rhs );
    bool operator!=( const {{resolveName}}& rhs );
{{/if}}
};{{!!
}}{{/unless}}
