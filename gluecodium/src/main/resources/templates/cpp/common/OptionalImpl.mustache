{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2019 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#pragma once

#include "Hash.h"
#include <functional>
#include <initializer_list>
#include <new>
#include <stdexcept>
#include <type_traits>

{{#internalNamespace}}
namespace {{.}} {
{{/internalNamespace}}

namespace details {
template <
        class TypeFirst,
        class TypeSecond = TypeFirst,
        bool IsNotVoid = !std::is_void<TypeFirst>::value && !std::is_void<TypeSecond>::value>
struct IsSwappableWith
{
private:
    struct SwapNotAllowed
    {
    };

    template <class First, class Second>
    static decltype(std::swap(std::declval<First>(), std::declval<Second>()))
    check_swap(int);

    template <class, class>
    static SwapNotAllowed
    check_swap(long);

    typedef decltype(check_swap<TypeFirst, TypeSecond>(0)) SwapTypeFirst;
    typedef decltype(check_swap<TypeSecond, TypeFirst>(0)) SwapTypeSecond;

public:
    static const bool value = !std::is_same<SwapTypeFirst, SwapNotAllowed>::value &&
                              !std::is_same<SwapTypeSecond, SwapNotAllowed>::value;
};

template <class TypeFirst, class TypeSecond>
struct IsSwappableWith<TypeFirst, TypeSecond, false> : std::false_type
{
};

template <
        class TypeFirst,
        class TypeSecond = TypeFirst,
        bool IsSwappable = IsSwappableWith<TypeFirst, TypeSecond>::value>
struct IsNothrowSwappableWith
{
    static const bool value =
            noexcept(std::swap(std::declval<TypeFirst>(), std::declval<TypeSecond>())) &&
            noexcept(std::swap(std::declval<TypeSecond>(), std::declval<TypeFirst>()));
};

template <class Type>
struct IsNothrowSwappable
    : public std::integral_constant<bool, IsNothrowSwappableWith<Type&>::value>
{
};

} // namespace details

// In C++11 constexpr also applies const, so we need not to make non-const members constexpr
# if (defined __cplusplus) && (__cplusplus <= 201103L)
#   define GLUECODIUM_OPTIONAL_CONSTEXPR
# else
#   define GLUECODIUM_OPTIONAL_CONSTEXPR constexpr
# endif

class bad_optional_access : public std::logic_error
{
public:
    explicit bad_optional_access(const std::string& error_text)
        : logic_error(error_text)
    {
    }

    explicit bad_optional_access(const char* error_text)
        : logic_error(error_text)
    {
    }
};

struct in_place_t
{
};
constexpr in_place_t in_place{};

struct nullopt_t
{
    explicit constexpr nullopt_t(int) noexcept {}
};
constexpr nullopt_t nullopt{0};

template <class ValueType, bool = std::is_trivially_destructible<ValueType>::value>
class OptionalBase
{
protected:
    typedef ValueType value_type;

    union
    {
        char m_null_state;
        value_type m_value;
    };

    bool m_has_value = false;

    constexpr OptionalBase() noexcept
        : m_null_state('\0')
    {
    }

    ~OptionalBase()
    {
        if (m_has_value)
        {
            destroy_value();
        }
    }

    OptionalBase(const OptionalBase& that)
        : m_has_value(that.m_has_value)
    {
        if (m_has_value)
        {
            ::new (std::addressof(m_value)) value_type(that.m_value);
        }
    }

    OptionalBase(OptionalBase&& that) noexcept(
            std::is_nothrow_move_constructible<value_type>::value)
        : m_has_value(that.m_has_value)
    {
        if (m_has_value)
        {
            ::new (std::addressof(m_value)) value_type(std::move(that.m_value));
        }
    }

    constexpr OptionalBase(const value_type& value)
        : m_value(value)
        , m_has_value(true)
    {
    }

    constexpr OptionalBase(value_type&& value)
        : m_value(std::move(value))
        , m_has_value(true)
    {
    }

    template <class... Args>
    constexpr explicit OptionalBase(in_place_t, Args&&... args)
        : m_value(std::forward<Args>(args)...)
        , m_has_value(true)
    {
    }

    void
    destroy_value()
    {
        m_value.~value_type();
    }
};

template <class ValueType>
class OptionalBase<ValueType, true>
{
protected:
    typedef ValueType value_type;

    union
    {
        char m_null_state;
        value_type m_value;
    };

    bool m_has_value = false;

    constexpr OptionalBase() noexcept
        : m_null_state('\0')
    {
    }

    OptionalBase(const OptionalBase& that)
        : m_has_value(that.m_has_value)
    {
        if (m_has_value)
        {
            ::new (std::addressof(m_value)) value_type(that.m_value);
        }
    }

    OptionalBase(OptionalBase&& that) noexcept(
            std::is_nothrow_move_constructible<value_type>::value)
        : m_has_value(that.m_has_value)
    {
        if (m_has_value)
        {
            ::new (std::addressof(m_value)) value_type(std::move(that.m_value));
        }
    }

    constexpr OptionalBase(const value_type& value)
        : m_value(value)
        , m_has_value(true)
    {
    }

    constexpr OptionalBase(value_type&& value)
        : m_value(std::move(value))
        , m_has_value(true)
    {
    }

    template <class... Args>
    constexpr explicit OptionalBase(in_place_t, Args&&... args)
        : m_value(std::forward<Args>(args)...)
        , m_has_value(true)
    {
    }

    void
    destroy_value()
    {
    }
};

template <class ValueType>
class Optional : private OptionalBase<ValueType>
{
    typedef OptionalBase<ValueType> BaseType;

public:
    typedef ValueType value_type;
    static_assert(
            !std::is_reference<value_type>::value, "Optional doesn't work with reference type.");
    static_assert(
            !std::is_same<typename std::remove_cv<value_type>::type, in_place_t>::value,
            "Don't use Optional with in_place_t type.");
    static_assert(
            !std::is_same<typename std::remove_cv<value_type>::type, nullopt_t>::value,
            "Don't use Optional with nullopt_t type.");
    static_assert(std::is_object<value_type>::value, "Don't use Optional with non-object type.");
    static_assert(
            std::is_nothrow_destructible<value_type>::value,
            "Don't use Optional with object type that is not noexcept destructible.");

    constexpr Optional() noexcept {}
    Optional(const Optional&) = default;
    Optional(Optional&&) = default;
    ~Optional() = default;

    constexpr Optional(nullopt_t) noexcept {}

    constexpr Optional(const value_type& value)
        : BaseType(value)
    {
    }

    constexpr Optional(value_type&& value)
        : BaseType(std::move(value))
    {
    }

    template <
            class... Args,
            class = typename std::enable_if<
                    std::is_constructible<value_type, Args...>::value>::type>
    constexpr explicit Optional(in_place_t, Args&&... args)
        : BaseType(in_place, std::forward<Args>(args)...)
    {
    }

    template <
            class ListType,
            class... Args,
            class = typename std::enable_if<
                    std::is_constructible<value_type, std::initializer_list<ListType>&, Args...>::
                            value>::type>
    constexpr explicit Optional(in_place_t, std::initializer_list<ListType> list, Args&&... args)
        : BaseType(in_place, list, std::forward<Args>(args)...)
    {
    }

    Optional& operator=(nullopt_t) noexcept
    {
        if (has_value())
        {
            this->destroy_value();
            this->m_has_value = false;
        }
        return *this;
    }

    Optional&
    operator=(const Optional& that)
    {
        if (has_value() == that.has_value())
        {
            if (has_value())
            {
                this->m_value = that.m_value;
            }
        }
        else
        {
            if (has_value())
            {
                this->destroy_value();
            }
            else
            {
                ::new (std::addressof(this->m_value)) value_type(that.m_value);
            }
            this->m_has_value = that.m_has_value;
        }
        return *this;
    }

    Optional&
    operator=(Optional&& that) noexcept(
            std::is_nothrow_move_assignable<value_type>::value&&
                    std::is_nothrow_move_constructible<value_type>::value)
    {
        if (has_value() == that.has_value())
        {
            if (has_value())
            {
                this->m_value = std::move(that.m_value);
            }
        }
        else
        {
            if (has_value())
            {
                this->destroy_value();
            }
            else
            {
                ::new (std::addressof(this->m_value)) value_type(std::move(that.m_value));
            }
            this->m_has_value = that.m_has_value;
        }
        return *this;
    }

    template <
            class OtherValueType,
            class = typename std::enable_if<
                    std::is_same<typename std::remove_reference<OtherValueType>::type, value_type>::
                            value &&
                    std::is_constructible<value_type, OtherValueType>::value &&
                    std::is_assignable<value_type&, OtherValueType>::value>::type>
    Optional&
    operator=(OtherValueType&& value)
    {
        if (has_value())
        {
            this->m_value = std::forward<OtherValueType>(value);
        }
        else
        {
            ::new (std::addressof(this->m_value)) value_type(std::forward<OtherValueType>(value));
            this->m_has_value = true;
        }
        return *this;
    }

    template <
            class... Args,
            class = typename std::enable_if<
                    std::is_constructible<value_type, Args...>::value>::type>
    void
    emplace(Args&&... args)
    {
        *this = nullopt;
        ::new (std::addressof(this->m_value)) value_type(std::forward<Args>(args)...);
        this->m_has_value = true;
    }

    template <
            class ListType,
            class... Args,
            class = typename std::enable_if<
                    std::is_constructible<value_type, std::initializer_list<ListType>&, Args...>::
                            value>::type>
    void
    emplace(std::initializer_list<ListType> list, Args&&... args)
    {
        *this = nullopt;
        ::new (std::addressof(this->m_value)) value_type(list, std::forward<Args>(args)...);
        this->m_has_value = true;
    }

    void
    swap(Optional& that) noexcept(std::is_nothrow_move_constructible<value_type>::value&&
                                          details::IsNothrowSwappable<value_type>::value)
    {
        using std::swap;
        if (has_value() == that.has_value())
        {
            if (has_value())
                swap(this->m_value, that.m_value);
        }
        else
        {
            if (has_value())
            {
                ::new (std::addressof(that.m_value)) value_type(std::move(this->m_value));
                this->destroy_value();
            }
            else
            {
                ::new (std::addressof(this->m_value)) value_type(std::move(that.m_value));
                that.destroy_value();
            }
            swap(this->m_has_value, that.m_has_value);
        }
    }

    constexpr value_type const* operator->() const
    {
        return std::addressof(this->m_value);
    }

    GLUECODIUM_OPTIONAL_CONSTEXPR value_type* operator->()
    {
        return std::addressof(this->m_value);
    }

    constexpr const value_type& operator*() const&
    {
        return this->m_value;
    }

    constexpr const value_type&& operator*() const&&
    {
        return std::move(this->m_value);
    }

    GLUECODIUM_OPTIONAL_CONSTEXPR value_type& operator*() &
    {
        return this->m_value;
    }

    GLUECODIUM_OPTIONAL_CONSTEXPR value_type&& operator*() &&
    {
        return std::move(this->m_value);
    }

    constexpr bool
    has_value() const noexcept
    {
        return this->m_has_value;
    }
    constexpr explicit operator bool() const noexcept
    {
        return has_value();
    }

    GLUECODIUM_OPTIONAL_CONSTEXPR value_type const&
    value() const&
    {
        if (!has_value())
        {
            throw bad_optional_access("Optional doesn't have value");
        }
        return **this;
    }

    GLUECODIUM_OPTIONAL_CONSTEXPR value_type&
    value() &
    {
        if (!has_value())
        {
            throw bad_optional_access("Optional doesn't have value");
        }
        return **this;
    }

    GLUECODIUM_OPTIONAL_CONSTEXPR value_type const&&
    value() const&&
    {
        if (!has_value())
        {
            throw bad_optional_access("Optional doesn't have value");
        }
        return std::move(this->m_value);
    }

    GLUECODIUM_OPTIONAL_CONSTEXPR value_type&&
    value() &&
    {
        if (!has_value())
        {
            throw bad_optional_access("Optional doesn't have value");
        }
        return std::move(this->m_value);
    }

    template <class ReturnType>
    constexpr value_type
    value_or(ReturnType&& return_value) const&
    {
        static_assert(
                std::is_copy_constructible<value_type>::value,
                "ValueType must be copy constructible");
        static_assert(
                std::is_convertible<ReturnType, value_type>::value,
                "ReturnType must be convertible to ValueType");
        return this->has_value() ? **this
                                 : static_cast<value_type>(std::forward<ReturnType>(return_value));
    }

    template <class ReturnType>
    GLUECODIUM_OPTIONAL_CONSTEXPR value_type
    value_or(ReturnType&& return_value) &&
    {
        static_assert(
                std::is_move_constructible<value_type>::value,
                "ValueType must be move constructible");
        static_assert(
                std::is_convertible<ReturnType, value_type>::value,
                "ReturnType must be convertible to ValueType");
        return this->has_value() ? std::move(this->m_value)
                                 : static_cast<value_type>(std::forward<ReturnType>(return_value));
    }
};

template <class ValueType>
inline void
swap(Optional<ValueType>& left, Optional<ValueType>& right) noexcept(noexcept(left.swap(right)))
{
    left.swap(right);
}

template <class ValueType>
inline constexpr Optional<typename std::decay<ValueType>::type>
make_optional(ValueType&& value)
{
    return Optional<typename std::decay<ValueType>::type>(std::forward<ValueType>(value));
}
{{#internalNamespace}}
}
{{/internalNamespace}}
