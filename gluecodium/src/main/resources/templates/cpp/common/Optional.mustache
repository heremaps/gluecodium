{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2019 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#pragma once
#include "Hash.h"

/*
 * This header is used to define the optional type used by Gluecodium. If nothing else is defined
 * it will use std::optional if available and fallback to a built-in optional implementation
 * otherwise. To use custom optional implementation, GLUECODIUM_OPTIONAL_HEADER and GLUECODIUM_OPTIONAL_TYPE
 * need to be defined. The optional will be used in the internal namespace.
 *
 * For example, to use optional from experimental define the following macros
 *
 * #define GLUECODIUM_OPTIONAL_HEADER <experimental/optional>
 * #define GLUECODIUM_OPTIONAL_TYPE std::experimental::optional
 * #define GLUECODIUM_OPTIONAL_HELPER_TYPES auto nullopt = std::experimental::nullopt; \
 *                                      auto in_place = std::experimental::in_place;
 *
 * GLUECODIUM_OPTIONAL_HELPER_TYPES is just a convenience macro to have these available in the same
 * namespace as the optional type. These are not necessary for Gluecodium to use the optional type
 * itself.
 */

#if (defined(GLUECODIUM_OPTIONAL_HEADER) && !defined(GLUECODIUM_OPTIONAL_TYPE)) || \
      (!defined(GLUECODIUM_OPTIONAL_HEADER) && defined(GLUECODIUM_OPTIONAL_TYPE))
# error "Either both GLUECODIUM_OPTIONAL_HEADER and GLUECODIUM_OPTIONAL_TYPE or neither of them must be defined"
#endif

#if !defined(GLUECODIUM_OPTIONAL_HEADER) && !defined(GLUECODIUM_OPTIONAL_TYPE)
#  if (defined(_MSC_VER) && _MSC_VER >= 1911 && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L
#    define GLUECODIUM_OPTIONAL_HEADER <optional>
#    define GLUECODIUM_OPTIONAL_TYPE std::optional
#    define GLUECODIUM_OPTIONAL_HELPER_TYPES using std::nullopt; \
                                             using std::in_place; \
                                             using std::bad_optional_access;
#  else
#    define GLUECODIUM_OPTIONAL_HEADER "OptionalImpl.h"
#    define GLUECODIUM_OPTIONAL_TYPE {{>common/InternalNamespace}}Optional
#  endif
#endif // !defined(GLUECODIUM_OPTIONAL_HEADER) && !defined(GLUECODIUM_OPTIONAL_TYPE)

#include GLUECODIUM_OPTIONAL_HEADER

{{#internalNamespace}}
namespace {{.}} {
{{/internalNamespace}}
template<typename T>
using optional = GLUECODIUM_OPTIONAL_TYPE<T>;
#ifdef GLUECODIUM_OPTIONAL_HELPER_TYPES
GLUECODIUM_OPTIONAL_HELPER_TYPES
#endif

template <class ValueType>
struct hash<{{>common/InternalNamespace}}optional<ValueType>>
{
    size_t
    operator()(const {{>common/InternalNamespace}}optional<ValueType>& optional_value) const noexcept
    {
        return static_cast<bool>( optional_value ) ? {{>common/InternalNamespace}}hash<ValueType>( )( *optional_value ) : 0;
    }
};

{{#internalNamespace}}
}
{{/internalNamespace}}
