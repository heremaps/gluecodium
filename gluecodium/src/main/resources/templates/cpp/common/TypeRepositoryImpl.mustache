{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2019 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#include "{{#internalNamespace}}{{.}}/{{/internalNamespace}}TypeRepository.h"
#include "{{#internalNamespace}}{{.}}/{{/internalNamespace}}Mutex.h"
#include <unordered_map>

{{#internalNamespace}}
namespace {{.}} {
{{/internalNamespace}}

struct TypeRepository::Impl
{
    std::unordered_map<const void*, TypeId> m_repo;
    mutable Mutex m_mutex;
};

TypeRepository::TypeRepository()
    : pimpl(new TypeRepository::Impl())
{
}

TypeRepository::~TypeRepository()
{
    delete pimpl;
}

void
TypeRepository::add_type(const void* instance, const std::string& id)
{
    WriteLock lock(pimpl->m_mutex);
    pimpl->m_repo[instance] = id;
}

std::string
TypeRepository::get_id(const void* instance) const
{
    ReadLock lock(pimpl->m_mutex);
    const auto& found = pimpl->m_repo.find(instance);
    return found != pimpl->m_repo.end() ? found->second : "";
}

void
TypeRepository::remove_type(const void* instance)
{
    WriteLock lock(pimpl->m_mutex);
    pimpl->m_repo.erase(instance);
}

TypeRepository& get_type_repository(const void*)
{
    static TypeRepository s_repo;
    return s_repo;
}

{{#internalNamespace}}
}
{{/internalNamespace}}
