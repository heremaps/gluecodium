{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2020 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#pragma once

#include "Hash.h"
#include "Optional.h"
#include <string>

{{#internalNamespace}}
namespace {{.}} {
{{/internalNamespace}}

/**
 * Represents an ISO locale, optionally with a corresponding BCP 47 language tag.
 */
struct Locale {
    Locale();
    explicit Locale(optional<std::string> language_tag);
    Locale(optional<std::string> language_code, optional<std::string> country_code);
    Locale(optional<std::string> language_code,
           optional<std::string> country_code,
           optional<std::string> script_code);
    Locale(optional<std::string> language_code,
           optional<std::string> country_code,
           optional<std::string> script_code,
           optional<std::string> language_tag);
    explicit Locale(std::string language_tag);
    Locale(std::string language_code, std::string country_code);
    Locale(std::string language_code,
           std::string country_code,
           std::string script_code);
    Locale(std::string language_code,
           std::string country_code,
           std::string script_code,
           std::string language_tag);

    /// ISO 639-1 language code (2-letter)
    optional<std::string> language_code;
    /// ISO 3166-1 alpha-2 country code (2-letter)
    optional<std::string> country_code;
    /// ISO 15924 script code (4-letter)
    optional<std::string> script_code;
    /// BCP 47 language tag
    optional<std::string> language_tag;

    bool operator==(const Locale& rhs) const;
    bool operator!=(const Locale& rhs) const;
};

template<>
struct hash<Locale>
{
    size_t operator()(const Locale& t) const noexcept;
};

{{#internalNamespace}}
}
{{/internalNamespace}}
