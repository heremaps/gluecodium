{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>cpp/CppCommentHeader}}

#pragma once

{{#if includes}}
{{#includes}}
{{>common/Include}}
{{/includes}}

{{/if}}
{{#if forwardDeclarations}}
{{#rootNamespace}}
namespace {{this}} {
{{/rootNamespace}}
{{#forwardDeclarations}}
{{>forwardDeclarationGroup}}
{{/forwardDeclarations}}
{{#rootNamespace}}
}
{{/rootNamespace}}

{{/if}}
{{#namespace}}
namespace {{this}} {
{{/namespace}}
{{#model}}
{{include contentTemplate}}
{{/model}}

{{#errorEnums}}
{{>cpp/CppExportMacro}}::std::error_code make_error_code( {{resolveName "FQN"}} value ) noexcept;
{{/errorEnums}}
{{#namespace}}
}
{{/namespace}}
{{#if errorEnums}}

namespace std
{
{{#errorEnums}}
template <>
struct is_error_code_enum< {{resolveName "FQN"}} > : public std::true_type { };
{{/errorEnums}}
}
{{/if}}
{{#if equatables}}

{{#internalNamespace}}
namespace {{this}} {
{{/internalNamespace}}
{{#equatables}}
template<>
struct hash< {{resolveName "FQN"}} > {
    {{>cpp/CppExportMacro}}std::size_t operator( )( const {{resolveName "FQN"}}& t ) const;
};
{{#notInstanceOf this "LimeStruct"}}
/**
 * Specialization of the hash-like function object for `std::shared_ptr`, comparing the contained
 * class instead of the pointer value.
 */
template <>
struct EqualityHash< std::shared_ptr< {{resolveName "FQN"}} > >
{
    {{>cpp/CppExportMacro}}std::size_t operator( )( const std::shared_ptr< {{resolveName "FQN"}} >& t ) const;
};
{{/notInstanceOf}}
{{/equatables}}
{{#internalNamespace}}
}
{{/internalNamespace}}
{{/if}}{{!!

}}{{+forwardDeclarationGroup}}
namespace {{namespace}} {
{{#types}}
    class {{this}};
{{/types}}
{{#subGroups}}
{{>forwardDeclarationGroup}}
{{/subGroups}}
}
{{/forwardDeclarationGroup}}
