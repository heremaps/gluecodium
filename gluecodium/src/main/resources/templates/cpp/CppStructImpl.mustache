{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#set structElement=this}}{{#unless external.cpp}}{{!!
}}{{#resolveName structElement}}{{#setJoin "parentName" parentName this delimiter="::"}}{{#structElement}}
{{#enumerations}}
{{>cpp/CppEnumerationImpl}}
{{/enumerations}}
{{#structs}}
{{>cpp/CppStructImpl}}
{{/structs}}
{{#constants}}
{{>cpp/CppConstantImpl}}
{{/constants}}
{{#each classes interfaces}}
{{>cpp/CppClassImpl}}
{{/each}}
{{>cpp/CppStructConstructorsImpl}}
{{#if attributes.equatable}}
bool {{parentName}}::operator==( const {{resolveName}}& rhs ) const
{
    return {{joinPartial fields "fieldEq" " &&
        " }};
}

bool {{parentName}}::operator!=( const {{resolveName}}& rhs ) const
{
    return !( *this == rhs );
}

{{/if}}{{!!
}}{{/structElement}}{{/setJoin}}{{/resolveName}}{{/unless}}{{!!

}}{{#if external.cpp}}
{{#resolveName structElement "FQN"}}{{#set structName=this}}{{#fields}}
{{#resolveName this "" "getter"}}
static_assert(
    std::is_same<
        {{resolveName typeRef}},
        std::remove_cv<std::remove_reference<decltype(((const {{structName}}*)nullptr)->{{this}}())>::type>::type
    >::value,
    "Expected '{{resolveName typeRef}}' return type for '{{structName}}::{{this}}'."
);
{{/resolveName}}
{{#resolveName this "" "setter"}}
static_assert(
    std::is_same<
        void,
        decltype((({{structName}}*)nullptr)->{{this}}(*(({{resolveName typeRef}}*)nullptr)))
    >::value,
    "Expected 'void' return type for '{{structName}}::{{this}}'."
);
{{/resolveName}}
{{#unless structElement.attributes.cpp.accessors}}{{!!
}}{{#unless external.cpp.getterName}}{{#unless external.cpp.setterName}}
static_assert(
    std::is_same<{{resolveName typeRef}}, decltype({{structName}}::{{resolveName}})>::value,
    "Expected '{{resolveName typeRef}}' type for '{{structName}}::{{resolveName}}'."
);
{{/unless}}{{/unless}}{{/unless}}
{{/fields}}
{{#set className=structName}}{{#functions}}
{{>cpp/CppFunctionStaticCheck}}
{{/functions}}{{/set}}{{!!
}}{{/set}}{{/resolveName}}{{/if}}{{/set}}{{!!

}}{{+fieldEq}}{{#ifPredicate "needsPointerValueEqual"}}( ( {{resolveName}} && rhs.{{resolveName}} )
            ? {{#ifPredicate "needsRawPointerEqual"}}( &*{{resolveName}} == &*rhs.{{resolveName}} ){{/ifPredicate}}{{!!
            }}{{#unlessPredicate "needsRawPointerEqual"}}( *{{resolveName}} == *rhs.{{resolveName}} ){{/unlessPredicate}}
            : ( static_cast< bool >( {{resolveName}} ) == static_cast< bool >( rhs.{{resolveName}} ) ) ){{!!
}}{{/ifPredicate}}{{#unlessPredicate "needsPointerValueEqual"}}{{!!
}}{{resolveName}} == rhs.{{resolveName}}{{/unlessPredicate}}{{/fieldEq}}
