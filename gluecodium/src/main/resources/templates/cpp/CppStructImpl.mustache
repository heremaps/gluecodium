{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#unless isExternal}}{{!!
}}{{#set structName=name}}{{#constants}}
const {{type.name}} {{#parentName}}{{.}}::{{/parentName}}{{structName}}::{{name}} = {{value.name}};
{{/constants}}{{/set}}{{!!
}}{{#if fields}}
{{#if hasDefaultConstructor}}{{#parentName}}{{.}}::{{/parentName}}{{name}}::{{name}}( ){{#if uninitializedFields}}
    : {{#uninitializedFields}}{{name}}{ }{{#if iter.hasNext}}, {{/if}}{{/uninitializedFields}}{{/if}}
{
}{{/if}}
{{#if hasPartialDefaults}}

{{#parentName}}{{.}}::{{/parentName}}{{name}}::{{name}}( {{joinPartial uninitializedFields "structConstructorParameter" ", "}} )
    : {{#uninitializedFields}}{{name}}{{#initializer}}( std::move( {{name}} ) ){{/initializer}}{{!!
}}{{^initializer}}( std::move( {{name}} ) ){{/initializer}}{{#if iter.hasNext}}, {{/if}}{{/uninitializedFields}}
{
}{{/if}}

{{#parentName}}{{.}}::{{/parentName}}{{name}}::{{name}}( {{joinPartial fields "structConstructorParameter" ", "}} )
    : {{#fields}}{{name}}( std::move( {{name}} ) ){{#if iter.hasNext}}, {{/if}}{{/fields}}
{
}

{{/if}}{{!!
}}{{#if isEquatable}}
bool {{#parentName}}{{.}}::{{/parentName}}{{name}}::operator==( const {{name}}& rhs ) const
{
    return {{joinPartial fields "fieldEq" " &&
        " }};
}

bool {{#parentName}}{{.}}::{{/parentName}}{{name}}::operator!=( const {{name}}& rhs ) const
{
    return !( *this == rhs );
}

{{/if}}{{/unless}}{{!!

}}{{#if isExternal}}
{{#set structName=fullyQualifiedName}}{{#fields}}
{{#if getterName}}
static_assert(
    std::is_same<
        {{type.name}},
        std::remove_cv<std::remove_reference<decltype(((const {{structName}}*)nullptr)->{{getterName}}())>::type>::type
    >::value,
    "Expected '{{type.name}}' return type for '{{structName}}::{{getterName}}'."
);
{{/if}}
{{#if setterName}}
static_assert(
    std::is_same<
        void,
        decltype((({{structName}}*)nullptr)->{{setterName}}(*(({{type.name}}*)nullptr)))
    >::value,
    "Expected 'void' return type for '{{structName}}::{{setterName}}'."
);
{{/if}}
{{#unless getterName setterName}}
static_assert(
    std::is_same<{{type.name}}, decltype({{structName}}::{{name}})>::value,
    "Expected '{{type.name}}' type for '{{structName}}::{{name}}'."
);
{{/unless}}
{{/fields}}{{/set}}
{{#set className=fullyQualifiedName}}{{#methods}}
{{>cpp/CppMethodStaticCheck}}
{{/methods}}{{/set}}
{{/if}}{{!!

}}{{+fieldEq}}{{#if needsPointerValueEqual}}( ( {{name}} && rhs.{{name}} )
            ? {{#if needsRawPointerEqual}}( &*{{name}} == &*rhs.{{name}} ){{/if}}{{!!
            }}{{#unless needsRawPointerEqual}}( *{{name}} == *rhs.{{name}} ){{/unless}}
            : ( static_cast< bool >( {{name}} ) == static_cast< bool >( rhs.{{name}} ) ) ){{!!
}}{{/if}}{{#unless needsPointerValueEqual}}{{!!
}}{{name}} == rhs.{{name}}{{/unless}}{{/fieldEq}}{{!!

}}{{+structConstructorParameter}}{{type.name}} {{name}}{{/structConstructorParameter}}
