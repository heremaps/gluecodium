{{!!
  !
  ! Copyright (C) 2016-2020 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>cpp/CppCommentHeader}}

{{#includes}}{{>common/Include}}{{/includes}}

{{#namespace}}
namespace {{.}} {
{{/namespace}}
{{#model}}
{{include contentTemplate}}
{{/model}}
{{#errorEnums}}
std::error_code
make_error_code( {{resolveName "FQN"}} value ) noexcept
{
    class {{resolveName}}ErrorCategory: public ::std::error_category
    {
    public:
        ~{{resolveName}}ErrorCategory( ) override = default;

        const char*
        name( ) const noexcept override
        {
            return "{{resolveName}}ErrorCategory";
        }

        std::string
        message( int condition ) const override
        {
            switch( {{resolveName "FQN"}}( condition ) )
            {
            {{#uniqueEnumerators}}
            case( {{resolveName "FQN"}} ):
                return "{{resolveName "FQN"}}";
            {{/uniqueEnumerators}}
            }
            return "Unknown enum value";
        }
    };
    static {{resolveName}}ErrorCategory category{};

    return std::error_code( static_cast<int>( value ), category );
}

{{/errorEnums}}
{{#namespace}}
}
{{/namespace}}

{{#if equatables}}
{{#internalNamespace}}
namespace {{.}} {
{{/internalNamespace}}
{{#equatables}}
{{#instanceOf this "LimeStruct"}}
{{>cpp/StructHashImpl}}
{{/instanceOf}}
{{#instanceOf this "LimeClass"}}
{{>cpp/ClassHashImpl}}
{{/instanceOf}}
{{#instanceOf this "LimeInterface"}}
{{>cpp/ClassHashImpl}}
{{/instanceOf}}
{{/equatables}}
{{#internalNamespace}}
}
{{/internalNamespace}}
{{/if}}
