{{!!
  !
  ! Copyright (C) 2016-2021 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#if fields}}

{{#ifPredicate "hasDefaultConstructor"}}
{{#resolveName constructorComment}}{{#unless this.isEmpty}}
    /**
{{prefix this "     * "}}
     */
{{/unless}}{{/resolveName}}
    {{resolveName}}( );{{!!
}}{{/ifPredicate}}{{!!

}}{{#ifPredicate "hasPartialDefaults"}}
{{#resolveName constructorComment}}{{#unless this.isEmpty}}
    /**
{{prefix this "     * "}}
{{#uninitializedFields}}
{{>fieldParamDoc}}
{{/uninitializedFields}}
     */
{{/unless}}{{/resolveName}}
    {{resolveName}}( {{#uninitializedFields}}{{!!
    }}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/uninitializedFields}} );{{!!
}}{{/ifPredicate}}{{!!

}}{{#set struct=this}}{{#fieldConstructors}}
{{#ifPredicate "hasAnyComment"}}
    /**
{{#unless comment.isEmpty}}{{#resolveName comment}}{{!!
}}{{prefix this "     * "}}{{/resolveName}}
{{/unless}}{{#if comment.isExcluded}}
     * \private
{{/if}}{{!!
}}{{#if comment.isEmpty}}{{#resolveName constructorComment}}{{#unless this.isEmpty}}{{!!
}}{{prefix this "     * "}}
{{/unless}}{{/resolveName}}{{/if}}
{{#if attributes.deprecated}}
     * \deprecated {{resolveName attributes.deprecated.message}}{{/if}}
{{#fields}}
{{>fieldParamDoc}}
{{/fields}}
     */
{{/ifPredicate}}
{{prefixPartial "cpp/CppAttributes" "    "}}
    {{resolveName struct}}( {{#fields}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/fields}} );
{{/fieldConstructors}}{{/set}}{{!!

}}{{#ifPredicate "needsAllFieldsConstructor"}}

{{#resolveName constructorComment}}{{#unless this.isEmpty}}
    /**
{{prefix this "     * "}}
{{#fields}}
{{>fieldParamDoc}}
{{/fields}}
     */
{{/unless}}{{/resolveName}}
    {{resolveName}}( {{#fields}}{{resolveName typeRef}} {{resolveName}}{{#if iter.hasNext}}, {{/if}}{{/fields}} );{{!!
}}{{/ifPredicate}}

{{/if}}{{!!

}}{{+fieldParamDoc}}
     * \param {{resolveName}} {{#resolveName this.comment}}{{prefix this "     * " skipFirstLine=true}}{{/resolveName}}
{{#ifPredicate typeRef "needsNotNullComment"}}
     * \warning @NotNull
{{/ifPredicate}}
{{/fieldParamDoc}}
