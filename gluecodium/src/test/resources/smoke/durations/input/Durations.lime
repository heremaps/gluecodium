# Copyright (C) 2016-2021 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class DurationSeconds {
    struct DurationStruct {
        durationField: Duration
    }

    typealias DurationTypeAlias = Duration
    typealias DurationList = List<Duration>
    typealias DurationSet = Set<Duration>
    typealias DurationMap = Map<String, Duration>
    typealias DurationKeyMap = Map<Duration, String>

    fun durationFunction(input: Duration): Duration
    fun nullableDurationFunction(input: Duration?): Duration?

    property durationProperty: Duration
}

class DurationMilliseconds {
    struct DurationStruct {
        durationField: @Cpp(Type="std::chrono::milliseconds") Duration
    }

    typealias DurationTypeAlias = @Cpp(Type="std::chrono::milliseconds") Duration
    typealias DurationList = List<@Cpp(Type="std::chrono::milliseconds") Duration>
    typealias DurationSet = Set<@Cpp(Type="std::chrono::milliseconds") Duration>
    typealias DurationMap = Map<String, @Cpp(Type="std::chrono::milliseconds") Duration>
    typealias DurationKeyMap = Map<@Cpp(Type="std::chrono::milliseconds") Duration, String>

    fun durationFunction(input: @Cpp(Type="std::chrono::milliseconds") Duration): @Cpp(Type="std::chrono::milliseconds") Duration
    fun nullableDurationFunction(input: @Cpp(Type="std::chrono::milliseconds") Duration?): @Cpp(Type="std::chrono::milliseconds") Duration?

    property durationProperty: @Cpp(Type="std::chrono::milliseconds") Duration
}

@Skip(Swift, Dart)
class DurationOverloads {
    fun durationFunction(input: Duration): String
    fun durationFunction(input: String): String
}

interface DurationInterface {
    fun durationFunction(input: Duration): String
}
