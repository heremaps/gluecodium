# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class LegacyStructs {
    @Cpp(ExternalType = "foo/Bar.h")
    struct ExternalStruct {
        stringField: String
        @Cpp(ExternalGetter = "get_some_string", ExternalSetter = "set_some_string")
        externalStringField: String
        @Cpp(ExternalGetter = "get_some_array", ExternalSetter = "set_some_array")
        externalArrayField: List<Byte>
        @Cpp(ExternalGetter = "get_some_struct", ExternalSetter = "set_some_struct")
        externalStructField: AnotherExternalStruct
    }

    @Cpp(ExternalType = ["foo/Bazz.h", "non/Sense.h"], ExternalName = "::fire::SomeVeryExternalStruct")
    struct AnotherExternalStruct {
        intField: Byte
    }

    static fun getExternalStruct(): ExternalStruct
    static fun getAnotherExternalStruct(): AnotherExternalStruct
}

class LegacyEnums {
    @Cpp(ExternalType = "foo/Bar.h")
    enum External_Enum {
        Foo_Value,
        Bar_Value
    }
    @Cpp(ExternalType = "foo/Bar.h", ExternalName = "::fire::SomeVeryExternalEnum")
    enum VeryExternalEnum {
        FOO,
        BAR
    }

    static fun methodWithExternalEnum(input: External_Enum)
}

@Cpp(ExternalType = "foo/Bar.h", ExternalName = "::fire::Baz")
class LegacyExternalClass {
    struct some_Struct {
        some_Field: String
    }

    enum some_Enum {
        some_Value
    }

    fun some_Method(some_Parameter: Byte)

    property some_Property: String {
        @Cpp(ExternalName = "get_Me")
        get
    }
}

@Cpp(ExternalType = "foo/Bar.h")
interface LegacyExternalInterface {
    struct some_Struct {
        some_Field: String
    }

    enum some_Enum {
        some_Value
    }

    fun some_Method(some_Parameter: Byte)

    property some_Property: String {
        @Cpp(ExternalName = "get_Me")
        get
    }
}
