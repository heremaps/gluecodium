# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class Structs {
    struct ExternalStruct {
        external { cpp include "foo/Bar.h" }

        stringField: String
        externalStringField: String external {
            cpp getterName "get_some_string"
            cpp setterName "set_some_string"
        }
        externalArrayField: List<Byte> external {
            cpp getterName "get_some_array"
            cpp setterName "set_some_array"
        }
        externalStructField: AnotherExternalStruct external {
            cpp getterName "get_some_struct"
            cpp setterName "set_some_struct"
        }
    }
    struct AnotherExternalStruct {
        external {
            cpp include "foo/Bazz.h, non/Sense.h"
            cpp name "::fire::SomeVeryExternalStruct"
        }

        intField: Byte
    }
    static fun getExternalStruct(): ExternalStruct
    static fun getAnotherExternalStruct(): AnotherExternalStruct
}

class Enums {
    enum External_Enum {
        external { cpp include "foo/Bar.h" }

        Foo_Value,
        Bar_Value
    }
    enum VeryExternalEnum {
        external {
            cpp include "foo/Bar.h"
            cpp name "::fire::SomeVeryExternalEnum"
        }

        FOO,
        BAR
    }
    static fun methodWithExternalEnum(input: External_Enum)
}

class ExternalClass {
    external {
        cpp include "foo/Bar.h"
        cpp name "::fire::Baz"
    }

    enum some_Enum {
        some_Value
    }
    struct some_Struct {
        some_Field: String
    }
    fun some_Method(some_Parameter: Byte)
    property some_Property: String {
        get external { cpp name "get_Me" }
    }
}

interface ExternalInterface {
    external { cpp include "foo/Bar.h" }

    enum some_Enum {
        some_Value
    }
    struct some_Struct {
        some_Field: String
    }
    fun some_Method(some_Parameter: Byte)
    property some_Property: String {
        get external { cpp name "get_Me" }
    }
}

class ClassWithOverloads {
    external { cpp include "include/ExternalTypes.h" }

    fun oneOverloadNotExposed(): String
    fun allOverloadsExposed(input: String): String
    @Dart("allOverloadsExposedList")
    fun allOverloadsExposed(inputList: List<String>): String
    @Dart("allOverloadsExposedTwo")
    fun allOverloadsExposed(inputString: String, inputBool: Boolean): String
}

struct StructWithOverloads {
    external {
        cpp include "include/ExternalTypes.h"
        cpp name "external::ClassWithOverloads::StructWithOverloads"
    }

    overloadedAccessors: Int external {
        cpp getterName "overloadedAccessors"
        cpp setterName "overloadedAccessors"
    }

    fun overloadedMethod(): String
    @Dart("overloadedMethodString")
    fun overloadedMethod(input: String): String
    @Dart("overloadedMethodTwo")
    fun overloadedMethod(inputString: String, inputBool: Boolean): String
}

struct ExternalTypeInTypesCollection {
    @Cpp(
        ExternalType = "include/ExternalTypeInTypesCollection.h",
        ExternalName = "::external::IntStruct"
    )
    struct IntStruct {
        int_field: Int
    }
}

interface ExternalWithNoFunctions {
    external {
        cpp include "some/path/Bar.h"
        cpp name "::some::path::Bar"
    }
}

enum StandaloneExternalEnum {
    external { cpp include "foo/Bar.h" }

    foo
}
