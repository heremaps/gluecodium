# Copyright (C) 2016-2020 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

@Swift(Skip) @Dart(Skip)
@Immutable
struct Currency {
    external {
        java name "java.util.Currency"
    }

    currencyCode: String external { java getterName "getCurrencyCode" }
    numericCode: Int external { java getterName "getNumericCode" }
}

@Swift(Skip) @Dart(Skip)
struct TimeZone {
    external {
        java name "java.util.SimpleTimeZone"
    }

    rawOffset: Int external {
        java getterName "getRawOffset"
        java setterName "setRawOffset"
    }
}

@Swift(Skip) @Dart(Skip)
enum Month {
    external {
        java name "java.time.Month"
    }

    JANUARY = 1,
    FEBRUARY,
    MARCH
}

@Swift(Skip) @Dart(Skip)
@Equatable
struct SystemColor {
    external {
        java name "java.lang.Integer"
        java converter "com.here.android.test.ColorConverter"
    }

    red: Float
    green: Float
    blue: Float
    alpha: Float
}

@Swift(Skip) @Dart(Skip)
enum Season {
    external {
        java name "java.lang.String"
        java converter "com.here.android.test.SeasonConverter"
    }

    WINTER,
    SPRING,
    SUMMER,
    AUTUMN
}

@Swift(Skip) @Dart(Skip)
struct JavaExternalTypesStruct {
    currency: Currency
    timeZone: TimeZone
    month: Month
    color: SystemColor
    season: Season
}

@Swift(Skip) @Dart(Skip)
struct JavaExternalCtor {
    external {
        java name "com.example.Foo"
        java converter "com.example.FooConverter"
    }
    `field`: String
    constructor make(`field`: String)
}

struct UseJavaExternalConst {
    stringField: String
    const defaultTruth: JavaExternalCtor = {"foo"}
}
