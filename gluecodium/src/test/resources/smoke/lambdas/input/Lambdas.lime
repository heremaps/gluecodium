# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class Lambdas {
    lambda Producer = () -> String
    // Should confuse everyone thoroughly
    @Java(Name = "Confounder", FunctionName = "confuse")
    @Swift("Convoluter")
    lambda Confuser = (String) -> Producer
    lambda Consumer = (String) -> Void
    lambda Indexer = (String, @Java("index") Float) -> Int
    lambda NullableConfuser = (String?) -> Producer?

    fun deconfuse(value: String, confuser: Confuser): Producer
    static fun fuse(items: List<String>, callback: Indexer): Map<Int, String>
}

lambda StandaloneProducer = () -> String

class LambdasDeclarationOrder {
    lambda SomeCallback = (SomeStruct) -> Void

    struct SomeStruct {
        someField: String
    }
}

interface LambdasInterface {
    lambda TakeScreenshotCallback = (Blob?) -> Void

    fun take_screenshot(callback: TakeScreenshotCallback)
}

class LambdasWithStructuredTypes {
    lambda ClassCallback = (LambdasInterface) -> Void
    lambda StructCallback = (LambdasDeclarationOrder.SomeStruct) -> Void

    fun do_class_stuff(callback : ClassCallback)
    fun do_struct_stuff(callback : StructCallback)
}
