# Copyright (C) 2016-2020 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

struct IncludableStruct {
    `field`: String
}

struct ShouldNotInclude {
    `field`: String
}

enum IncludableEnum {
    foo
}

class IncludableClass {}

lambda IncludableLambda = (Long) -> Void

@Dart(Skip)
interface ParentInterfaceWithIncludes {
    fun rootMethod(input1: IncludableStruct, input2: IncludableEnum): IncludableClass
    property rootProperty: IncludableLambda
    @Java(Skip)
    fun notInJava(): ShouldNotInclude
    @Java(Skip)
    property notInJavaProperty: ShouldNotInclude
}

@Dart(Skip)
class ChildClassWithIncludes: ParentInterfaceWithIncludes {}

@Skip(Java, Swift)
open class ParentClassWithImports {
    fun rootMethod(input1: IncludableStruct, input2: IncludableEnum): IncludableClass
    property rootProperty: IncludableLambda
}

@Skip(Java, Swift)
class ChildClassWithImports: ParentClassWithImports {}

interface ParentInterfaceWithBool {
    fun rootMethod(input1: Boolean)
}

class ChildClassWithBool: ParentInterfaceWithBool {}

