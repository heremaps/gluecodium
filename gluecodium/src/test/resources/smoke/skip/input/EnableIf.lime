# Copyright (C) 2016-2021 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class EnableIfEnabled {
    @EnableIf(ExperimentalFoo)
    static fun enableIfUnquoted()
    @EnableIf(ExperimentalFoo, ExperimentalBar)
    static fun enableIfUnquotedList()
    @EnableIf("ExperimentalFoo")
    static fun enableIfQuoted()
    @EnableIf("ExperimentalFoo", "ExperimentalBar")
    static fun enableIfQuotedList()
    @EnableIf(Tag = "ExperimentalFoo")
    static fun enableIfTagged()
    @EnableIf(Tag = ["ExperimentalFoo", "ExperimentalBar"])
    static fun enableIfTaggedList()
    @EnableIf(ExperimentalFoo, "ExperimentalBar")
    static fun enableIfMixedList()
}

class EnableIfSkipped {
    @EnableIf(ExperimentalBar)
    static fun skipUnquoted()
    @EnableIf("ExperimentalBar")
    static fun skipQuoted()
    @EnableIf(Tag = "ExperimentalBar")
    static fun skipTagged()
    @EnableIf(Tag = ["ExperimentalBar"])
    static fun skipTaggedList()
}

struct EnableIfTypesEnabled {
  @EnableIf(ExperimentalFoo)
  enum EnableMe {
      NOPE
  }

  @EnableIf(ExperimentalFoo)
  struct EnableMeToo {
      `field`: EnableMe
  }

  const PlaceHolderEnabled: Boolean = true
}

struct EnableIfTypesSkipped {
  @EnableIf(ExperimentalBar)
  enum DontEnableMe {
      NOPE
  }

  @EnableIf(ExperimentalBar)
  struct DontEnableMeToo {
      `field`: DontEnableMe
  }

  const PlaceHolderSkipped: Boolean = true
}
