# Copyright (C) 2016-2020 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class SkipFunctions {
    @Java(Skip)
    static fun notInJava(input: String): String
    @Swift(Skip)
    static fun notInSwift(input: Boolean): Boolean
    @Dart(Skip)
    static fun notInDart(input: Float): Float
    @Kotlin(Skip)
    static fun notInKotlin(input: String): String
}

class ClassWithStructWithSkipLambdaInPlatform {
    struct SkipLambdaInPlatform {
        intField: Int

        @Skip(Java, Dart, Swift, Kotlin)
        lambda SomeLambda = () -> Int

        @Skip(Java, Dart, Swift, Kotlin)
        someLambda: SomeLambda

        @Skip(Java, Dart, Swift, Kotlin)
        fun useLambda(someLambda: SomeLambda): SomeLambda
    }
}

class SkipTypes {
    @Java(Skip)
    struct NotInJava {
        fooField: String
    }
    @Swift(Skip)
    struct NotInSwift {
        fooField: String
    }
    @Dart(Skip)
    struct NotInDart {
        fooField: String
    }
    @Kotlin(Skip)
    struct NotInKotlin {
        fooField: String
    }

    @Dart(Skip) @Java(Skip) @Swift(Skip) @Kotlin(Skip)
    fun useListInDart(): List<NotInDart>
}

interface SkipProxy {
    @Java(Skip)
    fun notInJava(input: String): String
    @Swift(Skip)
    fun notInSwift(input: Boolean): Boolean
    @Dart(Skip)
    fun notInDart(input: Float): Float
    @Kotlin(Skip)
    fun notInKotlin(input: Float): Float

    @Java(Skip)
    property skippedInJava: String
    @Swift(Skip)
    property skippedInSwift: Boolean
    @Dart(Skip)
    property skippedInDart: Float
    @Kotlin(Skip)
    property skippedInKotlin: Float

    @Java(Skip) @Swift(Skip) @Dart(Skip) @Kotlin(Skip)
    property skippedEverywhere: SkippedEverywhere
    @Java(Skip) @Swift(Skip) @Dart(Skip) @Kotlin(Skip)
    property skippedEverywhereToo: SkippedEverywhereEnum
}

@Java(Skip) @Swift(Skip) @Dart(Skip) @Kotlin(Skip)
struct SkippedEverywhere {
    nothingToSeeHere: String

    fun useMapInDart(foo: Map<Int, SkipTypes.NotInDart>)
}

@Java(Skip) @Swift(Skip) @Dart(Skip) @Kotlin(Skip)
enum SkippedEverywhereEnum {
    nothingToSeeHere
}

interface InheritFromSkipped: SkipProxy { }

struct SkipFieldInPlatform {
    intField: Int
    @Java(Skip) @Swift(Skip) @Dart(Skip) @Kotlin(Skip)
    stringField: String
    boolField: Boolean
}

@Immutable
struct SkipFieldInPlatformImmutable {
    intField: Int
    @Java(Skip) @Swift(Skip) @Dart(Skip) @Kotlin(Skip)
    stringField: DummyStruct = {}
    boolField: Boolean
}

struct DummyStruct {
    stringField: String = ""
}

interface SkipSetter {
    property foo: String {
        get
        @Java(Skip) @Swift(Skip) @Dart(Skip) @Kotlin(Skip)
        set
    }
}
