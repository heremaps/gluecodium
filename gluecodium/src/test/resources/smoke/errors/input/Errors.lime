# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

struct Payload {
    errorCode: Int
    message: String
}

exception WithString(String)
exception WithPayload(Payload)

class Errors {
    enum InternalErrorCode {
        ERROR_NONE,
        ERROR_FATAL
    }
    enum ExternalErrors {
        external {
            cpp include "foo/Bar.h"
            cpp name "::fire::SomeEnum"
        }

        NONE,
        BOOM,
        BUST
    }

    static fun methodWithErrors() throws Internal
    static fun methodWithExternalErrors() throws External
    static fun methodWithErrorsAndReturnValue(): String throws Internal
    static fun methodWithPayloadError() throws WithPayload
    static fun methodWithPayloadErrorAndReturnValue(): String throws WithPayload

    exception Internal(InternalErrorCode)
    exception External(ExternalErrors)
}

interface ErrorsInterface {
    enum InternalError {
        ERROR_NONE,
        ERROR_FATAL
    }
    enum ExternalErrors {
        NONE,
        BOOM,
        BUST
    }

    fun methodWithErrors() throws Internal
    fun methodWithExternalErrors() throws External
    fun methodWithErrorsAndReturnValue(): String throws Internal
    static fun methodWithPayloadError() throws WithPayload
    static fun methodWithPayloadErrorAndReturnValue(): String throws WithPayload

    exception Internal(InternalError)
    exception External(ExternalErrors)
}

struct SomeTypeCollection {
    enum SomeTypeCollectionError {
        ERROR_A,
        ERROR_B
    }
    exception Some(SomeTypeCollectionError)
}

class UseTcException {
    fun doNothing() throws SomeTypeCollection.Some
}
