# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

internal interface InternalInterface {
    fun fooBar()
}

internal class InternalClass {
    fun fooBar()
}

internal lambda InternalLambda = () -> Void

interface PublicInterface {
    internal struct InternalStruct {
        fieldOfInternalType: PublicClass.InternalStruct
    }
}

class PublicClass {
    internal struct InternalStruct {
        stringField: String
    }
    struct PublicStruct {
        internal internalField: InternalStruct
    }
    struct PublicStructWithInternalDefaults {
        internal internalField: String = "foo"
        publicField: Float
    }

    internal enum InternalEnum {
        FOO,
        BAR
    }

    internal typealias InternalArray = List<InternalStruct>
    internal typealias InternalStructTypeDef = InternalStruct
    internal typealias StringToInternalStructMap = Map<String, InternalStruct>

    internal fun internalMethod(input: InternalStruct): InternalStructTypeDef
    internal property internalStructProperty: InternalStruct {
        internal get
        internal set
    }
    property internalSetterProperty: String {
        get
        internal set
    }
}

types PublicTypeCollection {
    internal struct InternalStruct {
        internal stringField: String
        fun fooBar()
    }
}

internal class InternalClassWithFunctions {
    fun fooBar()
    constructor make()
    @Dart("remake")
    constructor make(foo: String)
}

struct PublicStructWithNonDefaultInternalField {
    defaultedField: Int = 42
    internal internalField: String
    publicField: Boolean
}

internal class InternalClassWithStaticProperty {
    static property fooBar: String
}

@Skip(Java, Swift)
types DontExportInDart {
    struct DoExportInDart {
        stringField: String
    }
}
