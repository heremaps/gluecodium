# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class TypeDefs {
    struct StructHavingAliasFieldDefinedBelow {
        `field`: PrimitiveTypeDef
    }
    struct TestStruct {
        something: String
    }

    typealias NestedIntTypeDef = PrimitiveTypeDef
    typealias PrimitiveTypeDef = Double
    typealias StructArray = List<TestStruct>
    typealias ComplexTypeDef = StructArray
    typealias TestStructTypeDef = TestStruct
    typealias NestedStructTypeDef = TestStructTypeDef

    static fun methodWithPrimitiveTypeDef(
        input: PrimitiveTypeDef
    ): PrimitiveTypeDef
    static fun methodWithComplexTypeDef(
        input: ComplexTypeDef
    ): ComplexTypeDef
    static fun returnNestedIntTypeDef(
        input: NestedIntTypeDef
    ): NestedIntTypeDef
    static fun returnTestStructTypeDef(
        input: TestStructTypeDef
    ): TestStructTypeDef
    static fun returnNestedStructTypeDef(
        input: NestedStructTypeDef
    ): NestedStructTypeDef
    static fun returnTypeDefPointFromTypeCollection(
        input: TypeCollection.PointTypeDef
    ): TypeCollection.PointTypeDef

    property primitiveTypeProperty: List<PrimitiveTypeDef>
}

types TypeCollection {
    struct Point {
        x: Double
        y: Double
    }
    struct StructHavingAliasFieldDefinedBelow {
        `field`: StorageId
    }

    typealias PointTypeDef = Point
    typealias StorageId = ULong

    const INVALID_STORAGE_ID: StorageId = 0
}
