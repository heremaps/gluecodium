package smoke

import smoke.TypeCollection.PointTypeDef

class TypeDefs {
    typealias NestedIntTypeDef = PrimitiveTypeDef
    typealias PrimitiveTypeDef = Double
    typealias StructArray = List<TestStruct>
    typealias ComplexTypeDef = StructArray
    typealias TestStructTypeDef = TestStruct
    typealias NestedStructTypeDef = TestStructTypeDef

    struct StructHavingAliasFieldDefinedBelow {
        `field`: PrimitiveTypeDef
    }
    struct TestStruct {
        something: String
    }
    static fun methodWithPrimitiveTypeDef(
        input: PrimitiveTypeDef
    ): PrimitiveTypeDef
    static fun methodWithComplexTypeDef(
        input: ComplexTypeDef
    ): ComplexTypeDef
    static fun returnNestedIntTypeDef(
        input: NestedIntTypeDef
    ): NestedIntTypeDef
    static fun returnTestStructTypeDef(
        input: TestStructTypeDef
    ): TestStructTypeDef
    static fun returnNestedStructTypeDef(
        input: NestedStructTypeDef
    ): NestedStructTypeDef
    static fun returnTypeDefPointFromTypeCollection(
        input: PointTypeDef
    ): PointTypeDef

    property primitiveTypeProperty: List<PrimitiveTypeDef>
}
