# Copyright (C) 2016-2025 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

// A class, which reads temperature and updates observers according to the given interval.
// "Subject" in observer design pattern.
class Thermometer {
    // Some error code for thermometer.
    enum SomeThermometerErrorCode {
        ERROR_NONE,
        ERROR_FATAL
    }

    // This error indicates problems with notification of observers.
    // May be thrown if observers cannot be notified.
    exception Notification(String)

    // This error indicates other problems with notification of observers.
    exception AnotherNotification(SomeThermometerErrorCode)

    // A constructor, which makes the thermometer with readout interval.
    // @param[interval] readout interval
    // @param[observers] observers of temperature changes
    @AfterConstruction("notifyObservers(this, observers)")
    constructor makeWithDuration(interval: Duration, observers: List<TemperatureObserver>)

    // A constructor, which makes the thermometer with default readout interval (1 second).
    // @param[observers] observers of temperature changes
    @AfterConstruction("notifyObservers(this, observers)")
    constructor makeWithoutDuration(observers: List<TemperatureObserver>)

    // A throwing constructor, which makes the thermometer with default readout interval (1 second).
    // @param[id] identification of this thermometer
    // @param[observers] observers of temperature changes
    // @throws if identification number is invalid
    @AfterConstruction("throwingNotifyObservers(this, observers)")
    constructor throwingMake(id: Int, observers: List<TemperatureObserver>) throws Notification

    // A non-throwing constructor, which makes the thermometer with default readout interval (1 second).
    // @param[label] some identification label
    // @param[niceObservers] observers of temperature changes
    @AfterConstruction("throwingNotifyObservers(this, niceObservers)")
    constructor nothrowMake(label: String, niceObservers: List<TemperatureObserver>)

    // A throwing constructor, which makes the thermometer with default readout interval (1 second).
    // @param[dummy] some dummy boolean flag
    // @param[observers] observers of temperature changes
    // @throws if some problem occurs
    @AfterConstruction("throwingNotifyObservers(this, observers)")
    constructor anotherThrowingMake(dummy: Boolean, observers: List<TemperatureObserver>) throws AnotherNotification

    static fun notifyObservers(thermometer: Thermometer, someObservers: List<TemperatureObserver>)

    // Function used to notify observers.
    // @param[thermometer] subject that has changed state
    // @param[someObservers] observers to be notified
    // @throws if notification of observers failed
    static fun throwingNotifyObservers(thermometer: Thermometer, someObservers: List<TemperatureObserver>) throws Notification

    fun forceUpdate()

    fun getCelsius(): Double
    fun getKelvin(): Double
    fun getFahrenheit(): Double
}

// Observer interface for monitoring changes in thermometer ("Observer of subject").
interface TemperatureObserver {
    fun onTemperatureUpdate(thermometer: Thermometer)
}
