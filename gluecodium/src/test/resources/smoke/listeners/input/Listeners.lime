# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

interface CalculatorListener {
    struct ResultStruct {
        result: Double
    }

    typealias NamedCalculationResults = Map<String, Double>

    fun onCalculationResult(calculationResult: Double)
    @Cpp(Const)
    fun onCalculationResultConst(calculationResult: Double)
    fun onCalculationResultStruct(calculationResult: ResultStruct)
    fun onCalculationResultArray(calculationResult: List<Double>)
    fun onCalculationResultMap(calculationResults: NamedCalculationResults)
    fun onCalculationResultInstance(calculationResult: CalculationResult)
}

class Calculator {
    static fun registerListener(listener: CalculatorListener)
    static fun unregisterListener(listener: CalculatorListener)
}

interface CalculationResult {}

@Internal
interface InternalListener {
    @Internal
    fun onEvent()
}

interface ListenerWithNullable {
    fun methodWithByte(input: Byte?): Byte?
    fun methodWithUByte(input: UByte?): UByte?
    fun methodWithShort(input: Short?): Short?
    fun methodWithUShort(input: UShort?): UShort?
    fun methodWithInt(input: Int?): Int?
    fun methodWithUInt(input: UInt?): UInt?
    fun methodWithLong(input: Long?): Long?
    fun methodWithULong(input: ULong?): ULong?
    fun methodWithDouble(input: Boolean?): Boolean?
    fun methodWithFloat(input: Float?): Float?
    fun methodWithDouble(input: Double?): Double?
}
