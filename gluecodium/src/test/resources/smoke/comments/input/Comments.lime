# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

// This is some very useful interface.
class comments {
    // This is some very useful struct.
    // @constructor This is how easy it is to construct.
    struct SomeStruct {
        // How useful this struct is
        // remains to be seen
        someField: Usefulness
        // Can be `null`
        nullableField: String?
    }

    // This is some very useful enum.
    enum SomeEnum {
        // Not quite useful
        Useless,
        // Somewhat useful
        Useful
    }

    // This is some very useful typedef.
    typealias Usefulness = Boolean

    // This is some very useful constant.
    const VeryUseful: Usefulness = true

    // This is some very useful method that measures the usefulness of its input.
    // @param[input_parameter] Very useful input parameter
    // @return Usefulness of the input
    // @throws Sometimes it happens.
    fun someMethodWithAllComments(input_parameter: String): Usefulness throws SomethingWrong
    // This is some very useful method that measures the usefulness of its input.
    // @param[input] Very useful input parameter
    fun someMethodWithInputComments(input: String): Usefulness
    // This is some very useful method that measures the usefulness of its input.
    // @return Usefulness of the input
    fun someMethodWithOutputComments(input: String): Usefulness
    // This is some very useful method that measures the usefulness of its input.
    fun someMethodWithNoComments(input: String): Usefulness
    // This is some very useful method that does not measure the usefulness of its input.
    // @param[input] Very useful input parameter
    fun someMethodWithoutReturnTypeWithAllComments(input: String)
    // This is some very useful method that does not measure the usefulness of its input.
    fun someMethodWithoutReturnTypeWithNoComments(input: String)
    // This is some very useful method that measures the usefulness of something.
    // @return Usefulness of the input
    fun someMethodWithoutInputParametersWithAllComments(): Usefulness
    // This is some very useful method that measures the usefulness of something.
    fun someMethodWithoutInputParametersWithNoComments(): Usefulness
    fun someMethodWithNothing()
    // This is some very useful method that does nothing.
    fun someMethodWithoutReturnTypeOrInputParameters()
    // @param[documented] nicely documented
    fun oneParameterCommentOnly(undocumented: String, documented: String): String
    // @return nicely documented
    fun returnCommentOnly(undocumented: String): String

    // Some very useful property.
    // @get Gets some very useful property.
    // @set Sets some very useful property.
    property SomeProperty: Usefulness

    // This is some very useful exception.
    exception SomethingWrong(SomeEnum)

    // This is some very useful lambda that does it.
    // @param[p0] Very useful input parameter
    // @param[p1] Slightly less useful input parameter
    // @return Usefulness of the input
    @Java(FunctionName = "doIt")
    lambda SomeLambda = (String, @Java("index") Int) -> Double
}

// This is some very useful interface.
// There is a lot to say about this interface.
// at least it has multiline comments.
//
// I am a heading
// --------------
//
// And now comes a list:
// * asterisk
// * needs
// * escaping
//
// ```Some example code;```
class MultiLineComments {
    // This is very important method.
    // It has very important parameters.
    // It has side effects.
    // @param[input] Very useful input parameter.
    // You must not confuse it with the second parameter.
    // But they are similar.
    // @param[ratio] Not as useful as the first parameter.
    // But still useful.
    // use a positive value for more happiness.
    // @return If you provide a useful input,
    // and a useful ratio you can expect a useful output.
    // Just kidding do not expect anything from a method until
    // you see its body.
    fun someMethodWithLongComment(input: String, ratio: Double): Float
}

// This is some very useful interface. There is a lot to say about this interface. at least it has a long comment.
class LongComments {
    // This is very important method. It has very important parameters. It has side effects.
    // @param[input] Very useful input parameter. You must not confuse it with the second parameter. But they are similar.
    // @param[ratio] Not as useful as the first parameter. But still useful. use a positive value for more happiness.
    // @return If you provide a useful input and a useful ratio you can expect a useful output. Just kidding do not expect anything from a method until you see its body.
    fun someMethodWithLongComment(input: String, ratio: Double): Float
}

types CommentsTypeCollection {
    struct TypeCollectionStruct {
        field: Int
    }

    enum TypeCollectionEnum {
        item
    }

    typealias TypeCollectionTypedef = Boolean

    const TypeCollectionConstant: Boolean = true
}

// The nested types like [random_method] don't need full name prefix, but it's
// possible to references other interfaces like [smoke.CommentsInterface] or other members
// [comments.someMethodWithAllComments].
//
// Weblinks are not modified like this [example] or [www.example.com].
//
// [example]: http://example.com
class CommentsLinks {

    // Link types:
    // * constant: [comments.VeryUseful]
    // * struct: [comments.SomeStruct]
    // * struct field: [comments.SomeStruct.someField]
    // * enum: [comments.SomeEnum]
    // * enum item: [comments.SomeEnum.Useful]
    // * property: [comments.SomeProperty]
    // * property setter: [comments.SomeProperty.set]
    // * property getter: [comments.SomeProperty.get]
    // * method: [comments.someMethodWithAllComments]
    // * method with signature: [comments.oneParameterCommentOnly(String, String)]
    // * method with signature with no spaces: [comments.oneParameterCommentOnly(String,String)]
    // * parameter: [inputParameter]
    // * top level constant: [CommentsTypeCollection.TypeCollectionConstant]
    // * top level struct: [CommentsTypeCollection.TypeCollectionStruct]
    // * top level struct field: [CommentsTypeCollection.TypeCollectionStruct.field]
    // * top level enum: [CommentsTypeCollection.TypeCollectionEnum]
    // * top level enum item: [CommentsTypeCollection.TypeCollectionEnum.item]
    // * error: [comments.SomethingWrong]
    // * type from aux sources, same package: [AuxClass]
    // * type from aux sources, different package: [fire.AuxStruct]
    //   * we can also have
    //   * nested lists
    //
    // Not working for Java:
    // * typedef: [comments.Usefulness]
    // * top level typedef: [CommentsTypeCollection.TypeCollectionTypedef]
    //
    // Not working for Swift:
    // * named comment: [Alternative name for the link, stripped for Swift][comments.VeryUseful]
    //
    // @param[inputParameter] Sometimes takes [comments.SomeEnum.Useful]
    // @return Sometimes returns [comments.SomeEnum.Useful]
    // @throws May or may not throw [comments.SomethingWrong]
    fun random_method(inputParameter: comments.SomeEnum): comments.SomeEnum throws comments.SomethingWrong

    // Links to method overloads:
    // * other one: [random_method(SomeEnum)]
    // * this one: [random_method(String, Boolean)]
    // * ambiguous one: [random_method]
    @Dart("randomMethod2")
    fun random_method(text: String, flag: Boolean)

    // Links also work in:
    // @constructor constructor comments [comments.SomeStruct]
    struct RandomStruct {
        // Some random field [comments.SomeStruct]
        random_field: comments.SomeStruct
    }
}

class CommentsOnCstring {
    // Method that takes a C string as input and returns an std::string it as output.
    // @param[inputString] May or may not be a C string.
    static fun returnInputString(@Cpp(CString) inputString: String): String
}
