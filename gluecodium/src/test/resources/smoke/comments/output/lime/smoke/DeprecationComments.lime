package smoke
// This is some very useful interface.
@Deprecated("Unfortunately, this interface is deprecated. Use [comments] instead.")
interface DeprecationComments {
    // This is some very useful typedef.
    @Deprecated("Unfortunately, this typedef is deprecated. Use [comments.Usefulness] instead.")
    typealias Usefulness = Boolean
    // This is some very useful enum.
    @Deprecated("Unfortunately, this enum is deprecated. Use [comments.SomeEnum] instead.")
    enum SomeEnum {
        // Not quite useful
        @Deprecated("Unfortunately, this item is deprecated.\nUse [comments.SomeEnum.Useless] instead.")
        Useless
    }
    @Deprecated("Unfortunately, this exception is deprecated, please use [comments.SomethingWrong] instead.")
    exception SomethingWrong(SomeEnum)
    // This is some very useful struct.
    @Deprecated("Unfortunately, this struct is deprecated. Use [comments.SomeStruct] instead.")
    struct SomeStruct {
        // How useful this struct is.
        @Deprecated("Unfortunately, this field is deprecated.\nUse [comments.SomeStruct.someField] instead.")
        someField: Usefulness
    }
    // This is some very useful constant.
    @Deprecated("Unfortunately, this constant is deprecated. Use [comments.VeryUseful] instead.")
    const VeryUseful: Usefulness = true
    // This is some very useful method that measures the usefulness of its input.
    // @param[input] Very useful input parameter
    // @return Usefulness of the input
    @Deprecated("Unfortunately, this method is deprecated.\nUse [comments.someMethodWithAllComments] instead.")
    fun someMethodWithAllComments(
        input: String
    ): Usefulness
    // Some very useful property.
    // @get Gets some very useful property.
    // @set Sets some very useful property.
    @Deprecated("Unfortunately, this property is deprecated.\nUse [comments.SomeProperty] instead.")
    property SomeProperty: Usefulness {
        @Deprecated("Unfortunately, this property's getter is deprecated.\nUse [comments.SomeProperty.get] instead.")
        get
        @Deprecated("Unfortunately, this property's setter is deprecated.\nUse [comments.SomeProperty.set] instead.")
        set
    }
    // Describes the property but not accessors.
    // @get Gets the property but not accessors.
    @Deprecated("Will be removed in v3.2.1.")
    property PropertyButNotAccessors: String {
        @Deprecated("Will be removed in v3.2.1.")
        get
        @Deprecated("Will be removed in v3.2.1.")
        set
    }
}
