# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class Nullable {
    struct SomeStruct {
        stringField: String
    }
    struct NullableStruct {
        stringField: String?
        boolField: Boolean?
        doubleField: Double?
        structField: SomeStruct?
        enumField: SomeEnum?
        arrayField: SomeArray?
        inlineArrayField: List<String>?
        mapField: SomeMap?
        instanceField: SomeInterface?
    }
    struct NullableIntsStruct {
        int8Field: Byte?
        int16Field: Short?
        int32Field: Int?
        int64Field: Long?
        uint8Field: UByte?
        uint16Field: UShort?
        uint32Field: UInt?
        uint64Field: ULong?
    }

    enum SomeEnum {
        ON,
        OFF
    }

    typealias SomeArray = List<String>
    typealias SomeMap = Map<Long, String>

    fun methodWithString(input: String?): String?
    fun methodWithBoolean(input: Boolean?): Boolean?
    fun methodWithDouble(input: Double?): Double?
    fun methodWithInt(input: Long?): Long?
    fun methodWithSomeStruct(input: SomeStruct?): SomeStruct?
    fun methodWithSomeEnum(input: SomeEnum?): SomeEnum?
    fun methodWithSomeArray(input: SomeArray?): SomeArray?
    fun methodWithInlineArray(input: List<String>?): List<String>?
    fun methodWithSomeMap(input: SomeMap?): SomeMap?
    fun methodWithInstance(input: SomeInterface?): SomeInterface?

    property stringProperty: String?
    property boolProperty: Boolean?
    property doubleProperty: Double?
    property intProperty: Long?
    property structProperty: SomeStruct?
    property enumProperty: SomeEnum?
    property arrayProperty: SomeArray?
    property inlineArrayProperty: List<String>?
    property mapProperty: SomeMap?
    property instanceProperty: SomeInterface?
}

struct NullableCollectionsStruct {
    dates: List<Date?>
    structs: Map<Int, Nullable.SomeStruct?>
}

class SomeInterface {}

@Dart(Skip)
struct MixedCollectionsStruct {
    almostDates: List<Date?>
    dates: List<Date>
}
