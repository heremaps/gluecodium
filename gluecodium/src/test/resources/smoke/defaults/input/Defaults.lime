# Copyright (C) 2016-2024 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class DefaultValues {
    struct StructWithDefaults {
        intField: Int = 42
        uintField: UInt = 4294967295
        floatField: Float = 3.14
        doubleField: Double = -1.4142
        boolField: Boolean = true
        stringField: String = "\\Jonny \"Magic\" Smith\n"
    }
    struct NullableStructWithDefaults {
        intField: Int? = null
        uintField: UInt? = null
        floatField: Float? = null
        boolField: Boolean? = null
        stringField: String? = null
    }
    struct StructWithSpecialDefaults {
        floatNanField: Float = NaN
        floatInfinityField: Float = Infinity
        floatNegativeInfinityField: Float = -Infinity
        doubleNanField: Double = NaN
        doubleInfinityField: Double = Infinity
        doubleNegativeInfinityField: Double = -Infinity
    }
    struct StructWithEmptyDefaults {
        intsField: List<Int> = []
        floatsField: FloatArray = []
        mapField: IdToStringMap = []
        structField: StructWithDefaults = {}
        setTypeField: StringSet = []
    }
    struct StructWithTypedefDefaults {
        longField: LongTypedef = 42
        boolField: BooleanTypedef = true
        stringField: StringTypedef = "\\Jonny \"Magic\" Smith\n"
    }

    typealias LongTypedef = Long
    typealias BooleanTypedef = Boolean
    typealias StringTypedef = String
    typealias FloatArray = List<Float>
    typealias IdToStringMap = Map<UInt, String>
    typealias StringSet = Set<String>

    static fun processStructWithDefaults(input: StructWithDefaults): StructWithDefaults
}

struct TypesWithDefaults {
    struct StructWithDefaults {
        intField: Int = 42
        uintField: UInt = 4294967295
        floatField: Float = 3.14
        doubleField: Double = -1.4142
        boolField: Boolean = true
        stringField: String = "\\Jonny \"Magic\" Smith\n"
    }
    @Immutable
    struct ImmutableStructWithDefaults {
        intField: Int = 42
        uintField: UInt
        floatField: Float = 3.14
        doubleField: Double = -1.4142
        boolField: Boolean
        stringField: String = "\\Jonny \"Magic\" Smith\n"
    }

    @Immutable
    struct ImmutableStructWithCollections {
        nullableListField: List<Int>? = null
        emptyListField: List<Int> = []
        valuesListField: List<Int> = [1, 2, 3]

        nullableMapField: Map<Int, String>? = null
        emptyMapField: Map<Int, String> = []
        valuesMapField: Map<Int, String> = [9: "baz", 27: "bar"]

        nullableSetField: Set<String>? = null
        emptySetField: Set<String> = []
        valuesSetField: Set<String> = ["bar", "baz"]
    }

    @Immutable
    struct ImmutableStructWithFieldConstructorAndCollections {
        nullableListField: List<Int>? = null
        emptyListField: List<Int> = []
        valuesListField: List<Int> = [1, 2, 3]

        nullableMapField: Map<Int, String>? = null
        emptyMapField: Map<Int, String> = []
        valuesMapField: Map<Int, String> = [9: "baz", 27: "bar"]

        nullableSetField: Set<String>? = null
        emptySetField: Set<String> = []
        valuesSetField: Set<String> = ["bar", "baz"]

        someField: Int = 5
        anotherField: Int = 7

        @Dart("withIntegers")
        field constructor(someField, anotherField)
    }

    @Immutable
    struct SomeImmutableStructWithDefaults {
        intField: Int = 42
    }

    @Immutable
    struct ImmutableStructWithFieldUsingImmutableStruct {
        someField1: SomeImmutableStructWithDefaults = {}
        someField2: ImmutableStructWithCollections = {}
    }

    @Immutable
    struct ImmutableStructWithFieldConstructorAndFieldUsingImmutableStruct {
        someField1: SomeImmutableStructWithDefaults = {}
        someField2: ImmutableStructWithCollections = {}

        someField: Int = 5
        anotherField: Int = 7

        @Dart("withIntegers")
        field constructor(someField, anotherField)
    }

    @Immutable
    struct ImmutableStructWithNullableFieldUsingImmutableStruct {
        someField1: SomeImmutableStructWithDefaults? = {}
        someField2: ImmutableStructWithCollections? = {}
    }

    @Immutable
    struct ImmutableStructWithFieldConstructorAndNullableFieldUsingImmutableStruct {
        someField1: SomeImmutableStructWithDefaults? = {}
        someField2: ImmutableStructWithCollections? = {}

        someField: Int = 5
        anotherField: Int = 7

        @Dart("withIntegers")
        field constructor(someField, anotherField)
    }
}

struct StructWithInitializerDefaults {
    intsField: List<Int> = [4, -2, 42]
    floatsField: DefaultValues.FloatArray = [3.14, -Infinity]
    setTypeField: DefaultValues.StringSet = ["foo", "bar"]
    mapField: DefaultValues.IdToStringMap = [1: "foo", 42: "bar"]
}

struct BlobDefaults {
    emptyList: Blob = []
    deadBeef: Blob = [222, 173, 190, 239]
}
