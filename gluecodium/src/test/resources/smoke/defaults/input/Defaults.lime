# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class DefaultValues {
    struct StructWithDefaults {
        intField: Int = 42
        uintField: UInt = 4294967295
        floatField: Float = 3.14
        doubleField: Double = -1.4142
        boolField: Boolean = true
        stringField: String = "\\Jonny \"Magic\" Smith\n"
        enumField: SomeEnum = SomeEnum.BarValue
        externalEnumField: ExternalEnum = ExternalEnum.Another_Value
    }
    struct NullableStructWithDefaults {
        intField: Int? = null
        uintField: UInt? = null
        floatField: Float? = null
        boolField: Boolean? = null
        stringField: String? = null
        enumField: SomeEnum? = null
    }
    struct StructWithSpecialDefaults {
        floatNanField: Float = NaN
        floatInfinityField: Float = Infinity
        floatNegativeInfinityField: Float = -Infinity
        doubleNanField: Double = NaN
        doubleInfinityField: Double = Infinity
        doubleNegativeInfinityField: Double = -Infinity
    }
    struct StructWithEmptyDefaults {
        intsField: List<Int> = []
        floatsField: FloatArray = []
        mapField: IdToStringMap = []
        structField: StructWithDefaults = {}
        setTypeField: StringSet = []
    }
    struct StructWithTypedefDefaults {
        longField: LongTypedef = 42
        boolField: BooleanTypedef = true
        stringField: StringTypedef = "\\Jonny \"Magic\" Smith\n"
        enumField: EnumTypedef = SomeEnum.BarValue
    }

    enum SomeEnum {
        FooValue,
        BarValue
    }
    @Cpp(ExternalType = "foo/Bar.h", ExternalName = "::fire::SomeVeryExternalEnum")
    enum ExternalEnum {
        One_Value,
        Another_Value
    }

    typealias LongTypedef = Long
    typealias BooleanTypedef = Boolean
    typealias StringTypedef = String
    typealias EnumTypedef = SomeEnum
    typealias FloatArray = List<Float>
    typealias IdToStringMap = Map<UInt, String>
    typealias StringSet = Set<String>

    static fun processStructWithDefaults(input: StructWithDefaults): StructWithDefaults
}

types TypesWithDefaults {
    struct StructWithDefaults {
        intField: Int = 42
        uintField: UInt = 4294967295
        floatField: Float = 3.14
        doubleField: Double = -1.4142
        boolField: Boolean = true
        stringField: String = "\\Jonny \"Magic\" Smith\n"
        enumField: SomeEnum = SomeEnum.BarValue
    }
    @Immutable
    struct ImmutableStructWithDefaults {
        intField: Int = 42
        uintField: UInt
        floatField: Float = 3.14
        doubleField: Double = -1.4142
        boolField: Boolean
        stringField: String = "\\Jonny \"Magic\" Smith\n"
        enumField: SomeEnum = SomeEnum.BarValue
        externalEnumField: DefaultValues.ExternalEnum = DefaultValues.ExternalEnum.Another_Value
    }
    struct StructWithAnEnum {
        config: AnEnum.AnEnum = AnEnum.AnEnum.ENABLED
    }

    enum SomeEnum {
        FooValue,
        BarValue
    }
}

struct StructWithInitializerDefaults {
    intsField: List<Int> = [4, -2, 42]
    floatsField: DefaultValues.FloatArray = [3.14, -Infinity]
    structField: TypesWithDefaults.StructWithAnEnum = {config = AnEnum.AnEnum.DISABLED}
    setTypeField: DefaultValues.StringSet = ["foo", "bar"]
    mapField: DefaultValues.IdToStringMap = [1: "foo", 42: "bar"]
}

struct BlobDefaults {
    emptyList: Blob = []
    deadBeef: Blob = [222, 173, 190, 239]
}
