# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class Structs {
    struct Point {
        x: Double
        y: Double
    }
    struct Line {
        a: Point
        b: Point
    }

    @Immutable
    struct AllTypesStruct {
        int8Field: Byte
        uint8Field: UByte
        int16Field: Short
        uint16Field: UShort
        int32Field: Int
        uint32Field: UInt
        int64Field: Long
        uint64Field: ULong
        floatField: Float
        doubleField: Double
        stringField: String
        booleanField: Boolean
        bytesField: Blob
        pointField: Point
    }

    struct NestingImmutableStruct {
        structField: AllTypesStruct
    }
    struct DoubleNestingImmutableStruct {
        nestingStructField: NestingImmutableStruct
    }
    struct StructWithArrayOfImmutable {
        arrayField: ArrayOfImmutable
    }
    @Cpp(Accessors)
    @Immutable
    struct ImmutableStructWithCppAccessors {
        stringField: String
    }
    @Cpp(Accessors)
    struct MutableStructWithCppAccessors {
        stringField: String
    }

    enum FooBar {
        FOO,
        BAR
    }

    typealias ArrayOfImmutable = List<AllTypesStruct>

    static fun swapPointCoordinates(input: Point): Point
    static fun returnAllTypesStruct(input: AllTypesStruct): AllTypesStruct

    static fun createPoint(
        x: Double,
        y: Double
    ): TypeCollection.Point
    static fun modifyAllTypesStruct(
        input: TypeCollection.AllTypesStruct
    ): TypeCollection.AllTypesStruct
}

class StructsInstance {}

types TypeCollection {
    struct Point {
        x: Double
        y: Double
    }
    struct Line {
        a: Point
        b: Point
    }
    struct AllTypesStruct {
        int8Field: Byte
        uint8Field: UByte
        int16Field: Short
        uint16Field: UShort
        int32Field: Int
        uint32Field: UInt
        int64Field: Long
        uint64Field: ULong
        floatField: Float
        doubleField: Double
        stringField: String
        booleanField: Boolean
        bytesField: Blob
        pointField: Point
    }
    typealias PointTypedef = Point
}

@Skip(Java, Dart)
struct DeprecatedFields {
    normalField1: String
    @Deprecated
    deprecatedField: String = ""
    normalField2: String
}
