# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

@Cpp("fooTypes")
@Java("barTypes")
@Swift("bazTypes")
@Dart("weeTypes")
@Kotlin("dodoTypes")
struct PlatformNames {

    @Cpp("fooStruct")
    @Java("barStruct")
    @Swift("bazStruct")
    @Dart("weeStruct")
    @Kotlin("dodoStruct")
    struct BasicStruct {

        @Cpp("FOO_FIELD")
        @Java("BAR_FIELD")
        @Swift("BAZ_FIELD")
        @Dart("WEE_FIELD")
        @Kotlin("DODO_FIELD")
        stringField: String

        @Cpp("FooCreate")
        @Java("BarCreate")
        @Swift("BazCreate")
        @Dart("WeeCreate")
        @Kotlin("DodoCreate")
        constructor make(

            @Cpp("FooParameter")
            @Java("BarParameter")
            @Swift(Name = "BazParameter", Label = "_")
            @Dart("WeeParameter")
            @Kotlin("DodoParameter")
            basicParameter: String
        )
    }

    @Cpp("fooEnum")
    @Java("barEnum")
    @Swift("bazEnum")
    @Dart("werrEnum")
    @Kotlin("dodoEnum")
    enum BasicEnum {

        @Cpp("foo_item")
        @Java("bar_item")
        @Swift("BAZ_ITEM")
        @Dart("WEE_ITEM")
        @Kotlin("DODO_ITEM")
        BASIC_ITEM
    }

    @Cpp("fooTypedef")
    @Swift("bazTypedef")
    @Kotlin("dodoTypedef")
    typealias BasicTypedef = Double
}

@Cpp("fooInterface")
@Java("barInterface")
@Swift("bazInterface")
@Dart("weeInterface")
@Kotlin("dodoInterface")
class PlatformNamesInterface {

    @Cpp("FooMethod")
    @Java("BarMethod")
    @Swift("BazMethod")
    @Dart("WeeMethod")
    @Kotlin("DodoMethod")
    fun basicMethod(

        @Cpp("FooParameter")
        @Java("BarParameter")
        @Swift(Name = "BazParameter", Label = "_")
        @Dart("WeeParameter")
        @Kotlin("DodoParameter")
        basicParameter: String
    ): PlatformNames.BasicStruct

    @Cpp("make")
    @Java("make")
    @Swift("make")
    @Dart("make")
    @Kotlin("make")
    constructor create(

        @Cpp("makeParameter")
        @Java("makeParameter")
        @Swift(Name = "makeParameter", Label = "_")
        @Dart("makeParameter")
        @Kotlin("makeParameter")
        basicParameter: String
    )

    @Swift("BAZ_PROPERTY")
    @Dart("WEE_PROPERTY")
    @Kotlin("DODO_PROPERTY")
    property basicProperty: UInt {
        @Cpp("GET_FOO_PROPERTY")
        @Java("GET_BAR_PROPERTY")
        get
        @Cpp("SET_FOO_PROPERTY")
        @Java("SET_BAR_PROPERTY")
        set
    }
}

@Cpp("fooListener")
@Java("barListener")
@Swift("bazListener")
@Dart("weeListener")
@Kotlin("dodoListener")
interface PlatformNamesListener {

    @Cpp("FooMethod")
    @Java("BarMethod")
    @Swift("BazMethod")
    @Dart("WeeMethod")
    @Kotlin("DodoMethod")
    fun basicMethod(

        @Cpp("FooParameter")
        @Java("BarParameter")
        @Swift(Name = "BazParameter", Label = "_")
        @Dart("WeeParameter")
        @Kotlin("DodoParameter")
        basicParameter: String
    )
}
