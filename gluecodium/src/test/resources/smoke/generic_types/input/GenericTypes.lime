# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class GenericTypesWithBasicTypes {
    typealias BasicList = List<String>
    typealias BasicMap = Map<String, String>
    typealias BasicSet = Set<String>

    struct StructWithGenerics {
        numbersList: List<UByte>
        numbersMap: Map<UByte, String>
        numbersSet: Set<UByte>
    }

    fun methodWithList(input: List<Int>): List<Int>
    fun methodWithMap(input: Map<Int, Boolean>): Map<Int, Boolean>
    fun methodWithSet(input: Set<Int>): Set<Int>
    fun methodWithListTypeAlias(input: BasicList): BasicList
    fun methodWithMapTypeAlias(input: BasicMap): BasicMap
    fun methodWithSetTypeAlias(input: BasicSet): BasicSet

    property listProperty: List<Float> { get set }
    property mapProperty: Map<Float, Double> { get set }
    property setProperty: Set<Float> { get set }
}

class GenericTypesWithGenericTypes {
    fun methodWithListOfLists(input: List<List<Int>>): List<List<Int>>
    fun methodWithMapOfMaps(input: Map<Int, Map<Int, Boolean>>): Map<Map<Int, Boolean>, Boolean>
    fun methodWithSetOfSets(input: Set<Set<Int>>): Set<Set<Int>>

    fun methodWithListAndMap(input: List<Map<Int, Boolean>>): Map<Int, List<Int>>
    fun methodWithListAndSet(input: List<Set<Int>>): Set<List<Int>>
    fun methodWithMapAndSet(input: Map<Int, Set<Int>>): Set<Map<Int, Boolean>>
    fun methodWithMapGenericKeys(input: Map<Set<Int>, Boolean>): Map<List<Int>, Boolean>
}

class GenericTypesWithCompoundTypes {
    struct BasicStruct {
        value: Double
    }
    struct ExternalStruct {
        external {
            cpp include "alien/FooStruct.h"
            cpp name "::alien::FooStruct"
        }
        string: String
    }

    enum SomeEnum {
        FOO,
        BAR
    }
    enum ExternalEnum {
        external {
            cpp include "alien/FooEnum.h"
            cpp name "::alien::FooEnum"
        }

        ON,
        OFF
    }

    fun methodWithStructList(input: List<BasicStruct>): List<ExternalStruct>
    fun methodWithStructMap(input: Map<String, BasicStruct>): Map<String, ExternalStruct>

    fun methodWithEnumList(input: List<SomeEnum>): List<ExternalEnum>
    fun methodWithEnumMapKey(input: Map<SomeEnum, Boolean>): Map<ExternalEnum, Boolean>
    fun methodWithEnumMapValue(input: Map<Int, SomeEnum>): Map<Int, ExternalEnum>
    fun methodWithEnumSet(input: Set<SomeEnum>): Set<ExternalEnum>

    fun methodWithInstancesList(input: List<DummyClass>): List<DummyInterface>
    fun methodWithInstancesMap(input: Map<Int, DummyClass>): Map<Int, DummyInterface>
}

struct EnumSets {
    const enumSetConst: Set<GenericTypesWithCompoundTypes.SomeEnum> = [
        GenericTypesWithCompoundTypes.SomeEnum.FOO,
        GenericTypesWithCompoundTypes.SomeEnum.BAR
    ]
    enumSetField: Set<GenericTypesWithCompoundTypes.SomeEnum> = []
}

class DummyClass {}

interface DummyInterface {}

class AnotherDummyClass {}
lambda LambdaWithClassCollectionReturnType = () -> List<AnotherDummyClass>

class YetAnotherDummyClass {}
lambda LambdaWithClassCollectionParameterType = (List<YetAnotherDummyClass>) -> Void

@Dart(Skip)
class GenericsFromParent: AuxParent {}
