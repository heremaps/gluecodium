plugins {
    id 'org.xtext.xtend' version '1.0.17'
    id 'com.diffplug.gradle.spotless' version '3.3.2'
}

xtend {
    // generate xtend debug symbols
    debugger {
        sourceInstaller = 'SMAP'
        hideSyntheticVariables = true
    }
}

configurations {
    buildDeployModel {
    }
}

ext {
    fdeplOutput = "${buildDir}/fdepl-gen/"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', project.fdeplOutput
        }
        resources {
            srcDirs 'src/main/java'
            include '**/*.fdepl'
            include '**/*.fidl'
            include '**/*.h'
            include '**/*.cpp'
            include '**/*.properties'
            include '**/*.mustache'
        }
    }
    test {
        java {
        }
    }
}

dependencies {
    buildDeployModel project(':fdeplgen')

    compile 'commons-io:commons-io:+'
    compile 'org.apache.commons:commons-lang3:3.+'
    compile 'org.eclipse.core:runtime:+'
    compile 'org.eclipse.equinox:common:+'
    compile 'org.eclipse.xpand:org.eclipse.xpand:+'
    compile 'org.eclipse.xpand:org.eclipse.xtend.typesystem.emf:+'
    compile 'org.eclipse.xtext:org.eclipse.xtext.generator:2.11.0'
    compile 'org.eclipse.xtext:org.eclipse.xtext.xbase.lib:2.11.0'
    compile 'org.franca:core:0.11.1.201705031527'
    compile 'org.franca:core-dsl:0.11.1.201705031527'
    compile 'org.franca:deploymodel-dsl:0.11.1.201705031527'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-jdk14:1.7.25'
    compile 'org.trimou:trimou-core:2.2.0.Final'

    testCompile 'com.github.stefanbirkner:system-rules:1.16.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.+'
    testCompile 'org.eclipse.xtext:org.eclipse.xtext.junit4:2.9.2'
    testCompile 'org.eclipse.xtext:org.eclipse.xtext.xbase.junit:2.9.2'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.0'
    testCompile 'org.powermock:powermock-classloading-xstream:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.7.0'
}

def buildDeployModelConfiguration() {
    return {
        classpath = configurations.buildDeployModel
        main = 'com.here.ivi.api.FrancaDeployModelGenerator'
        workingDir = 'src/main/resources'
        args += project.fdeplOutput
        args += 'franca/spec/BaseApiSpec.fdepl'
    }
}
task buildDeployModel(type: JavaExec) {
    configure buildDeployModelConfiguration()
}
generateXtext.dependsOn(buildDeployModel)

apply plugin: 'application'
mainClassName = 'com.here.ivi.api.Transpiler'
run {
    /* By default gradle doesn't forward the command line arguments to main.
     This allows to provide a -Dexec.args="args" when the user calls gradle
     :transpiler:run. This way args will map to the args in main. */
    if (System.getProperty('exec.args') != null) {
        args System.getProperty('exec.args').split()
    } else {
        args '../fidl'
    }
}

jar {
    manifest {
        attributes ('Main-Class': 'com.here.ivi.api.Transpiler',
                    'Class-Path': configurations.runtime.files.collect { it.getName() }.join(' '))
    }
}

task transpilerStandaloneJar(type: Jar) {
    baseName = project.name + '-standalone'
    manifest {
        attributes('Main-Class': 'com.here.ivi.api.Transpiler',
                   'Class-Path': configurations.runtime.files.collect { it.getName() }.join(' '))
    }
    from {
        configurations.runtime.files.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.7.9'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                counter = 'LINE'
                minimum = 0.63
            }
        }
    }
}
jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true

        html.destination file("${buildDir}/reports/coverage/html")
        xml.destination file("${buildDir}/reports/coverage/coverageReport.xml")
    }
}

apply plugin: 'checkstyle'
checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle-hard.xml')
    toolVersion = '7.8.2'
}
checkstyleMain {
    ignoreFailures false
    maxErrors=65
}
checkstyleTest {
    ignoreFailures false
    maxErrors=95
}

apply plugin: 'pmd'
pmd {
    ruleSetFiles = files(rootProject.file('config/pmd/pmd-hard.xml'))
    rulePriority = 3
    ignoreFailures true
}

apply from: "$rootDir/gradle/publish.gradle"
apply from: "$rootDir/gradle/spotless.gradle"
