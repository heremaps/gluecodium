plugins {
    id "org.xtext.xtend" version "1.0.17"
}

apply plugin: 'jacoco'

xtend {
    // generate xtend debug symbols
    debugger {
        sourceInstaller = 'SMAP'
        hideSyntheticVariables = true
    }
}

def fdeplOutput = "${buildDir}/fdepl-gen/"
// TODO move into generator
mkdir(buildDir)
mkdir(fdeplOutput)

configurations {
    buildDeployModel {
        extendsFrom compile
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', 'build/fdepl-gen'
        }
        resources {
            srcDirs "src/main/java"
            include "**/*.fdepl"
            include "**/*.fidl"
            include "**/*.h"
            include "**/*.cpp"
            include "**/.clang-format"
            include "**/*.properties"
        }
    }
    test {
        java {
        }
    }
}

dependencies {
    compile 'commons-io:commons-io:+' // apache commons io for FileUtils
    compile 'org.apache.commons:commons-lang3:3.+'
    compile project(':externals:core')
    compile project(':externals:dsl')
    compile project(':externals:deploymodel')

    buildDeployModel project(':fdeplgen')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.+'
    testCompile 'org.eclipse.xtext:org.eclipse.xtext.junit4:2.9.2'
    testCompile 'org.eclipse.xtext:org.eclipse.xtext.xbase.junit:2.9.2'
    testCompile 'com.github.stefanbirkner:system-rules:1.16.1'
}

def buildDeployModelConfiguration(fdeplFile, output) {
    return {
        workingDir = "src/main/resources"
        main = 'com.here.tools.FrancaDeploymodelGenerator'
        classpath = configurations.buildDeployModel
        inputs.file "${fdeplFile}"
        outputs.dir output
        args += fdeplFile
        args += output
    }
}

task buildCppStubDeployModel(type: JavaExec) {
    configure buildDeployModelConfiguration('franca/spec/CppStubSpec.fdepl', fdeplOutput)
}
generateXtext.dependsOn(buildCppStubDeployModel)
clean.dependsOn(cleanBuildCppStubDeployModel)

task buildLegacyDeployModel(type: JavaExec) {
    configure buildDeployModelConfiguration('franca/spec/LegacySpec.fdepl', fdeplOutput)
}
generateXtext.dependsOn(buildLegacyDeployModel)
clean.dependsOn(cleanBuildLegacyDeployModel)

apply plugin: 'application'
mainClassName = 'com.here.ivi.api.Transpiler'

jacoco {
    toolVersion = "0.7.9"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                counter = 'LINE'
                minimum = 0.25
            }
        }
    }
}

jacocoTestReport {
    reports {
        csv.enabled true
        html.enabled true
        xml.enabled true

        csv.destination file("${buildDir}/reports/coverage/coverageReport.csv")
        html.destination file("${buildDir}/reports/coverage/html")
        xml.destination file("${buildDir}/reports/coverage/coverageReport.xml")
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.here.ivi.api.Transpiler'
    }
}

run {
    /* By default gradle doesn't forward the command line arguments to main.
     This allows to provide a -Dexec.args="args" when the user calls gradle
     :transpiler:run. This way args will map to the args in main. */
    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    } else {
        args "../fidl"
    }
}

task diff(type: JavaExec) {
     classpath=sourceSets.main.runtimeClasspath
     main = 'com.here.ivi.api.Fidldif'
     if (System.getProperty("exec.args") != null) {
       args System.getProperty("exec.args").split()
     }
     else {
       args 'test/data/Runtime.old.fidl', 'test/data/Runtime.fidl'
     }
}

apply plugin: 'checkstyle'
checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle-hard.xml')
    ignoreFailures true
}

apply plugin: 'pmd'
pmd {
    ruleSetFiles = files(rootProject.file('config/pmd/pmd-hard.xml'))
    ignoreFailures true
}


group = 'com.here.ivi.api'
version = '0.0.1'

apply plugin: 'maven-publish'
publishing {
    publications {
        transpiler(MavenPublication) {
            from components.java
        }
    }
}

apply plugin: 'com.jfrog.artifactory'
artifactory {
    contextUrl = 'example.com'
    publish {
        repository {
            username = project.properties['artifactory.username']
            password = project.properties['artifactory.password']
            //repoKey = 'android-release-local' // Only used for official releases!
            repoKey = 'gradle-plugins-release-local' // Use for development
        }
        defaults {
            publications 'transpiler'
        }
    }
}
