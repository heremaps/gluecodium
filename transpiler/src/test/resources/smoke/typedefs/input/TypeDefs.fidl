/*
 * Copyright (C) 2017 HERE Global B.V. and its affiliate(s). All rights reserved.
 *
 * This software, including documentation, is protected by copyright controlled by
 * HERE Global B.V. All rights are reserved. Copying, including reproducing, storing,
 * adapting or translating, any or all of this material requires the prior written
 * consent of HERE Global B.V. This material also contains confidential information,
 * which may not be disclosed to others without prior written consent of HERE Global B.V.
 *
 */

package smoke

interface TypeDefs {

    version {
        major 0
        minor 1
    }

    typedef PrimitiveTypeDef is Double

    method methodWithPrimitiveTypeDef {
        in {
            PrimitiveTypeDef input
        }
        out {
            PrimitiveTypeDef output
        }
    }

    struct TestStruct
    {
        String something
    }
    array StructArray of TestStruct
    typedef ComplexTypeDef is StructArray

    method methodWithComplexTypeDef {
        in {
            ComplexTypeDef input
        }
        out {
            ComplexTypeDef output
        }
    }

    typedef NestedIntTypeDef is PrimitiveTypeDef
    typedef TestStructTypeDef is TestStruct
    typedef NestedStructTypeDef is TestStructTypeDef

    method returnNestedIntTypeDef {
        in {
            NestedIntTypeDef input
        }
        out {
            NestedIntTypeDef output
        }
    }

    method returnTestStructTypeDef {
        in {
            TestStructTypeDef input
        }
        out {
            TestStructTypeDef output
        }
    }

    method returnNestedStructTypeDef {
        in {
            NestedStructTypeDef input
        }
        out {
            NestedStructTypeDef output
        }
    }

    method returnTypeDefPointFromTypeCollection {
        in {
            TypeCollection.PointTypeDef input
        }
        out {
            TypeCollection.PointTypeDef output
        }
    }
}

typeCollection TypeCollection {

    version {
        major 0
        minor 1
    }

    typedef PointTypeDef is Point

    struct Point {
        Double x
        Double y
    }
}
