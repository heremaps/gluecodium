package com.here.ivi.api.generator.common;

import com.here.ivi.api.Transpiler;
import java.util.ArrayList;
import java.util.List;

/**
 * The base for all the generators that runs additional tools on each file generated.
 *
 * Actual file generation is delegated to {@link com.here.ivi.api.generator.common.Generator#generateFiles} method.
 */
public abstract class Generator<IA, TA> implements GeneratorSuite<IA, TA> {

    private final Transpiler tool;
    private final List<IFileTool> fileTools;

    public Generator(Transpiler tp) {
        tool = tp;
        fileTools = registerTools();
    }

    @Override
    public Transpiler getTool() {
        return tool;
    }

    /**
     * Triggers generation of files and runs tools on each file.
     * It delegates actual generation to {@link Generator#generateFiles()} and then runs all tools
     * returned by {@link Generator#registerTools} against each generated file.
     *
     * @return a list of generated and already processed files
     */
    @Override
    public final List<GeneratedFile> generate() {
        List<GeneratedFile> files = generateFiles();
        for (IFileTool fileTool : fileTools) {
            files.replaceAll(fileTool::process);
        }
        return files;
    }

    /**
     * Triggers generation of files.
     * This method should be implemented by classes inheriting from {@link com.here.ivi.api.generator.common.Generator}
     *
     * @return a list of generated files with their relative destination paths
     */
    public abstract List<GeneratedFile> generateFiles();

    /**
     * @return list of tools to run on each of file generated by {@link com.here.ivi.api.generator.common.Generator#generateFiles} method.
     *         Inheriting classes should provide their own implementation with own set of tools to run.
     */
    protected List<IFileTool> registerTools() {
        return new ArrayList<>();
    }
}
