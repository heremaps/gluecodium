{{>common/DocComment}}
{{#if visibility.toString}}{{visibility}} {{/if}}{{#qualifiers}}{{.}} {{/qualifiers}}class {{name}} {{#if this.extendedClass}}extends {{extendedClass.name}} {{/if}}{{#if parentInterfaces}}implements {{join parentInterfaces delimiter=", " }} {{/if}}{
{{#constants}}{{prefixPartial "java/Constant" "    "}}
{{/constants}}
{{#fields}}{{prefixPartial "java/Field" "    "}}
{{/fields}}
{{#enums}}{{prefixPartial "java/Enum" "    "}}
{{/enums}}
{{#innerClasses}}{{prefixPartial "java/Class" "    "}}
{{/innerClasses}}
{{#if isImplClass}}{{#if visibility.toString}}
    /** For internal use only */
{{/if}}    protected {{name}}(final long nativeHandle) {
        super(nativeHandle{{#if needsDisposer}}, new Disposer() {
            @Override
            public void disposeNative(long handle) {
                disposeNativeHandle(handle);
            }
        }{{/if}});
    }{{#if needsDisposer}}

    private static native void disposeNativeHandle(long nativeHandle);{{/if}}
{{/if}}
{{#if fields}}
    public {{name}}() {}

    public {{name}}({{#fields}}{{type}} {{name}}{{#if iter.hasNext}}, {{/if}}{{/fields}}) {
    {{#fields}}
        this.{{name}} = {{name}};
    {{/fields}}
    }
    {{#if tooManyFields}}

    public static {{name}}Builder builder() {
        return new {{name}}Builder();
    }
    public static class {{name}}Builder {
    {{#fields}}
    {{prefixPartial "java/Field" "    "}}
    {{/fields}}

        {{name}}Builder() {
        }

        {{#set className=name}}{{#fields}}
        public {{className}}Builder {{name}}({{type}} {{name}}) {
            this.{{name}} = {{name}};
            return this;
        }
        {{/fields}}{{/set}}
        public {{name}} build() {
            return new {{name}}({{#fields}}{{name}}{{#if iter.hasNext}}, {{/if}}{{/fields}});
        }
    }
    {{/if}}
{{/if}}
{{#methods}}{{prefixPartial "java/MethodSignature" "    "}}
{{/methods}}
}
