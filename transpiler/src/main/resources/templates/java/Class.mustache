{{>common/DocComment}}
{{#if visibility.toString}}{{visibility}} {{/if}}{{#qualifiers}}{{.}} {{/qualifiers}}class {{name}} {{#if this.extendedClass}}extends {{extendedClass.name}} {{/if}}{{#if parentInterfaces}}implements {{join parentInterfaces delimiter=", " }} {{/if}}{
{{#if isParcelable}}
    public static final Parcelable.Creator<{{name}}> CREATOR = new Parcelable.Creator<{{name}}>() {

        public {{name}} createFromParcel(final Parcel in_parcel) {
            return new {{name}}(in_parcel);
        }

        public {{name}}[] newArray(final int size) {
            return new {{name}}[size];
        }
    };
{{/if}}
{{#constants}}{{prefixPartial "java/Constant" "    "}}
{{/constants}}
{{#fields}}{{prefixPartial "java/Field" "    "}}
{{/fields}}
{{#enums}}{{prefixPartial "java/Enum" "    "}}
{{/enums}}
{{#innerClasses}}{{prefixPartial "java/Class" "    "}}
{{/innerClasses}}
{{#if isImplClass}}{{#if visibility.toString}}
    /** For internal use only */
{{/if}}    protected {{name}}(final long nativeHandle) {
        super(nativeHandle{{#if needsDisposer}}, new Disposer() {
            @Override
            public void disposeNative(long handle) {
                disposeNativeHandle(handle);
            }
        }{{/if}});
    }{{#if needsDisposer}}

    private static native void disposeNativeHandle(long nativeHandle);{{/if}}
{{/if}}
{{#if fields}}
    public {{name}}() {}

    public {{name}}({{#fields}}{{type}} {{name}}{{#if iter.hasNext}}, {{/if}}{{/fields}}) {
    {{#fields}}
        this.{{name}} = {{name}};
    {{/fields}}
    }
{{/if}}
{{#if isParcelable}}

    private {{name}}(final Parcel in_parcel) {
    {{#fields}}
        this.{{name}} = in_parcel.read{{>parcelReadSuffix}};
    {{/fields}}
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(final Parcel out_parcel, final int flags) {
    {{#fields}}
        out_parcel.write{{>parcelWriteSuffix}};
    {{/fields}}
    }
{{/if}}
{{#if fields}}{{#if tooManyFields}}

    public static class Builder {
    {{#fields}}
        private {{type.name}} {{name}}{{#initial}} = {{#isNew}}new {{/isNew}}{{name}}{{#isNew}}(){{/isNew}}{{/initial}};
    {{/fields}}

        public Builder() {
        }

        {{#fields}}
        public Builder set{{capitalize name}}({{type}} {{name}}) {
            this.{{name}} = {{name}};
            return this;
        }
        {{/fields}}
        public {{name}} build() {
            return new {{name}}({{#fields}}{{name}}{{#if iter.hasNext}}, {{/if}}{{/fields}});
        }
    }
{{/if}}{{/if}}
{{#methods}}{{prefixPartial "java/MethodSignature" "    "}}
{{/methods}}
}{{!!

}}{{+parcelReadSuffix}}{{!!
    }}{{#instanceOf type "JavaCustomType"}}Parcelable(null){{/instanceOf}}{{!!
    }}{{#instanceOf type "JavaPrimitiveType"}}{{!!
        }}{{#switch type.name}}{{!!
        }}{{#case "boolean"}}Byte() != 0{{/case}}{{!!
        }}{{#default}}{{capitalize type.name}}(){{/default}}{{!!
        }}{{/switch}}{{!!
    }}{{/instanceOf}}{{!!
    }}{{#instanceOf type "JavaReferenceType"}}{{capitalize type.name}}(){{/instanceOf}}{{!!
}}{{/parcelReadSuffix}}{{!!

}}{{+parcelWriteSuffix}}{{!!
    }}{{#instanceOf type "JavaCustomType"}}Parcelable({{name}}){{/instanceOf}}{{!!
    }}{{#instanceOf type "JavaPrimitiveType"}}{{!!
        }}{{#switch type.name}}{{!!
        }}{{#case "boolean"}}Byte((byte) ({{name}} ? 1 : 0)){{/case}}{{!!
        }}{{#default}}{{capitalize type.name}}({{name}}){{/default}}{{!!
        }}{{/switch}}{{!!
    }}{{/instanceOf}}{{!!
    }}{{#instanceOf type "JavaReferenceType"}}{{capitalize type.name}}({{name}}){{/instanceOf}}{{!!
}}{{/parcelWriteSuffix}}
