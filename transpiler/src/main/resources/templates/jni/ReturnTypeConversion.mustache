    {{#exception}}
    auto nativeCallResult = {{>jni/CppMethodCall}}{{#if returnType}}
    auto result = nativeCallResult.safe_value();{{/if}}
    auto errorCode = nativeCallResult{{#if returnType}}.error(){{/if}}.code().code();
    if (errorCode != hf::errors::NONE)
    {
        auto nEnumValue = static_cast<{{jniEnum.cppFullyQualifiedName}}>(errorCode);
        auto jEnumValue = here::internal::convert_to_jni(_jenv, nEnumValue);
        auto exceptionClass = _jenv->FindClass("{{javaClassName}}");
        auto theConstructor = _jenv->GetMethodID(exceptionClass, "<init>", "({{jniEnum.jniTypeSignature}})V");
        auto exception = _jenv->NewObject(exceptionClass, theConstructor, jEnumValue);
        _jenv->Throw(static_cast<jthrowable>(exception));{{#if returnType}}
        return {{#if returnType.isComplex}}nullptr{{/if}}{{#unless returnType.isComplex}}result{{/unless}};{{/if}}
    }
    {{/exception}}
{{^exception}}    {{#if returnType}}auto result = {{/if}}{{>jni/CppMethodCall}}{{/exception}}{{#if returnType}}
    return {{#if returnType.isComplex}}here::internal::convert_to_jni{{#if returnType.isJavaArray}}_array{{/if}}(_jenv, result){{/if}}{{#unless returnType.isComplex}}result{{/unless}};{{/if}}
