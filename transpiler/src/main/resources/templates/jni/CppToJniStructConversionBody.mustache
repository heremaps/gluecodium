{
  auto javaClass = _jenv->FindClass("{{>jni/JavaClassSignaturePrefix}}{{javaClass.name}}");
  auto _jresult = create_object(_jenv, javaClass);
{{#fields}}
  {{#hasCustomType}}
  auto j{{cppField.name}} = convert_to_jni{{#if type.isJavaArray}}_array{{/if}}(_jenv, _ninput.{{cppField.name}});
  {{/hasCustomType}}
  {{^hasCustomType}}
  auto j{{cppField.name}} = {{#if type.isJavaArray}}convert_to_jni_array(_jenv, {{/if}}_ninput.{{cppField.name}}{{#if type.isJavaArray}}){{/if}};
  {{/hasCustomType}}
{{/fields}}
{{#fields}}
  {{#hasCustomType}}
  set_object_field(_jenv, javaClass, _jresult, "{{javaField.name}}",
  {{#hasTemplateType}}
  "L{{#javaField.type.packageNames}}{{.}}/{{/javaField.type.packageNames}}{{#javaField.type.classNames}}{{.}}{{/javaField.type.classNames}};", j{{cppField.name}});
  {{/hasTemplateType}}
  {{^hasTemplateType}}
  "L{{>jni/JavaClassSignaturePrefix}}{{#javaField.type.classNames}}{{#iter.isLast}}{{.}}{{/iter.isLast}}{{/javaField.type.classNames}};", j{{cppField.name}});
  {{/hasTemplateType}}
  {{/hasCustomType}}
  {{^hasCustomType}}
  set_{{javaField.type.literalName}}_field(_jenv, javaClass, _jresult, "{{javaField.name}}", j{{cppField.name}});
  {{/hasCustomType}}
{{/fields}}
  return _jresult;
}