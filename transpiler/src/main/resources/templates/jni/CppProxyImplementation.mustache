
{{#cppNameSpaces}}
namespace {{.}} {

{{/cppNameSpaces}}

using namespace ::here::internal;

{{cppName}}CppProxy::{{cppName}}CppProxy( JNIEnv* _jenv, jobject _jobj ) : CppProxyBase(_jenv, _jobj) {
}

{{#methods}}
{{>jni/ReturnType}} {{cppName}}CppProxy::{{cppMethodName}}( {{joinPartial parameters "jni/CppProxyMethodParameter" ", "}} ){{#if isConst}} const{{/if}} {
    {{+parameterName}}{{name}}{{/parameterName}}callJavaMethod( "{{javaMethodName}}", "({{#parameters}}{{type.jniTypeSignature}}{{/parameters}}){{#if returnType}}{{returnType.jniTypeSignature}}{{/if}}{{#unless returnType}}V{{/unless}}" {{#if parameters}},{{/if}} {{joinPartial parameters "parameterName" ", "}});
}
{{/methods}}

{{#cppNameSpaces}}
}
{{/cppNameSpaces}}