
#include "android/jni/InstanceConversion.h"
#include "android/jni/StructConversion.h"
#include "android/jni/ArrayConversionUtils.h"
#include "android/jni/EnumConversion.h"

{{#cppNameSpaces}}
namespace {{.}} {

{{/cppNameSpaces}}

using namespace ::here::internal;

{{cppName}}CppProxy::{{cppName}}CppProxy( JNIEnv* _jenv, jobject _jobj, jint _jHashCode )
    : CppProxyBase( _jenv, _jobj, _jHashCode ) {
}

{{#methods}}
{{>jni/ReturnType}} {{cppName}}CppProxy::{{cppMethodName}}( {{joinPartial parameters "jni/CppProxyMethodParameter" ", "}} ){{#if isConst}} const{{/if}} {
    JNIEnv * jniEnv;
    bool threadAttached = getJniEnvironment( &jniEnv );
{{#parameters}}
{{#if type.isComplex}}
    auto j{{name}} = here::internal::convert_to_jni(jniEnv, n{{name}});
{{/if}}
{{#unless type.isComplex}}
    j{{type.javaName}} j{{name}} = n{{name}};
{{/unless}}
{{/parameters}}
    {{+parameterName}}j{{name}}{{/parameterName}}callJavaMethod( "{{javaMethodName}}", "({{#parameters}}{{type.jniTypeSignature}}{{/parameters}}){{#if returnType}}{{returnType.jniTypeSignature}}{{/if}}{{#unless returnType}}V{{/unless}}", jniEnv {{#if parameters}},{{/if}} {{joinPartial parameters "parameterName" ", "}});
    if( threadAttached ) {
      jVM->DetachCurrentThread( );
    }
}
{{/methods}}

{{#cppNameSpaces}}
}
{{/cppNameSpaces}}