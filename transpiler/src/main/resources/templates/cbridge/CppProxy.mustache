class {{name}}Proxy : public {{selfType.name}}::element_type, public CachedProxyBase<{{name}}Proxy> {
public:
    using function_table_t = {{functionTableName}};

    {{name}}Proxy({{functionTableName}}&& functions)
     : mFunctions(std::move(functions))
    {
    }

    virtual ~{{name}}Proxy() {
        mFunctions.release(mFunctions.swift_pointer);
    }

    {{#functions}}
    {{#if selfParameter}}
    {{returnType}} {{functionName}}({{joinPartial parameters "baseApiParameter" ", "}}) override {
        {{>returnConversion}}
    }
    {{/if}}
    {{/functions}}

private:
    function_table_t mFunctions;
};

{{name}}Ref {{name}}_createProxy({{functionTableName}} functionTable) {
    auto proxy = {{name}}Proxy::get_proxy(std::move(functionTable));
    if (proxy) {
        return { new (std::nothrow) {{selfType}}(std::move(proxy)) };
    } else {
        return { nullptr };
    }
}
{{+baseApiParameter}}{{#switch mappedType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{mappedType}}{{/case}}{{!!
    }}{{#default}}const {{mappedType}}&{{/default}}{{!!
}}{{/switch}} {{name}}{{/baseApiParameter}}
{{+swiftParameter}}{{#switch mappedType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{name}}{{/case}}{{!!
    }}{{#case "BUILTIN_STRING"}}std_string_create({{name}}.c_str()){{/case}}{{!!
    }}{{#case "BUILTIN_BYTEBUFFER"}}{{name}}.data(), {{name}}.size(){{/case}}{{!!
    }}{{#case "CLASS" break=false}}{{/case}}{{!!
    }}{{#case "STRUCT"}}{ new (std::nothrow) {{mappedType}}({{name}}) }{{/case}}{{!!
    }}{{#default}}{{name}}{{/default}}{{!!
}}{{/switch}}{{/swiftParameter}}
{{+returnConversion}}{{#switch returnType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}return {{>swiftDelegateCall}};{{/case}}{{!!
    }}{{#case "BUILTIN_BYTEBUFFER"}}auto _return_value_ptr = get_pointer< std::vector< uint8_t > >({{>swiftDelegateCall}});
        auto _return_value(*_return_value_ptr);
        delete _return_value_ptr;
        return _return_value;
    {{/case}}{{!!
    }}{{#case "BUILTIN_STRING" break=false}}{{/case}}{{!!
    }}{{#case "CLASS" break=false}}{{/case}}{{!!
    }}{{#case "STRUCT"}}auto _return_value_ptr = get_pointer({{>swiftDelegateCall}});
        auto _return_value(*_return_value_ptr);
        delete _return_value_ptr;
        return _return_value;
    {{/case}}{{!!
    }}{{#default}}{{>swiftDelegateCall}};{{/default}}{{!!
}}{{/switch}}
{{/returnConversion}}
{{+swiftDelegateCall}}mFunctions.{{name}}(mFunctions.swift_pointer{{#if parameters}}, {{/if}}{{joinPartial parameters "swiftParameter" ", "}}){{/swiftDelegateCall}}
