internal func getRef(_ ref: {{name}}) -> RefHolder {
    if let instanceReference = ref as? NativeBase {
        return RefHolder(instanceReference.c_handle)
    }

    var functions = {{functionTableName}}()
    functions.swift_pointer = Unmanaged<AnyObject>.passRetained(ref).toOpaque()
    functions.release = {swiftClass_pointer in
        if let swiftClass = swiftClass_pointer {
            Unmanaged<AnyObject>.fromOpaque(swiftClass).release()
        }
    }

{{#set className=name}}
    {{#methods}}
    functions.{{cBaseName}} = {(swiftClass_pointer{{#if parameters}}, {{/if}}{{joinPartial parameters "swiftParameter" ", "}}) in
        let swiftClass = Unmanaged<AnyObject>.fromOpaque(swiftClass_pointer!).takeUnretainedValue() as! {{className}}
        {{#parameters}}{{#switch type.category.toString}}{{#case "BUILTIN_STRING"}}
        defer {
            std_string_release({{name}})
        }
        {{/case}}{{/switch}}{{/parameters}}
        return {{>swiftReturn}}
    }
    {{/methods}}
    let proxy = {{cInstance}}_createProxy(functions)
    return RefHolder(ref: proxy, release: {{cInstance}}_release)
}
{{/set}}
{{+swiftParameter}}{{name}}{{/swiftParameter}}
{{+swiftReturn}}{{#switch returnType.category.toString}}{{!!
    }}{{#case "BUILTIN_STRING"}}({{>delegateCall2}}!).convertToCType(){{/case}}{{!!
    }}{{#case "STRUCT"}}get_pointer(({{>delegateCall2}}!).convertToCType()){{/case}}{{!!
    }}{{#case "CLASS"}}getRef({{>delegateCall2}}!).ref{{/case}}{{!!
    }}{{#default}}{{>delegateCall2}}{{/default}}{{!!
}}{{/switch}}{{/swiftReturn}}
{{+delegateCall2}}swiftClass.{{name}}({{joinPartial parameters "swiftParameter2" ", "}}){{/delegateCall2}}
{{+swiftParameter2}}{{name}}: {{#switch type.category.toString}}{{!!
    }}{{#case "CLASS"}}{{#type.implementingClass}}{{.}}{{/type.implementingClass}}{{^type.implementingClass}}{{type}}{{/type.implementingClass}}(c{{type}}: {{name}})!{{/case}}{{!!
    }}{{#case "STRUCT"}}{{type}}(c{{type}}: {{name}})!{{/case}}{{!!
    }}{{#case "BUILTIN_STRING"}}String(data: Data(bytes: std_string_data_get({{name}}),
                                                count: Int(std_string_size_get({{name}}))), encoding: .utf8)!{{/case}}{{!!
    }}{{#case "ENUM"}}{{type}}(rawValue: {{name}})!{{/case}}{{!!
    }}{{#default}}{{name}}{{/default}}{{!!
}}{{/switch}}{{/swiftParameter2}}
