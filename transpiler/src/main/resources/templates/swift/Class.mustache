{{#isInterface}}{{>ClassWithProtocol}}{{/isInterface}}
{{^isInterface}}{{>ClassWithoutProtocol}}{{/isInterface}}{{!!

}}{{^useParentCInstance}}

extension {{#isInterface}}_{{/isInterface}}{{name}}: NativeBase {
    var c_handle: _baseRef { return c_instance }
}{{/useParentCInstance}}{{!!

}}{{+ClassWithoutProtocol}}

internal func getRef(_ ref: {{name}}?) -> RefHolder {
    return RefHolder(ref?.c_instance ?? 0)
}

{{>swift/Comment}}{{!!
}}public class {{name}}{{#if baseAndProtocols}}: {{join baseAndProtocols delimiter=', '}}{{/if}} {

{{#typedefs}}
{{prefixPartial 'swift/Typedefs' '    '}}
{{/typedefs}}{{!!

}}{{>CommonClassParts}}
}
{{/ClassWithoutProtocol}}{{!!

}}{{+ClassWithProtocol}}
{{>swift/GetReference}}

{{>swift/Comment}}{{!!
}}public protocol {{name}} : {{#if implementsProtocols}}{{join implementsProtocols delimiter=', '}}{{/if}}{{#unless implementsProtocols}}AnyObject{{/unless}} {
{{#typedefs}}{{prefixPartial 'swift/Typedefs' '    '}}
{{/typedefs}}
{{#properties}}
    var {{name}}: {{type}} { get {{^readonly}}set {{/readonly}}}
{{/properties}}
{{#methods}}{{prefixPartial 'swift/MethodSignature' '    '}}
{{/methods}}
}

internal class _{{name}}: {{name}} {

{{>CommonClassParts}}
}
{{/ClassWithProtocol}}{{!!



}}{{+CommonClassParts}}{{!!
}}{{#properties}}
{{prefixPartial 'swift/Property' '    '}}
{{/properties}}{{!!

}}{{prefixPartial 'swift/Constructor' '    '}}{{!!

}}{{#enums}}
{{prefixPartial 'swift/Enum' '    '}}
{{/enums}}{{!!

}}{{#structs}}
{{prefixPartial 'swift/Struct' '    '}}
{{/structs}}{{!!

}}{{#methods}}
{{prefixPartial 'swift/Method' '    '}}
{{/methods}}{{!!
}}{{/CommonClassParts}}
