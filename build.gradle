/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.13.0"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.27.0"
    }
}
plugins {
    id 'nebula.lint' version '15.0.3'
}

allprojects {
    repositories {
        jcenter()
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.name == 'junit-dep') {
                // Prefer more recent versions published under the new 'junit' artifact name instead of under the
                // deprecated 'junit-dep' artifact name.
                details.useTarget group: details.requested.group, name: 'junit', version: details.requested.version
            }
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    compileJava {
        options.encoding = "UTF-8"
    }
    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    javadoc {
        options.tags = [
                "generated:a:Generated",
                "implNote:a:Implementation note",
                "model:a:Model",
                "ordered:a:Ordered" ]
    }

    test {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }

    apply plugin: 'nebula.lint'
    gradleLint {
        alwaysRun = false
        rules = ['all-dependency']
        reportFormat='text'
        // not using 'unused-dependency' rule because we state some transitive dependencies explicitly
        // for dependency locking
        excludedRules = ['unused-dependency']
    }
}
