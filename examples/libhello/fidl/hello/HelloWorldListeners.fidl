/*
 * Copyright (c) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package hello

import hello.CalculatorListener.CalculatorListener from "./CalculatorListener.fidl"

interface Calculator {

    version {
        major 0
        minor 1
    }

    public typedef Calculator is undefined

    <**@description: a 3D position defined by its x, y and z **>
    struct Position {
        Float x
        Float y
        Float z
    }

    <** @description: register listener to calculateInBackground results notifications **>
    method registerListener {
        in {
            CalculatorListener listener
        }
    }

    <** @description: unregister listener to calculateInBackground results notifications **>
    method unregisterListener {
        in {
            CalculatorListener listener
        }
    }

    <**@description: Compute the Euclidian distance between two positions.
    It is guaranteed that listener will be called before method returns**>
    method calculate {
        in {
            Position fromPosition
            Position toPosition
            CalculatorListener listener
        }
    }

    <**@description: start computing the Euclidian distance between two positions and notify the registered
    listeners when it is done **>
    method calculateInBackground {
        in {
            Position fromPosition
            Position toPosition
        }
    }
}

interface CalculatorFactory {

    method createCalculator {
        out {
            Calculator.Calculator calculator
        }
    }
}

