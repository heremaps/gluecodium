/*
 * Copyright (C) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package test

import test.MessagePackage.MessagePackage from "./ListenersReturnValues.fidl"
import test.ListenerWithReturn.MessageStruct from "./ListenersReturnValues.fidl"
import test.ListenerWithReturn.MessageEnum from "./ListenersReturnValues.fidl"
import test.ListenerWithReturn.MessageMap from "./ListenersReturnValues.fidl"

interface ListenerWithAttributes {

    public typedef ListenerWithAttributes is undefined

    attribute String Message
    attribute MessagePackage packedMessage
    attribute MessageStruct structuredMessage
    attribute MessageEnum enumeratedMessage
    attribute String[] arrayedMessage
    attribute MessageMap mappedMessage
    attribute ByteBuffer bufferedMessage
}

interface AttributedMessageDelivery {

    public typedef AttributedMessageDelivery is undefined

    method checkMessageRoundTrip {
        in {
            ListenerWithAttributes.ListenerWithAttributes envelope
        }
        out {
            Boolean result
        }
    }

    method checkPackedMessageRoundTrip {
        in {
            ListenerWithAttributes.ListenerWithAttributes envelope
        }
        out {
            Boolean result
        }
    }

    method checkStructuredMessageRoundTrip {
        in {
            ListenerWithAttributes.ListenerWithAttributes envelope
        }
        out {
            Boolean result
        }
    }

    method checkEnumeratedMessageRoundTrip {
        in {
            ListenerWithAttributes.ListenerWithAttributes envelope
        }
        out {
            Boolean result
        }
    }

    method checkArrayedMessageRoundTrip {
        in {
            ListenerWithAttributes.ListenerWithAttributes envelope
        }
        out {
            Boolean result
        }
    }

    method checkMappedMessageRoundTrip {
        in {
            ListenerWithAttributes.ListenerWithAttributes envelope
        }
        out {
            Boolean result
        }
    }

    method checkBufferedMessageRoundTrip {
        in {
            ListenerWithAttributes.ListenerWithAttributes envelope
        }
        out {
            Boolean result
        }
    }

    method create {
        out {
            AttributedMessageDelivery result
        }
    }
}
