/*
 * Copyright (C) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package test
import test.SimpleInterfaceOne.* from "./Interfaces.fidl"


interface Maps {
    version {
        major 0
        minor 1
    }

    map ErrorCodeToMessageMap { Int32 to String }

    struct SomeStruct {
        String value
    }

    map NumberToStruct { UInt8 to SomeStruct }

    map NestedMap { UInt8 to NumberToStruct }

    struct StructWithMap {
        ErrorCodeToMessageMap errorMapping
    }

    map NumberToArray {UInt8 to ArrayOfStrings}

    array ArrayOfStrings of String

    enumeration SomeEnum {
        FooValue
        BarValue
    }

    map EnumToString { SomeEnum to String }

    map StringToInstance {String to SimpleInterfaceOne}

    <** @description:
    Example static method which takes a map and returns a map of same type & having the same keys
    but values converted to uppercase.
    **>
    method methodWithMap {
        in {
            <** @description: Input map **>
            ErrorCodeToMessageMap input
        }
        out {
            <** @description: Output map **>
            ErrorCodeToMessageMap output
        }
    }

    <** @description:
    Example static method which takes a map to struct returns same type.
    All fields in structs are converted to uppercase.
    **>
    method methodWithMapToStruct {
        in {
            <** @description: Input map **>
            NumberToStruct input
        }
        out {
            <** @description: Output map **>
            NumberToStruct output
        }
    }

    <** @description:
    Example static method which takes a nested map and returns same type.
    All fields in structs are converted to uppercase.
    **>
    method methodWithNestedMap {
        in {
            <** @description: Input map **>
            NestedMap input
        }
        out {
            <** @description: Output map **>
            NestedMap output
        }
    }

    <** @description:
    Example static method which takes a struct with map inside and returns same type.
    All string values in map are converted to uppercase.
    **>
    method methodWithStructWithMap {
        in {
            <** @description: Input map **>
            StructWithMap input
        }
        out {
            <** @description: Output map **>
            StructWithMap output
        }
    }

    <** @description:
    Example static method which takes a map and returns a map of same type & having the same keys
    but values converted to uppercase.
    **>
    method methodWithEnumToStringMap {
        in {
            <** @description: Input map **>
            EnumToString input
        }
        out {
            <** @description: Output map **>
            EnumToString output
        }
    }

    <** @description:
    Example static method which takes a map and returns a map of same type & having the same keys
    but values converted to uppercase.
    **>
    method methodWithMapOfArrays {
        in {
            NumberToArray input
        }
        out {
            NumberToArray output
        }
    }

    <** @description:
    Example static method which takes a map and returns a map of same type & reads values
    stored in each instance, append to it ' <key>' and stores back in map under same key.
    **>
    method methodWithMapOfInstances {
        in {
            StringToInstance input
        }
        out {
            StringToInstance output
        }
    }
}
