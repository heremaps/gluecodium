/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package test

interface Defaults {

    version {
        major 0
        minor 1
    }

    enumeration SomeEnum {
        FooValue
        BarValue
    }

    enumeration ExternalEnum {
        One_Value
        Another_Value
    }

    struct StructWithDefaults {
        Int32 intField
        UInt32 uintField
        Float floatField
        Boolean boolField
        String stringField
        SomeEnum enumField
    }

    struct StructWithExternalDefaults {
        ExternalEnum enumField
    }

    struct ImmutableStructWithDefaults {
        Int32 intField
        UInt32 uintField
        Float floatField
        Boolean boolField
        String stringField
        SomeEnum enumField
    }

    struct StructWithSpecialDefaults {
        Float floatNanField
        Float floatInfinityField
        Float floatNegativeInfinityField
        Double doubleNanField
        Double doubleInfinityField
        Double doubleNegativeInfinityField
    }

    <** @description: Get a default-initialized StructWithDefaults object. **>
    method getDefault {
        out {
            StructWithDefaults output
        }
    }

    <** @description: Check if a StructWithDefaults object is a default-initialized one. **>
    method checkDefault {
        in {
            StructWithDefaults input
        }
        out {
            Boolean output
        }
    }

    <** @description: Get a default-initialized ImmutableStructWithDefaults object. **>
    method getImmutableDefault {
        out {
            ImmutableStructWithDefaults output
        }
    }

    method isNan:float {
        in {
            Float value
        }
        out {
            Boolean result
        }
    }

    method isNan:double {
        in {
            Double value
        }
        out {
            Boolean result
        }
    }

    method isInfinity:float {
        in {
            Float value
        }
        out {
            Boolean result
        }
    }

    method isInfinity:double {
        in {
            Double value
        }
        out {
            Boolean result
        }
    }

    method createSpecial {
        out {
            StructWithSpecialDefaults result
        }
    }
}
