/*
 * Copyright (C) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package test

interface Enums {
    version {
        major 0
        minor 1
    }

    enumeration InternalError {
        ERROR_NONE
        ERROR_FATAL = 999
    }

    struct ErrorStruct {
        InternalError type
        String message
    }

    <** @description:
    Example static method which takes any InternalError and returns the opposite one
    (e.g. if ERROR_NONE is given, ERROR_FATAL is returned)
    **>
    method flipEnumValue {
        in {
            <** @description: Input enum **>
            InternalError input
        }
        out {
            <** @description: Output enum **>
            InternalError output
        }
    }

    <** @description:
    Example static method which takes struct with enum and returns just enum with reversed value
    (e.g. if ERROR_NONE is given, ERROR_FATAL is returned)
    **>
    method extractEnumFromStruct {
        in {
            <** @description: Input struct with **>
            ErrorStruct input
        }
        out {
            <** @description: Output enum **>
            InternalError output
        }
    }

    <** @description:
    Example static method which takes enum and String and returns struct made of them. Value of enum is inverted.
    (e.g. if ERROR_NONE is given, ERROR_FATAL is returned)
    **>
    method createStructWithEnumInside {
        in {
            <** @description: input error **>
            InternalError type
            <** @description: input message **>
            String message
        }
        out {
            <** @description: Output struct with enum and string **>
            ErrorStruct output
        }
    }
}
