/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package test

interface NullableInterface {

    typedef NullableInterface is undefined

    struct SomeStruct {
        String stringField
    }

    enumeration SomeEnum {
        OFF
        ON
    }

    array SomeArray of String

    map SomeMap { Int64 to String }

    struct NullableStruct {
        String stringField
        Boolean boolField
        Double doubleField
        SomeStruct structField
        SomeEnum enumField
        SomeArray arrayField
        String[] inlineArrayField
        SomeMap mapField
    }

    struct NullableIntsStruct {
        Int8 int8Field
        Int16 int16Field
        Int32 int32Field
        Int64 int64Field
// TODO: needs more conversion functions in JNI, should be fixed in APIGEN-1538
//        UInt8 uint8Field
//        UInt16 uint16Field
//        UInt32 uint32Field
//        UInt64 uint64Field
    }

    method create {
        out {
            NullableInterface result
        }
    }

    method methodWithNullableStruct {
        in {
            NullableStruct input
        }
        out {
            NullableStruct output
        }
    }

    method methodWithNullableIntsStruct {
        in {
            NullableIntsStruct input
        }
        out {
            NullableIntsStruct output
        }
    }

    method methodWithString {
        in {
            String input
        }
        out {
            String output
        }
    }

    method methodWithBoolean {
        in {
            Boolean input
        }
        out {
            Boolean output
        }
    }

    method methodWithDouble {
        in {
            Double input
        }
        out {
            Double output
        }
    }

    method methodWithInt {
        in {
            Int64 input
        }
        out {
            Int64 output
        }
    }

    method methodWithSomeStruct {
        in {
            SomeStruct input
        }
        out {
            SomeStruct output
        }
    }

    method methodWithSomeEnum {
        in {
            SomeEnum input
        }
        out {
            SomeEnum output
        }
    }

    method methodWithSomeArray {
        in {
            SomeArray input
        }
        out {
            SomeArray output
        }
    }

    method methodWithInlineArray {
        in {
            String[] input
        }
        out {
            String[] output
        }
    }

    method methodWithSomeMap {
        in {
            SomeMap input
        }
        out {
            SomeMap output
        }
    }

    method nullableListenerMethodRoundTrip {
        in {
            NullableListener.NullableListener listener
            Double input
        }
        out {
            Double output
        }
    }

    method nullableListenerAttributeRoundTrip {
        in {
            NullableListener.NullableListener listener
            String[] input
        }
        out {
            String[] output
        }
    }

    attribute String stringAttribute
    attribute Boolean boolAttribute
    attribute Double doubleAttribute
    attribute Int64 intAttribute
    attribute SomeStruct structAttribute
    attribute SomeEnum enumAttribute
    attribute SomeArray arrayAttribute
    attribute String[] inlineArrayAttribute
    attribute SomeMap mapAttribute
}

interface NullableListener {

    public typedef NullableListener is undefined

    method methodWithDouble {
        in {
            Double input
        }
        out {
            Double output
        }
    }

    attribute String[] arrayAttribute
}
