/*
 * Copyright (C) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package test

import another.* from "./Errors2.fidl"

interface Errors {

    enumeration InternalErrors {
        NONE
        CRASHED
    }

    <** @description:
    Example static method with an error enum that raises "CRASHED" error if errorFlag is true
    **>
    method methodWithError {
        in {
            Boolean errorFlag
        }
        error InternalErrors
    }

    <** @description:
    Example static method with an error enum which returns a String "SUCCEEDED" or raises "FAILED" error if
    errorFlag is true
    **>
    method methodWithErrorAndString {
        in {
            Boolean errorFlag
        }
        out {
            <** @description: Output string **>
            String outputString
        }
        error another.AdditionalErrors.ExternalErrors
    }

    <** @description:
    Example static method with an error enum which returns an array with bytes [x00, x01, x02]
    or raises "EXPLODED" error if errorFlag is true
    **>
    method methodThatExplodes {
        in {
            Boolean errorFlag
        }
        out {
            <** @description: Output buffer **>
            ByteBuffer output
        }
        error another.TypeCollectionWithEnums.ExplosiveErrors
    }

    <** @description:
    Example static method with an error enum which returns enum ANOTHER_RESULT
    or raises "BAD" error if errorFlag is true
    **>
    method methodWithGoodAndBad {
      in {
          Boolean errorFlag
      }
      out {
          another.TypeCollectionWithEnums.SomeEnum output
      }
      error another.TypeCollectionWithEnums.YetAnotherErrors
    }
}
