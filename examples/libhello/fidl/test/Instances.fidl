/*
 * Copyright (c) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package test

<** @description:
    Example interface which demonstrates the usage of instances for HelloWorld use case
**>
interface SimpleInstantiableOne {

    public typedef SimpleInstantiableOne is undefined

    method setStringValue {
        in {
            String stringValue
        }
    }

    method getStringValue {
        out {
           String stringValue
        }
    }
}

interface SimpleInstantiableTwo {

    public typedef SimpleInstantiableTwo is undefined

    method setStringValue {
        in {
            String stringValue
        }
    }

    method getStringValue {
        out {
           String stringValue
        }
    }
}

interface NestedInstantiableOne {

    public typedef NestedInstantiableOne is undefined

    method setSameTypeInstances {
        in {
            SimpleInstantiableOne.SimpleInstantiableOne instanceOne
            SimpleInstantiableOne.SimpleInstantiableOne instanceTwo
        }
    }

    method getInstanceOne {
        out {
            SimpleInstantiableOne.SimpleInstantiableOne instanceOne
        }
    }

    method getInstanceTwo {
        out {
            SimpleInstantiableOne.SimpleInstantiableOne instanceTwo
        }
    }
}

interface NestedInstantiableTwo {

    public typedef NestedInstantiableTwo is undefined

    method setMultipleTypeInstances {
        in {
            SimpleInstantiableOne.SimpleInstantiableOne instanceOne
            SimpleInstantiableTwo.SimpleInstantiableTwo instanceTwo
            NestedInstantiableOne.NestedInstantiableOne nestedInstantiable
        }
    }

    method getInstantiableOne {
        out {
            SimpleInstantiableOne.SimpleInstantiableOne instance
        }
    }

    method getInstantiableTwo {
        out {
            SimpleInstantiableTwo.SimpleInstantiableTwo instance
        }
    }

    method getNestedInstantiable {
        out {
            NestedInstantiableOne.NestedInstantiableOne instance
        }
    }

    method setSelfInstantiable {
        in {
            NestedInstantiableTwo selfInstance
        }
    }

    method getSelfInstantiable {
        out {
            NestedInstantiableTwo selfInstance
        }
    }
}
