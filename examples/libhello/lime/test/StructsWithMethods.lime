# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

types ValidationUtils {
    enum ValidationErrorCode {
        NONE,
        VALIDATION_FAILED
    }
    exception Validation(ValidationErrorCode)
}

types StructsWithMethods {
    @Equatable
    struct Vector {
        x: Double
        y: Double
        fun distanceTo(
            other: Vector
        ): Double
        fun add(
            other: Vector
        ): Vector
        static fun validate(
            x: Double,
    
            y: Double
        ): Boolean
        constructor create(
            x: Double,
    
            y: Double
        )
        @Dart("createCopy")
        constructor create(
            other: Vector
        ) throws ValidationUtils.Validation
    }
}

class StructsWithMethodsInterface {
    @Equatable
    struct Vector3 {
        x: Double
        y: Double
        z: Double
        fun distanceTo(
            other: Vector3
        ): Double
        fun add(
            other: Vector3
        ): Vector3
        static fun validate(
            x: Double,

            y: Double,

            z: Double
        ): Boolean
        constructor create(
            x: Double,
            y: Double,
            z: Double
        )
        @Dart("createCopy")
        constructor create(
            other: Vector3
        ) throws ValidationUtils.Validation
    }

    struct StructWithStaticMethodsOnly {
        static fun doStuff()
    }
}

@Cpp(
    ExternalType = "include/ExternalTypes.h",
    ExternalName = "external::ClassWithOverloads::StructWithOverloads"
)
struct StructWithOverloads {
    fun overloadedMethod(): String
    @Dart("overloadedMethodString")
    fun overloadedMethod(input: String): String

    @Cpp(ExternalGetter = "overloadedAccessors", ExternalSetter = "overloadedAccessors")
    overloadedAccessors: Int
}
