# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

class Lambdas {
    lambda Concatenator = (@Java("first") String, @Java("second") String) -> String
    lambda Tricatenator = (String, String, String) -> String
    @Java(Name = "NullableConfounder", FunctionName = "confuse")
    @Swift("NullableConvoluter")
    lambda NullableConfuser = (String?) -> StandaloneProducer?

    struct LambdaHolder {
        concatenator: Concatenator
    }

    static fun getConcatenator(delimiter: String): Concatenator
    static fun concatenate(string1: String, string2: String, concatenator: Concatenator): String
    static fun composeConcatenators(concatenator1: Concatenator, concatenator2: Concatenator): Tricatenator
    // Strings list should be at least one element longer than concatenators list.
    static fun concatenateList(strings: List<String>, concatenators: List<Concatenator>): String

    static fun getConcatenatorInStruct(delimiter: String): LambdaHolder
    static fun concatenateInStruct(string1: String, string2: String, concatenator: LambdaHolder): String

    static fun getConcatenatorOrNull(delimiter: String?): Concatenator?
    static fun concatenateOrNot(string1: String, string2: String, concatenator: Concatenator?): String?

    static property realConcatenator: Concatenator

    static fun getNullableConfuser(): NullableConfuser
    static fun applyNullableConfuser(confuser: NullableConfuser, value: String?): StandaloneProducer?
}

lambda StandaloneProducer = () -> String

class LambdasDeclarationOrder {
    lambda SomeCallback = (SomeStruct) -> Void

    struct SomeStruct {
        someField: String
    }
}

interface LambdasInterface {
    lambda TakeScreenshotCallback = (Blob?) -> Void

    fun take_screenshot(callback: TakeScreenshotCallback)
}

class LambdasWithStructuredTypes {
    lambda ClassCallback = (LambdasInterface) -> Void
    lambda StructCallback = (Lambdas.LambdaHolder) -> Void

    fun do_class_stuff(callback : ClassCallback)
    fun do_struct_stuff(callback : StructCallback)
}
