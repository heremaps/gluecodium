# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

// Example interface which demonstrates the usage of instances for HelloWorld use case
class SimpleInstantiableOne {
    constructor create(value: String)
    fun setStringValue(
        stringValue: String
    )
    fun getStringValue(): String
}

class SimpleInstantiableTwo {
    constructor create(value: String)
    fun setStringValue(
        stringValue: String
    )
    fun getStringValue(): String
}

class NestedInstantiableOne {
    constructor create()
    fun setSameTypeInstances(
        instanceOne: SimpleInstantiableOne,
        instanceTwo: SimpleInstantiableOne
    )
    fun getInstanceOne(): SimpleInstantiableOne
    fun getInstanceTwo(): SimpleInstantiableOne
}

class NestedInstantiableTwo {
    constructor proliferate(
        value1: SimpleInstantiableOne,
        value2: SimpleInstantiableTwo,
        value3: NestedInstantiableOne
    )
    fun setMultipleTypeInstances(
        instanceOne: SimpleInstantiableOne,
        instanceTwo: SimpleInstantiableTwo,
        nestedInstantiable: NestedInstantiableOne
    )
    fun getInstantiableOne(): SimpleInstantiableOne
    fun getInstantiableTwo(): SimpleInstantiableTwo
    fun getNestedInstantiable(): NestedInstantiableOne
    fun setSelfInstantiable(
        selfInstance: NestedInstantiableTwo
    )
    fun getSelfInstantiable(): NestedInstantiableTwo
}

class InstancesFactory {
    // Creates an instance of SimpleInstantiableOne interface
    static fun createSimpleInstantiableOne(): /* Reference to created instance */ SimpleInstantiableOne
    // Creates an instance of SimpleInstantiableTwo interface
    static fun createSimpleInstantiableTwo(): /* Reference to created instance */ SimpleInstantiableTwo
    // Creates an instance of NestedInstantiableOne interface
    static fun createNestedInstantiableOne(): /* Reference to created instance */ NestedInstantiableOne
    // Creates an instance of NestedInstantiableTwo interface
    static fun createNestedInstantiableTwo(): /* Reference to created instance */ NestedInstantiableTwo
}
