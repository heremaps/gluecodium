# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

class Defaults {
    @Equatable
    struct StructWithDefaults {
        intField: Int = 42
        uintField: UInt = 4294967295
        floatField: Float = 3.14
        boolField: Boolean = true
        stringField: String = "some string"
        enumField: SomeEnum = SomeEnum.BarValue
    }
    struct StructWithExternalDefaults {
        enumField: ExternalEnum = ExternalEnum.Another_Value
    }
    @Immutable
    struct ImmutableStructWithDefaults {
        intField: Int = 42
        uintField: UInt
        floatField: Float = 3.14
        boolField: Boolean
        stringField: String = "some string"
        enumField: SomeEnum = SomeEnum.BarValue
    }
    struct StructWithSpecialDefaults {
        floatNanField: Float = NaN
        floatInfinityField: Float = Infinity
        floatNegativeInfinityField: Float = -Infinity
        doubleNanField: Double = NaN
        doubleInfinityField: Double = Infinity
        doubleNegativeInfinityField: Double = -Infinity
    }
    struct StructWithEmptyDefaults {
        intsField: List<Int> = {}
        floatsField: FloatArray = {}
        mapField: IdToStringMap = {}
        structField: StructWithDefaults = {}
        setTypeField: StringSet = {}
    }
    struct StructWithTypedefDefaults {
        intField: IntTypedef = 42
        boolField: BooleanTypedef = true
        stringField: StringTypedef = "\\Jonny \"Magic\" Smith\n"
        enumField: EnumTypedef = SomeEnum.BarValue
    }
    struct StructWithInitializerDefaults {
        intsField: List<Int> = [4, -2, 42]
        floatsField: Defaults.FloatArray = [3.14, -Infinity]
        structField: Defaults.StructWithExternalDefaults = {enumField = Defaults.ExternalEnum.One_Value}
        setTypeField: Defaults.StringSet = ["foo", "bar"]
        mapField: Defaults.IdToStringMap = [1: "foo", 42: "bar"]
    }
    enum SomeEnum {
        FooValue,
        BarValue
    }
    @Cpp(
        ExternalType = "include/ExternalTypes.h",
        ExternalName = "::external::even_more_external::VeryAlienEnum"
    )
    enum ExternalEnum {
        One_Value,
        Another_Value
    }
    typealias IntTypedef = Int
    typealias BooleanTypedef = Boolean
    typealias StringTypedef = String
    typealias EnumTypedef = SomeEnum
    typealias FloatArray = List<Float>
    typealias IdToStringMap = Map<UInt, String>
    typealias StringSet = Set<String>
    // Get a default-initialized StructWithDefaults object.
    static fun getDefault(): StructWithDefaults
    // Check if a StructWithDefaults object is a default-initialized one.
    static fun checkDefault(
        input: StructWithDefaults
    ): Boolean
    // Get a default-initialized ImmutableStructWithDefaults object.
    static fun getImmutableDefault(): ImmutableStructWithDefaults
    @Dart("floatIsNan")
    static fun isNan(
        value: Float
    ): Boolean
    @Dart("doubleIsNan")
    static fun isNan(
        value: Double
    ): Boolean
    @Dart("floatIsInfinity")
    static fun isInfinity(
        value: Float
    ): Boolean
    @Dart("doubleIsInfinity")
    static fun isInfinity(
        value: Double
    ): Boolean
    static fun createSpecial(): StructWithSpecialDefaults
    static fun getEmptyDefaults(): StructWithEmptyDefaults
    static fun getInitializerDefaults(): StructWithInitializerDefaults
}
