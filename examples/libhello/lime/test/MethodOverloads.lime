# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

class MethodOverloads {
    struct Point {
        x: Double = 0.0
        y: Double = 0.0
    }
    typealias StringArray = List<String>
    typealias IntArray = List<Byte>
    typealias StringSet = Set<String>
    typealias IntSet = Set<Byte>
    static fun isBoolean(
        input: Boolean
    ): Boolean
    @Dart("isBooleanByte")
    static fun isBoolean(
        input: Byte
    ): Boolean
    @Dart("isBooleanString")
    static fun isBoolean(
        input: String
    ): Boolean
    @Dart("isBooleanPoint")
    static fun isBoolean(
        input: Point
    ): Boolean
    @Dart("isBooleanMulti")
    static fun isBoolean(
        input1: Boolean,
        input2: Byte,
        input3: String,
        input4: Point
    ): Boolean
    @Dart("isBooleanStringList")
    @Java("isBooleanStringArrayOverload")
    static fun isBoolean(
        input: StringArray
    ): Boolean
    @Dart("isBooleanIntList")
    @Java("isBooleanIntArrayOverload")
    static fun isBoolean(
        input: IntArray
    ): Boolean
    @Dart("isBooleanStringSet")
    @Java("isBooleanStringSetOverload")
    static fun isBoolean(
        input: StringSet
    ): Boolean
    @Dart("isBooleanIntSet")
    @Java("isBooleanIntSetOverload")
    static fun isBoolean(
        input: IntSet
    ): Boolean
}

interface SpecialNames {
    fun create()
    @Dart("reallyRelease")
    fun release()
    fun createProxy()
}

open class ConstructorOverloads {
    constructor create()
    @Dart("createFromString")
    constructor create(
        input: String
    )
    @Dart("createFromBoolean")
    constructor create(
        input: Boolean
    )
    @Dart("createFromMulti")
    constructor create(
        stringInput: String,
        booleanInput: Boolean
    )
    @Dart("createFromList")
    constructor create(
        input: List<Double>
    )
}
