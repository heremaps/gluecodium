# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package external

types ExternalTypes {
    @Cpp(ExternalType = "include/ExternalTypes.h")
    struct ExternalStruct {
        string_field: String
        @Cpp(ExternalGetter = "get_some_string", ExternalSetter = "set_some_string")
        externalStringField: String
        @Cpp(ExternalGetter = "getSomeArray", ExternalSetter = "setSomeArray")
        externalArrayField: List<Int>
        @Cpp(ExternalGetter = "aStruct", ExternalSetter = "_set_aStruct")
        externalStructField: AnotherExternalStruct
    }
    @Cpp(
        ExternalType = "include/ExternalTypes.h",
        ExternalName = "::external::even_more_external::AlienStructure"
    )
    struct AnotherExternalStruct {
        int_field: Int
    }
    @Cpp(ExternalType = "include/ExternalTypes.h")
    struct Yet_Another_External_Struct {
        string_Field: String
    }
    @Cpp(
        ExternalType = ["string", "utility"],
        ExternalName = "::std::pair< ::std::string, ::std::string >"
    )
    struct ExternalStringPair {
        first: String
        second: String
    }
    @Cpp(
        ExternalType = "include/ExternalTypes.h",
        ExternalName = "::external::even_more_external::AlienEnum"
    )
    enum ExternalEnum {
        Foo,
        Bar
    }
    @Cpp(ExternalType = "include/ExternalTypes.h")
    enum Very_External_Enum {
        FOO,
        BAR
    }
}

types ExternalTypesWithoutTypeTraits {
    @Cpp(
        ExternalType = "include/ExternalTypesWithoutTypeTraits.h",
        ExternalName = "::external::IntStruct"
    )
    struct IntStruct {
        int_field: Int
    }
}

@Cpp(ExternalType = "include/ExternalTypes.h")
class ClassWithOverloads {
    struct StructWithOverloads {
        fun overloadedMethod(): String
        fun overloadedMethod(input: String): String

        @Cpp(ExternalGetter = "overloadedAccessors", ExternalSetter = "overloadedAccessors")
        overloadedAccessors: Int
    }
    fun oneOverloadNotExposed(): String
    fun allOverloadsExposed(input: String): String
    fun allOverloadsExposed(inputList: List<String>): String
}

@Cpp(
    ExternalType = "external/StandaloneExternalType.h",
    ExternalName = "::external::StandaloneExternalType"
)
class StandaloneExternalType {
    fun foo()
}

@Cpp(ExternalType = "include/ExternalTypes.h")
class external_Interface {
    struct some_Struct {
        some_Field: String
    }
    enum some_Enum {
        some_Value
    }
    fun some_Method(
        some_Parameter: Byte
    )
    property some_Attribute: String {
        @Cpp(ExternalName = "get_Me")
        get
    }
}

@Cpp(ExternalType = "include/ExternalTypes.h", ExternalName = "::external::fOo_iTnerface")
class VeryExternalInterface {
    struct some_Struct {
        some_Field: String
    }
    enum some_Enum {
        some_Value
    }
    fun some_Method(
        some_Parameter: Byte
    )
    property some_Attribute: String {
        @Cpp(ExternalName = "get_Me")
        get
        @Cpp(ExternalName = "set_Me")
        set
    }
}
