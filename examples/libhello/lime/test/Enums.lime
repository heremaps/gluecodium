# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

class Enums {
    struct ErrorStruct {
        type: InternalError = InternalError.ERROR_NONE
        message: String = ""
    }
    enum InternalError {
        ERROR_NONE,
        ERROR_FATAL = 999
    }
    // Example static method which takes any InternalError and returns the opposite one
    // (e.g. if ERROR_NONE is given, ERROR_FATAL is returned)
    static fun flipEnumValue(
        // Input enum
        input: InternalError
    ): /* Output enum */ InternalError
    // Example static method which takes struct with enum and returns just enum with reversed value
    // (e.g. if ERROR_NONE is given, ERROR_FATAL is returned)
    static fun extractEnumFromStruct(
        // Input struct with
        input: ErrorStruct
    ): /* Output enum */ InternalError
    // Example static method which takes enum and String and returns struct made of them. Value of enum is inverted.
    // (e.g. if ERROR_NONE is given, ERROR_FATAL is returned)
    static fun createStructWithEnumInside(
        // input error
        type: InternalError,
    
        // input message
        message: String
    ): /* Output struct with enum and string */ ErrorStruct
    static fun flipEnumStartsWithOne(input: EnumStartsWithOne): EnumStartsWithOne
}

enum EnumStartsWithOne {
    FIRST = 1,
    SECOND
}

@Java(Skip) @Dart(Skip)
enum EnumWithDeprecatedItems {
    foo,
    @Deprecated("Hi there!")
    bar,
    baz
}
