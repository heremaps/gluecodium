#!/bin/bash
#
# Copyright (C) 2016-2018 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE


# Script to build the "hello" library for an Android consumer. This is
# demonstrated by the platforms/android/app application which is build externally.

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "${SCRIPT_DIR}/inc.functions"

USAGE=$(cat <<EOF
$0 [options]
    --publish                 Build and publish Gluecodium locally and use it for code generation
    --buildGluecodium         Build and use local Gluecodium version
    --gluecodiumPath [PATH]   Implies --buildGluecodium, path to local gluecodium (default: ${GLUECODIUM_PATH})
    --debug                   Build with debug symbols
    --docs                    Generate Javadoc of SDK
    --jemalloc                Run tests with jemalloc
    --hostOnly                Only build host architecture
    --help                    Print this message
EOF
)

CMAKE_BUILD_TYPE=
BUILD_LOCAL_GLUECODIUM=false
GENERATE_DOCS=false
HOST_ONLY=false
while [[ $# -gt 0 ]]; do
    case "$1" in
        --publish)
            publish_local
            shift
            ;;
        --buildGluecodium)
            BUILD_LOCAL_GLUECODIUM=true
            shift
            ;;
        --gluecodiumPath)
            BUILD_LOCAL_GLUECODIUM=true
            GLUECODIUM_PATH="$2"
            shift 2
            ;;
        --jemalloc)
            USE_JEMALLOC=true
            shift
            ;;
        --debug)
            CMAKE_BUILD_TYPE="-DCMAKE_BUILD_TYPE=RelWithDebInfo"
            shift
            ;;
        --docs)
            GENERATE_DOCS=true
            shift
            ;;
        --hostOnly)
            HOST_ONLY=true
            shift
            ;;
        --help|*)
            echo "$USAGE"
            exit 0
            ;;
    esac
done

if [[ "$BUILD_LOCAL_GLUECODIUM" = "true" ]]; then
    export GLUECODIUM_PATH
fi

# Sanity checks
[ $ANDROID_HOME ] || die "ANDROID_HOME environment variable is mandatory"
[ $NDK_ROOT ] || die "NDK_ROOT environment variable is mandatory (NDK can be installed from within Android Studio"

if [ "$USE_JEMALLOC" = true ]; then
    command -v jemalloc-config >/dev/null || die "jemalloc is required for this option"
    JEMALLOC_LIB=$(jemalloc-config --libdir)/libjemalloc.so.$(jemalloc-config --revision)
    CMAKE_BUILD_TYPE="-DCMAKE_BUILD_TYPE=RelWithDebInfo"
fi

# Constants
GLUECODIUM_VERSION="${GLUECODIUM_VERSION:-+}"
HOST_ARCH=host-$(uname -m)
CMAKE_DEFAULT_PARAMETERS=$(cat <<EOF
-DANDROID_NATIVE_API_LEVEL=28 \
-DBUILD_SHARED_LIBS=ON \
-DCMAKE_SYSTEM_VERSION=21 \
-DCMAKE_VERBOSE_MAKEFILE=ON \
-DHELLO_APIGEN_GLUECODIUM_GENERATOR=android \
-DHELLO_APIGEN_GLUECODIUM_VERSION=${GLUECODIUM_VERSION} \
-G Ninja
EOF
)
CMAKE_CROSS_BUILD_PARAMETERS=$(cat <<EOF
-DANDROID_NDK=${NDK_ROOT} \
-DANDROID_TOOLCHAIN=clang \
-DCMAKE_TOOLCHAIN_FILE=${NDK_ROOT}/build/cmake/android.toolchain.cmake
EOF
)

# The CMake toolchain shipped with the NDK doesn't work with CMake-3.72
# or 3.9.1. To ensure compatibility, use the shipped cmake binary. See
# https://github.com/android-ndk/ndk/issues/254 or
# https://gitlab.kitware.com/cmake/cmake/issues/16708
if [ -d "$ANDROID_HOME/cmake" ]; then
    NDK_CMAKE_BINARY=$(find $ANDROID_HOME/cmake -perm -u+x -type f  -name cmake | head -n1)
fi
if [ -z "$NDK_CMAKE_BINARY" ]; then
    NDK_CMAKE_BINARY=cmake
fi

BUILD_DIR_PREFIX="${PWD}/build-android-"
ANDROID_DIR="${PWD}/platforms/android"
DIST_ANDROID_DIR="${PWD}/dist/android"
DOCS_DIR="${DIST_ANDROID_DIR}/docs"
INSTALL_AAR_DIR="${ANDROID_DIR}/app/libs/"
TMP_DIR=$(mktemp -d)

# Do cross-compilation build for generating a proper Android Archive

if $HOST_ONLY; then
    ARCHITECTURES=${HOST_ARCH}
else
    ARCHITECTURES="x86 armeabi-v7a ${HOST_ARCH}"
fi

for arch in ${ARCHITECTURES} ; do
    build_dir="${BUILD_DIR_PREFIX}${arch}"
    install_dir="${DIST_ANDROID_DIR}/${arch}"

    [ -d ${build_dir} ] || mkdir -p ${build_dir}
    [ -d ${install_dir} ] || mkdir -p ${install_dir}

    pushd ${build_dir}

    CMAKE_EXTRA_PARAMETERS=
    # Do host-native build for testing on the JVM with Robolectric using the
    # CMake binary supplied (and supported) by the NDK
    if [ "${arch}" != "host-$(uname -m)" ] ; then
        CMAKE_EXTRA_PARAMETERS="${CMAKE_EXTRA_PARAMETERS} ${CMAKE_CROSS_BUILD_PARAMETERS} \
        -DANDROID_ABI=${arch}"
        CMAKE_BINARY=${NDK_CMAKE_BINARY}
    else
        CMAKE_BINARY=cmake
    fi

    set -o pipefail

    safe ${CMAKE_BINARY} \
        ${CMAKE_DEFAULT_PARAMETERS} \
        ${CMAKE_EXTRA_PARAMETERS} \
        ${CMAKE_BUILD_TYPE} \
        -DCMAKE_INSTALL_PREFIX=${install_dir} \
        .. | tee "cmake_output.log"

    popd

    safe ${CMAKE_BINARY} \
        --build ${build_dir} \
        --target install
done

# At the moment we build one AAR per target architecture as it is not straightforward
# to do a multi-arch build in one CMake build invocation. However, for simplicity we
# want to include all architectures into one Android Archive. Hence do it in bash:
find ${DIST_ANDROID_DIR} -name *.aar -exec unzip -n {} -d ${TMP_DIR} \;
jar cvf ${DIST_ANDROID_DIR}/hello.aar -C ${TMP_DIR} .
cp ${DIST_ANDROID_DIR}/hello.aar ${INSTALL_AAR_DIR}

# Copy the host-build shared object into the application folder as well so that it
# can be used for testing
rm -rf ${TMP_DIR}
find ${DIST_ANDROID_DIR}/${HOST_ARCH} -name *.aar -exec unzip -n {} -d ${TMP_DIR} \;
mkdir -p ${INSTALL_AAR_DIR}/${HOST_ARCH}
cp ${TMP_DIR}/jni/* ${INSTALL_AAR_DIR}/${HOST_ARCH}

if [ "$GENERATE_DOCS" = true ]; then
    mkdir -p "${DOCS_DIR}"
    pushd "${DOCS_DIR}"
    safe javadoc com.here.android $(find ${BUILD_DIR_PREFIX}${HOST_ARCH}/ -name *.java)
    popd
fi

# Finally build the example app itself and run tests
pushd ${ANDROID_DIR}
LD_PRELOAD=$JEMALLOC_LIB safe ./gradlew build

if [ "$USE_JEMALLOC" = true ]; then
    REPORTS_DIR=app/build/reports/
    mkdir -p $REPORTS_DIR
    jeprof --show_bytes ../../build-android-$HOST_ARCH/libhello/libhello.so app/jeprof.*.heap --text --lines >$REPORTS_DIR/android_tests_jeprof
fi
popd
