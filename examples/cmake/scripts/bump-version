#!/bin/bash
#
# Script to create a new version commit
#
# Semantic Versioning: MAJOR.MINOR.PATCH

SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. "${SCRIPT_DIR}/inc.functions"

# Compare given old and new versions
#
# Usage: is_newer_than $old_version $new_version
#
# Return 0 if new_version is newer than old_version, 1 otherwise
function is_newer_than() {
    local old="$1"
    local new="$2"
    local newer=$(echo -e "$old\n$new" | sort --version-sort | tail -n1)

    if [ "$new" = "$newer" -a "$old" != "$newer" ]; then
        return 0
    fi
    return 1
}

# Fetches release notes for current release and updates the release date
#
# Usage: release_notes CHANGELOG_FILE RELEASE
#
function release_notes {
    start_line=$(grep -n "$2" "$1" | cut -d":" -f1)
    if ! is_number ${start_line} ; then
        return -1
    fi

    # Add release date
    sed2 "${start_line}s/\(.*\)/\1 - $(date -u +%Y-%m-%d)/" $1

    {
        IFS=''
        # Skip some lines
        for ((i=$start_line;i--;)); do read ; done
        # Read until first blank line
        while read line ; do
            if [ -z "$line" ]; then break; fi
            echo $line
        done
    } < "$1"
}

VERSION_FILE=README.md
OLD_VERSION=$(grep Version ${VERSION_FILE} | cut -d" " -f2)

if [ $# -ne 1 ] ; then
    die "Usage: $0 MAJOR.MINOR.PATCH\n\n\tExample: $0 0.0.1\n\nCurrent version is ${OLD_VERSION}"
fi

# Increase SDK version (used as versionName in most modules)
NEW_VERSION=$1

if ! is_newer_than "$OLD_VERSION" "$NEW_VERSION"; then
    die "Error: We are already at version $OLD_VERSION"
fi

# Collect release notes
CHANGELOG_FILE=CHANGELOG.md
RELEASE_NOTES=$(safe release_notes ${CHANGELOG_FILE} $NEW_VERSION)

sed -i -e "s|Version: $OLD_VERSION|Version: $NEW_VERSION|" "${VERSION_FILE}"

COMMIT_MESSAGE=$(cat <<EOF
Release version $NEW_VERSION

$RELEASE_NOTES
EOF
)

# Create a commit with appropriate git tag
git commit \
    "${VERSION_FILE}" \
    "${CHANGELOG_FILE}" \
    -m "${COMMIT_MESSAGE}"
git tag $NEW_VERSION
