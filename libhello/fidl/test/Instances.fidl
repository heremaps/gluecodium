/*
 * Copyright (C) 2017 HERE Global B.V. and its affiliate(s). All rights reserved.
 *
 * This software, including documentation, is protected by copyright controlled by
 * HERE Global B.V. All rights are reserved. Copying, including reproducing, storing,
 * adapting or translating, any or all of this material requires the prior written
 * consent of HERE Global B.V. This material also contains confidential information,
 * which may not be disclosed to others without prior written consent of HERE Global B.V.
 *
 */

package test

<** @description:
    Example interface which demonstrates the usage of instances for HelloWorld use case
**>
interface SimpleInstantiableOne {

    public typedef SimpleInstantiableOne is undefined

    method setStringValue {
        in {
            String stringValue
        }
    }

    method getStringValue {
        out {
           String stringValue
        }
    }
}

interface SimpleInstantiableTwo {

    public typedef SimpleInstantiableTwo is undefined

    method setStringValue {
        in {
            String stringValue
        }
    }

    method getStringValue {
        out {
           String stringValue
        }
    }
}

interface NestedInstantiableOne {

    public typedef NestedInstantiableOne is undefined

    method setSameTypeInstances {
        in {
            SimpleInstantiableOne.SimpleInstantiableOne instanceOne
            SimpleInstantiableOne.SimpleInstantiableOne instanceTwo
        }
    }

    method getInstanceOne {
        out {
            SimpleInstantiableOne.SimpleInstantiableOne instanceOne
        }
    }

    method getInstanceTwo {
        out {
            SimpleInstantiableOne.SimpleInstantiableOne instanceTwo
        }
    }
}

interface NestedInstantiableTwo {

    public typedef NestedInstantiableTwo is undefined

    method setMultipleTypeInstances {
        in {
            SimpleInstantiableOne.SimpleInstantiableOne instanceOne
            SimpleInstantiableTwo.SimpleInstantiableTwo instanceTwo
            NestedInstantiableOne.NestedInstantiableOne nestedInstantiable
        }
    }

    method getInstantiableOne {
        out {
            SimpleInstantiableOne.SimpleInstantiableOne instance
        }
    }

    method getInstantiableTwo {
        out {
            SimpleInstantiableTwo.SimpleInstantiableTwo instance
        }
    }

    method getNestedInstantiable {
        out {
            NestedInstantiableOne.NestedInstantiableOne instance
        }
    }

    method setSelfInstantiable {
        in {
            NestedInstantiableTwo selfInstance
        }
    }

    method getSelfInstantiable {
        out {
            NestedInstantiableTwo selfInstance
        }
    }
}
