/*
 * Copyright (C) 2017 HERE Global B.V. and its affiliate(s). All rights reserved.
 *
 * This software, including documentation, is protected by copyright controlled by
 * HERE Global B.V. All rights are reserved. Copying, including reproducing, storing,
 * adapting or translating, any or all of this material requires the prior written
 * consent of HERE Global B.V. This material also contains confidential information,
 * which may not be disclosed to others without prior written consent of HERE Global B.V.
 *
 */

package hello

import hello.CalculatorListener.CalculatorListener from "./CalculatorListener.fidl"

interface Calculator {

    version {
        major 0
        minor 1
    }

    public typedef Calculator is undefined

    <**@description: a 3D position defined by its x, y and z **>
    struct Position {
        Float x
        Float y
        Float z
    }

    <** @description: register listener to calculateInBackground results notifications **>
    method registerListener {
        in {
            CalculatorListener listener
        }
    }

    <** @description: unregister listener to calculateInBackground results notifications **>
    method unregisterListener {
        in {
            CalculatorListener listener
        }
    }

    <**@description: Compute the Euclidian distance between two positions.
    It is guaranteed that listener will be called before method returns**>
    method calculate {
        in {
            Position fromPosition
            Position toPosition
            CalculatorListener listener
        }
    }

    <**@description: start computing the Euclidian distance between two positions and notify the registered
    listeners when it is done **>
    method calculateInBackground {
        in {
            Position fromPosition
            Position toPosition
        }
    }
}

interface CalculatorFactory {

    method createCalculator {
        out {
            Calculator.Calculator calculator
        }
    }
}

