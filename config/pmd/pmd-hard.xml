<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!--
PMD Configuration
Severity: HARD
Source: https://github.com/noveogroup/android-check/blob/master/android-check-plugin/src/main/resources/pmd/pmd-hard.xml
Excluded: android, logging, GenericsNaming
-->
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="ruleset"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>PMD rule set file</description>

    <exclude-pattern>.*/build/.*</exclude-pattern>

    <rule ref="rulesets/java/basic.xml" />

    <rule ref="rulesets/java/braces.xml" />

    <rule ref="rulesets/java/clone.xml" />

    <rule ref="rulesets/java/codesize.xml">
        <!-- Disable all complexity checks except modified cyclomatic complexity -->
        <exclude name="CyclomaticComplexity" />
        <exclude name="NPathComplexity" />
        <exclude name="StdCyclomaticComplexity" />
    </rule>
    <rule ref="rulesets/java/codesize.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="25" />
        </properties>
    </rule>

    <rule ref="rulesets/java/comments.xml">
        <exclude name="CommentRequired" />
    </rule>
    <rule ref="rulesets/java/comments.xml/CommentSize">
        <properties>
            <property name="maxLines" value="20" />
            <property name="maxLineLength" value="100" />
        </properties>
    </rule>

    <rule ref="rulesets/java/controversial.xml">
        <!-- while ((x = update()) != null) { process(x); } -->
        <exclude name="AssignmentInOperand" />
        <exclude name="AtLeastOneConstructor" />
        <exclude name="AvoidFinalLocalVariable" />
        <exclude name="AvoidLiteralsInIfCondition" />
        <exclude name="AvoidPrefixingMethodParameters" />
        <exclude name="DataflowAnomalyAnalysis" />
        <exclude name="NullAssignment" />
        <exclude name="OnlyOneReturn" />
        <exclude name="UseConcurrentHashMap" />
    </rule>

    <rule ref="rulesets/java/coupling.xml">
        <exclude name="ExcessiveImports" />
        <exclude name="LawOfDemeter" />
        <exclude name="LoosePackageCoupling" />
    </rule>

    <rule ref="rulesets/java/design.xml">
        <exclude name="AbstractClassWithoutAbstractMethod" />
        <exclude name="AvoidReassigningParameters" />
        <!-- if (x != y) { short code block } else { long code block } -->
        <exclude name="ClassWithOnlyPrivateConstructorsShouldBeFinal" />
        <exclude name="ConfusingTernary" />
        <exclude name="SimpleDateFormatNeedsLocale" />
        <exclude name="SwitchStmtsShouldHaveDefault" />
        <exclude name="TooFewBranchesForASwitchStatement" />
        <exclude name="UseLocaleWithCaseConversions" />
        <exclude name="UseUtilityClass" />
    </rule>

    <rule ref="rulesets/java/empty.xml" />

    <rule ref="rulesets/java/finalizers.xml" />

    <rule ref="rulesets/java/imports.xml" />

    <rule ref="rulesets/java/junit.xml">
        <!-- Allow multiple Asserts in JUnit test -->
        <exclude name="JUnitTestContainsTooManyAsserts" />
    </rule>


    <rule ref="rulesets/java/migrating.xml" >
        <exclude name="JUnit4TestShouldUseTestAnnotation" />
    </rule>

    <rule ref="rulesets/java/naming.xml">
        <exclude name="AbstractNaming" />
        <exclude name="GenericsNaming" />
        <exclude name="LongVariable" />
        <exclude name="ShortClassName" />
        <exclude name="ShortVariable" />

        <!-- Does not apply to test methods. It is a very common pattern to name @Test methods
             like methodUnderTest_specificCase, methodUnderTest_anotherCase for grouping. -->
        <exclude name="MethodNamingConventions" />
    </rule>

    <rule ref="rulesets/java/optimizations.xml">
        <exclude name="AvoidInstantiatingObjectsInLoops" />
        <exclude name="LocalVariableCouldBeFinal" />
        <exclude name="MethodArgumentCouldBeFinal" />
    </rule>

    <rule ref="rulesets/java/strictexception.xml" />

    <rule ref="rulesets/java/strings.xml">
        <!-- This check is too fine grained, many template tests check against expected strings
             chopping those into global constants for re-use isn't practical -->
        <exclude name="AvoidDuplicateLiterals" />
        <exclude name="InsufficientStringBufferDeclaration" />
    </rule>

    <rule ref="rulesets/java/typeresolution.xml">
        <exclude name="LooseCoupling" />
    </rule>

    <rule ref="rulesets/java/unnecessary.xml" />

    <rule ref="rulesets/java/unusedcode.xml" />

</ruleset>
