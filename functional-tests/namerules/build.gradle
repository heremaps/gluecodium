/*
 * Copyright (C) 2016-2024 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

project.buildDir = "${rootProject.buildDir}"

def getCMakeCommonParameters() {
    return ['-Wno-dev',
        "-DGLUECODIUM_GENERATED_DIR=${rootProject.generatedDir}",
        "-DUSE_ANDROID_KOTLIN=${rootProject.isAndroidKotlinBuild()}"]
}

def getJavaVersion() {
    if (rootProject.isAndroidKotlinBuild()) {
        return JavaVersion.VERSION_17
    } else {
        return JavaVersion.VERSION_1_8
    }
}

android {
    ndkVersion rootProject.ndkVersion
    compileSdkVersion rootProject.compileSdkVersion
    namespace 'com.here.gluecodium.test.namerules'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 150001
        versionName '0.0.1'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        externalNativeBuild {
            cmake {
                arguments (*getCMakeCommonParameters())
                targets 'namerules'
            }
        }
    }

    if (!rootProject.isHostOnly()) {
        externalNativeBuild {
            cmake {
                path "${project.projectDir}/CMakeLists.txt"
                buildStagingDirectory "${project.buildNativeRoot}/namerules"
                version '3.19.0+'
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile "${project.projectDir}/input/src/android/AndroidManifest.xml"
        }

        // Note: generated files are added to source sets by gluecodium-gradle plugin.
        if (rootProject.isAndroidKotlinBuild()) {
            test {
                kotlin.srcDirs += ["${project.projectDir}/android-kotlin/src/test/kotlin"]
            }
        } else {
            test {
                java.srcDirs += ["${project.projectDir}/android/src/test/java"]
            }
        }
    }

    compileOptions {
        sourceCompatibility getJavaVersion()
        targetCompatibility getJavaVersion()
    }

    kotlinOptions {
        jvmTarget = getJavaVersion().toString()
    }

    libraryVariants.all { variant ->
        def typeName = variant.name
        def typeCapitalised = typeName.capitalize()

        tasks.register("build${typeCapitalised}NativeHost", BuildCMakeNativeHost) {
            projectDir = project.projectDir
            buildDir = file(buildNativeHostDir('namerules', typeName))
            cmakeParameters = getCMakeCommonParameters()
            target = 'namerules'
            buildType = variant.buildType.name
            dependsOn("generateGluecodiumSources")
        }

        buildConfigField "String", "NATIVE_LIB_HOST_DIR", "\"${buildNativeHostDir('namerules', typeName)}\""
    }
}

dependJavaTasksOnNativeBuild(tasks, rootProject.isHostOnly())

dependencies {
    implementation libs.androidx.annotation

    implementation libs.bundles.kotlin

    testImplementation libs.junit
    testImplementation libs.powermock.reflect
    testImplementation libs.robolectric
    testImplementation libs.bundles.hamcrest
}

apply plugin: 'gluecodium.gradle'

gluecodium {
    source = fileTree("${project.projectDir}/input/lime")
    outputDirectory = file(rootProject.generatedDir)

    useAndroidKotlin = rootProject.isAndroidKotlinBuild()
    kotlinPackage = "com.here.ktnamerules"
    kotlinInternalPackage = "lorem.ipsum.dolorez"
    kotlinNameRules = file("${project.projectDir}/input/namerules/kotlin.properties")
    javaPackage = "com.here.namerules"
    javaInternalPackage = "lorem.ipsum"
    javaNameRules = file("${project.projectDir}/input/namerules/java.properties")
    cppInternalNamespace = "lorem_ipsum.test"
    cppNameRules = file("${project.projectDir}/input/namerules/cpp.properties")
}
