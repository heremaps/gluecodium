/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

project.buildDir = "${rootProject.buildDir}"

def getCMakeCommonParameters() {
    return ['-Wno-dev',
        "-DGLUECODIUM_GENERATED_DIR=${rootProject.generatedDir}"]
}

android {
    ndkVersion rootProject.ndkVersion
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 150001
        versionName '0.0.1'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        externalNativeBuild {
            cmake {
                arguments (*getCMakeCommonParameters())
                targets 'namerules'
            }
        }
    }

    if (!rootProject.isHostOnly()) {
        externalNativeBuild {
            cmake {
                path "${project.projectDir}/CMakeLists.txt"
                buildStagingDirectory "${project.buildNativeRoot}/namerules"
                version '3.19.0+'
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile "${project.projectDir}/input/src/android/AndroidManifest.xml"

            java.srcDirs += [
                "${rootProject.generatedDir}/namerules_bindings/android-cpp/common/android",
                "${rootProject.generatedDir}/namerules_bindings/android-cpp/main/android"]
        }

        test {
            java.srcDirs += ["${project.projectDir}/android/src/test/java"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.all { variant ->
        def typeName = variant.name
        def typeCapitalised = typeName.capitalize()

        def buildNativeProject = task("build${typeCapitalised}NativeHost", type: BuildCMakeNativeHost) {
            projectDir = project.projectDir
            buildDir = file(buildNativeHostDir('namerules', typeName))
            cmakeParameters = getCMakeCommonParameters()
            target = 'namerules'
            buildType = variant.buildType.name
        }

        buildConfigField "String", "NATIVE_LIB_HOST_DIR", "\"${buildNativeHostDir('namerules', typeName)}\""
    }
}

tasks.configureEach { task ->
    // Java compilation depends on .java/.jar files created by CMake
    if (task.name == 'javaPreCompileDebug' || task.name == 'compileDebugUnitTestJavaWithJavac') {
        if (!rootProject.isHostOnly()) {
            task.dependsOn 'externalNativeBuildDebug'
        }
        task.dependsOn 'buildDebugNativeHost'
    }
    if (task.name == 'javaPreCompileRelease' || task.name == 'compileReleaseUnitTestJavaWithJavac') {
        if (!rootProject.isHostOnly()) {
            task.dependsOn 'externalNativeBuildRelease'
        }
        task.dependsOn 'buildReleaseNativeHost'
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.1.0'

    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.20"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.20"

    testImplementation 'junit:junit:4.12'
    testImplementation "org.powermock:powermock-reflect:2.0.9"
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

apply plugin: 'gluecodium.gradle'

gluecodium {
    source = fileTree("${project.projectDir}/input/lime")
    outputDirectory = file(rootProject.generatedDir)

    javaPackage = "com.here.namerules"
    javaInternalPackage = "lorem.ipsum"
    javaNameRules = file("${project.projectDir}/input/namerules/java.properties")
    cppInternalNamespace = "lorem_ipsum.test"
    cppNameRules = file("${project.projectDir}/input/namerules/cpp.properties")
}
