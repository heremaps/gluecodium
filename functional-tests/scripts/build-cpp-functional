#!/bin/bash -e
#
# Copyright (C) 2016-2018 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE


SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "${SCRIPT_DIR}/inc.functions"

USAGE=$(cat <<EOF
$0 [options]
    --publish                 Build and publish Gluecodium locally and use it for code generation
    --buildGluecodium         Build and use local Gluecodium version
    --gluecodiumPath [PATH]   Implies --buildGluecodium, path to local gluecodium (default: ${GLUECODIUM_PATH})
    --debug                   Build with debug symbols
    --cmakeGenerator [NAME]   Overrides default cmake generator. Default are Xcode on Darwin and Ninja on Linux
    --valgrind                Run with valgrind
    --junit                   Generate junit xml test report
    --cpp <standard>          Build with C++<standard> standard, defaults to 11.
    --cmake <parameter>       Pass additional parameter to cmake
    --help                    Print this message
EOF
)

BUILD_LOCAL_GLUECODIUM=false
CMAKE_EXTRA_PARAMETERS=()
CPP_VERSION=11
CMAKE_GENERATOR=

while [[ $# -gt 0 ]]; do
    case "$1" in
        --publish)
            publish_local
            shift
            ;;
        --buildGluecodium)
            BUILD_LOCAL_GLUECODIUM=true
            shift
            ;;
        --gluecodiumPath)
            BUILD_LOCAL_GLUECODIUM=true
            GLUECODIUM_PATH="$2"
            shift 2
            ;;
        --debug)
            CMAKE_EXTRA_PARAMETERS+=("-DCMAKE_BUILD_TYPE=Debug")
            shift
            ;;
        --cmakeGenerator)
            CMAKE_GENERATOR="$2"
            shift 2
            ;;
        --valgrind)
            USE_VALGRIND=true
            shift
            ;;
        --junit)
            TEST_REPORTS=true
            shift
            ;;
        --cpp)
            CPP_VERSION="$2"
            shift 2
            ;;
        --cmake)
            CMAKE_EXTRA_PARAMETERS+=("$2")
            shift 2
            ;;
        --help|*)
            echo "$USAGE"
            exit 0
            ;;
    esac
done

if [[ "$BUILD_LOCAL_GLUECODIUM" = "true" ]]; then
    export GLUECODIUM_PATH
fi

GLUECODIUM_VERSION="${GLUECODIUM_VERSION:-+}"
BUILD_DIR=${PWD}/build-cpp
INSTALL_DIR=${PWD}/dist/cpp${CPP_VERSION}

[ -d ${BUILD_DIR} ] || mkdir -p ${BUILD_DIR}
[ -d ${INSTALL_DIR} ] || mkdir -p ${INSTALL_DIR}

# Choose platform-native CMake generator
if [ -z "$CMAKE_GENERATOR" ] ; then
    CMAKE_GENERATOR="$(cmake_generator)"
fi

if [[ ! -z "$CMAKE_GENERATOR" ]] ; then
    CMAKE_EXTRA_PARAMETERS="${CMAKE_EXTRA_PARAMETERS} -G ${CMAKE_GENERATOR}"
fi

set -o pipefail

pushd ${BUILD_DIR}
safe cmake \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
    -DCMAKE_VERBOSE_MAKEFILE=ON \
    -DFUNCTIONAL_GLUECODIUM_GENERATOR=cpp \
    -DFUNCTIONAL_GLUECODIUM_VERSION=${GLUECODIUM_VERSION} \
    -DBUILD_CPP_TESTS=ON \
    -DTEST_CPP_VERSION=${CPP_VERSION} \
    ${CMAKE_EXTRA_PARAMETERS} \
    .. | tee cmake_output.log
popd

safe cmake --build ${BUILD_DIR} --target install

pushd "${BUILD_DIR}"
    if [ "$USE_VALGRIND" = true ]; then
        VALGRIND_ARGS="--leak-check=full \
            --error-exitcode=1 \
            --suppressions=${SCRIPT_DIR}/valgrind_suppressions \
            --gen-suppressions=all"

        ctest --overwrite MemoryCheckCommandOptions="$VALGRIND_ARGS" -T memcheck -V
    else
        ctest -V
    fi
popd