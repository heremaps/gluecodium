# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

struct Equatable {
    @Equatable
    struct EquatableStruct {
        boolField: Boolean
        intField: Int
        longField: Long
        floatField: Float
        doubleField: Double
        stringField: String
        structField: NestedEquatableStruct
        immutableStructField: NestedImmutableStruct = {}
        enumField: SomeSomeEnum
        mapField: SomeMap
        arrayField: List<String>
    }

    @Equatable
    struct EquatableNullableStruct {
        boolField: Boolean? = null
        intField: Int? = null
        uintField: UShort? = null
        floatField: Float? = null
        stringField: String? = null
        structField: NestedEquatableStruct? = null
        enumField: SomeSomeEnum? = null
        mapField: SomeMap? = null
        arrayField: List<String>? = null

        @Dart("withDefaults")
        field constructor()
        @Dart(Default)
        field constructor(boolField, intField, uintField, floatField, stringField, structField, enumField, mapField, arrayField)
    }

    @Equatable
    @Immutable
    struct ImmutableStruct {
        boolField: Boolean? = null
        intField: Int? = null
        uintField: UShort? = null
        floatField: Float? = null
        stringField: String? = null
        structField: NestedEquatableStruct? = null
        enumField: SomeSomeEnum? = null
        mapField: SomeMap? = null
        arrayField: List<String>? = null
    }

    @Equatable
    struct NestedEquatableStruct {
        fooField: String
    }

    @Equatable
    @Immutable
    struct NestedImmutableStruct {
        fooField: String = "Bar"
    }

    enum SomeSomeEnum {
        FOO,
        BAR
    }
    typealias SomeMap = Map<Int, String>
    typealias EquatableArray = List<EquatableStruct>
}

@Equatable
class EquatableClass {
    @Equatable
    struct AnotherEquatableStruct {
        intField: Int
        stringField: String
    }
    constructor create(
        name: String
    )
    @Dart("areEqualAnother")
    static fun areEqual(
        lhs: AnotherEquatableStruct,

        rhs: AnotherEquatableStruct
    ): Boolean
    static fun areEqual(
        lhs: Equatable.EquatableStruct,

        rhs: Equatable.EquatableStruct
    ): Boolean
    @Dart("areEqualNullable")
    static fun areEqual(
        lhs: Equatable.EquatableNullableStruct,

        rhs: Equatable.EquatableNullableStruct
    ): Boolean
    @Dart("haveSameHashAnother")
    static fun haveSameHash(
        lhs: AnotherEquatableStruct,
        rhs: AnotherEquatableStruct
    ): Boolean
    static fun haveSameHash(
        lhs: Equatable.EquatableStruct,
        rhs: Equatable.EquatableStruct
    ): Boolean
    @Dart("haveSameHashNullable")
    static fun haveSameHash(
        lhs: Equatable.EquatableNullableStruct,
        rhs: Equatable.EquatableNullableStruct
    ): Boolean
    property name: String { get }
}

class PointerEquatableClass {
    @Equatable
    struct EquatableStruct {
        equatable: EquatableClass
        pointerEquatable: PointerEquatableClass
    }
    @Equatable
    struct OptionalEquatableStruct {
        equatable: EquatableClass?
        pointerEquatable: PointerEquatableClass?
    }
    static fun createNew(): PointerEquatableClass
    // Returns the last created instance again
    static fun returnLast(): PointerEquatableClass
    static fun areEqual(
        one: EquatableStruct,
        other: EquatableStruct
    ): Boolean
    @Dart("areEqualOptional")
    static fun areEqual(
        one: OptionalEquatableStruct,
        other: OptionalEquatableStruct
    ): Boolean
    static fun haveSameHash(
        one: EquatableStruct,
        other: EquatableStruct
    ): Boolean
    @Dart("haveSameOptional")
    static fun haveSameHash(
        one: OptionalEquatableStruct,
        other: OptionalEquatableStruct
    ): Boolean
}

@Equatable
@Cpp(Accessors)
struct EquatableStructWithAccessors {
    fooField: String
}

@Equatable
struct EquatableStructWithInternalFields {
    publicField: String
    internal internalField: String
    internal internalListField: List<String>
    internal internalMapField: Map<String, String>
    internal internalSetField: Set<String>
}

@Equatable
interface EquatableInterface {
    property name: String { get }
}

class EquatableInterfaceFactory {
    static fun createEquatableInterface(name: String): EquatableInterface
}
