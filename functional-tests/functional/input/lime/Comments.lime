# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

// This is some very useful interface.
class comments {
    // This is some very useful struct.
    struct SomeStruct {
        // How useful this struct is
        someField: Usefulness
    }
    // This is some very useful enum.
    enum SomeCommentedEnum {
        // Not quite useful
        Useless,
        // Somewhat useful
        Useful
    }
    // This is some very useful typedef.
    typealias Usefulness = Boolean
    // This is some very useful array.
    typealias SomeArray = List<String>
    // This is some very useful map.
    typealias SomeMap = Map<String, Usefulness>
    // This is some very useful constant.
    const VeryUseful: Usefulness = true
    // This is some very useful method that measures the usefulness of its input.
    fun someMethodWithAllComments(
        // Very useful input parameter
        input: String
    ): /* Usefulness of the input */ Usefulness throws /* This is some very useful enum. */ SomeCommented
    // This is some very useful method that measures the usefulness of its input.
    fun someMethodWithInputComments(
        // Very useful input parameter
        input: String
    ): Usefulness
    // This is some very useful method that measures the usefulness of its input.
    fun someMethodWithOutputComments(
        input: String
    ): /* Usefulness of the input */ Usefulness
    // This is some very useful method that measures the usefulness of its input.
    fun someMethodWithNoComments(
        input: String
    ): Usefulness
    // This is some very useful method that does not measure the usefulness of its input.
    fun someMethodWithoutReturnTypeWithAllComments(
        // Very useful input parameter
        input: String
    )
    // This is some very useful method that does not measure the usefulness of its input.
    fun someMethodWithoutReturnTypeWithNoComments(
        input: String
    )
    // This is some very useful method that measures the usefulness of something.
    fun someMethodWithoutInputParametersWithAllComments(): /* Usefulness of the input */ Usefulness
    // This is some very useful method that measures the usefulness of something.
    fun someMethodWithoutInputParametersWithNoComments(): Usefulness
    fun someMethodWithNothing()
    // This is some very useful method that does nothing.
    fun someMethodWithoutReturnTypeOrInputParameters()
    // This is some very useful instance method.
    fun instanceMethod(
        // This is some very useful instance method parameter.
        input: CommentsInstantiable
    ): /* This is some very useful instance method result. */ CommentsInstantiable
    // Some very useful attribute.
    property SomeAttribute: Usefulness {
        // Some very useful attribute.
        get
        // Some very useful attribute.
        set
    }
    // Some very useful attribute.
    property instanceAttribute: CommentsInstantiable {
        // Some very useful attribute.
        get
        // Some very useful attribute.
        set
    }
    // This is some very useful exception.
    exception SomeCommented(SomeCommentedEnum)
}

// This is some very useful interface.
// There is a lot to say about this interface.
// at least it has multiline comments.
//
// I am a heading
// --------------
//
// And now comes a list:
// * asterisk
// * needs
// * escaping
//
// ```Some example code;```
class MultiLineComments {
    // This is very important method.
    // It has very important parameters.
    // It has side effects.
    fun someMethodWithLongComment(
        // Very useful input parameter.
        // You must not confuse it with the second parameter.
        // But they are similar.
        input: String,

        // Not as useful as the first parameter.
        // But still useful.
        // use a positive value for more happiness.
        ratio: Double
    ): /* If you provide a useful input,
    and a useful ratio you can expect a useful output.
    Just kidding do not expect anything from a method until
    you see its body. */ Float
}

// This is some very useful interface. There is a lot to say about this interface. at least it has a long comment.
class LongComments {
    // This is very important method. It has very important parameters. It has side effects.
    fun someMethodWithLongComment(
        // Very useful input parameter. You must not confuse it with the second parameter. But they are similar.
        input: String,

        // Not as useful as the first parameter. But still useful. use a positive value for more happiness.
        ratio: Double
    ): /* If you provide a useful input and a useful ratio you can expect a useful output. Just kidding do not expect anything from a method until you see its body. */ Float
}

class CommentsInstantiable {
    // This is some very useful constructor.
    constructor create(
        // Very useful input parameter
        input: String
    )
}

types CommentsTypeCollection {
    struct TypeCollectionStruct {
        field: Int
    }
    enum TypeCollectionEnum {
        item
    }
    typealias TypeCollectionTypedef = Boolean
    const TypeCollectionConstant: Boolean = true
}

// The nested types like [random_method] don't need full name prefix, but it's
// possible to references other interfaces like [another.CommentsInterface] or other members
// [comments.someMethodWithAllComments].
class CommentsLinks {
    enum TooUsefulErrorCode {
        Twice,
        ThreeTimes
    }
    // Link types:
    // * constant: [comments.VeryUseful]
    // * struct: [comments.SomeStruct]
    // * struct field: [comments.SomeStruct.someField]
    // * enum: [comments.SomeCommentedEnum]
    // * enum item: [comments.SomeCommentedEnum.Useful]
    // * attribute: [comments.SomeAttribute]
    // * method: [comments.instanceMethod]
    // * top level constant: [CommentsTypeCollection.TypeCollectionConstant]
    // * top level struct: [CommentsTypeCollection.TypeCollectionStruct]
    // * top level struct field: [CommentsTypeCollection.TypeCollectionStruct.field]
    // * top level enum: [CommentsTypeCollection.TypeCollectionEnum]
    // * top level enum item: [CommentsTypeCollection.TypeCollectionEnum.item]
    // * error: [TooUseful]
    //
    //
    // Not working for Java:
    // * typedef: [comments.Usefulness]
    // * array: [comments.SomeArray]
    // * map: [comments.SomeMap]
    // * top level typedef: [CommentsTypeCollection.TypeCollectionTypedef]
    //
    // Not working:
    // * input parameter: [inputParameter]
    // * output parameter: [outputParameter]
    fun random_method(
        inputParameter: comments.SomeCommentedEnum
    ): comments.SomeCommentedEnum throws TooUseful
    exception TooUseful(TooUsefulErrorCode)
}
