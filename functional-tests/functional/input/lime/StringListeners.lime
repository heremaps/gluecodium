# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

interface StringListener {
    struct StringStruct {
        stringField: String
    }
    // The method to call on the listener when the log message is output
    fun onMessage(
        message: String
    )
    // The method to call on the listener when the log message is output
    fun onStructMessage(
        message: StringStruct
    )
    // The method to call on the listener when the log message is output
    @Cpp(Const)
    fun onConstMessage(
        message: String
    )
}

class DummyLogger {
    // Send the message to our Mobile overlords through the registered listeners
    static fun relayMessage(
        listener: StringListener,
        message: String
    )
    // Send the message to our Mobile overlords through the registered listeners
    static fun relayMessageAsStruct(
        listener: StringListener,
        message: String
    )
    // Send the message to our Mobile overlords through the registered listeners
    static fun relayConstMessage(
        listener: StringListener,
        message: String
    )
}

class PersistingLogger {
    static fun addListener(listener: StringListener)
    // Returns `false` if listeners was not found, returns `true` otherwise.
    static fun removeListener(listener: StringListener): Boolean
    static fun removeAllListeners()
    static fun messageAll(message: String)
}
