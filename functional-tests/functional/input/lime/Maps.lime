# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test
import test.SomeEquatableClass
import test.SomePointerEquatableClass

class Maps {
    struct SomeStruct {
        value: String = ""
    }
    struct StructWithMap {
        errorMapping: ErrorCodeToMessageMap = []
    }
    enum SomeEnum {
        FooValue,
        BarValue
    }
    @Equatable
    struct EquatableStruct {
        id: String
    }
    typealias ErrorCodeToMessageMap = Map<Int, String>
    typealias NumberTypedef = UByte
    typealias SomeStructTypedef = SomeStruct
    typealias IdTypedefToStruct = Map<NumberTypedef, SomeStruct>
    typealias NumberToStructTypedef = Map<UByte, SomeStructTypedef>
    typealias NumberToStruct = Map<UByte, SomeStruct>
    typealias NestedMap = Map<UByte, NumberToStruct>
    typealias NumberToArray = Map<UByte, ArrayOfStrings>
    typealias ArrayOfStrings = List<String>
    typealias EnumToString = Map<SomeEnum, String>
    typealias StringToInstance = Map<String, SimpleInterfaceOne>
    typealias StructToString = Map<EquatableStruct, String>
    typealias ClassToString = Map<SomeEquatableClass, String>
    typealias SomePointerEquatableClassToString = Map<SomePointerEquatableClass, String>
    // Example static method which takes a map and returns a map of same type & having the same keys
    // but values converted to uppercase.
    static fun methodWithMap(
        // Input map
        input: ErrorCodeToMessageMap
    ): /* Output map */ ErrorCodeToMessageMap
    // Example static method which takes a map to struct returns same type.
    // All fields in structs are converted to uppercase.
    static fun methodWithMapToStruct(
        // Input map
        input: NumberToStruct
    ): /* Output map */ NumberToStruct
    // Example static method which takes a nested map and returns same type.
    // All fields in structs are converted to uppercase.
    static fun methodWithNestedMap(
        // Input map
        input: NestedMap
    ): /* Output map */ NestedMap
    // Example static method which takes a struct with map inside and returns same type.
    // All string values in map are converted to uppercase.
    static fun methodWithStructWithMap(
        // Input map
        input: StructWithMap
    ): /* Output map */ StructWithMap
    // Example static method which takes a map and returns a map of same type & having the same keys
    // but values converted to uppercase.
    static fun methodWithEnumToStringMap(
        // Input map
        input: EnumToString
    ): /* Output map */ EnumToString
    // Example static method which takes a map and returns a map of same type & having the same keys
    // but values converted to uppercase.
    static fun methodWithMapOfArrays(
        input: NumberToArray
    ): NumberToArray
    // Example static method which takes a map and returns a map of same type & reads values
    // stored in each instance, append to it ' <key>' and stores back in map under same key.
    static fun methodWithMapOfInstances(
        input: StringToInstance
    ): StringToInstance
    static fun structToStringRoundTrip(
        input: StructToString
    ): StructToString
    static fun classToStringRoundTrip(
        input: ClassToString
    ): ClassToString
    static fun somePointerEquatableClassToStringRoundTrip(
        input: SomePointerEquatableClassToString
    ): SomePointerEquatableClassToString
}
