# Copyright (C) 2016-2025 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

// A class, which reads temperature and updates observers according to the given interval.
// "Subject" in observer design pattern.
class Thermometer {
    @AfterConstruction("notifyObservers(this, observers)")
    constructor makeWithDuration(interval: Duration, observers: List<TemperatureObserver>)

    @AfterConstruction("notifyObservers(this, observers)")
    constructor makeWithoutDuration(observers: List<TemperatureObserver>)

    static fun notifyObservers(self: Thermometer, observers: List<TemperatureObserver>)

    fun forceUpdate()

    fun getCelsius(): Double
    fun getKelvin(): Double
    fun getFahrenheit(): Double
}

// Observer interface for monitoring changes in thermometer ("Observer of subject").
interface TemperatureObserver {
    fun onTemperatureUpdate(thermometer: Thermometer)
}
