# Copyright (C) 2016-2020 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

struct DateInterval {
    external {
        swift framework "Foundation"
    }

    start: Date
    end: Date
}

@Swift("PseudoColor")
struct SystemColor {
    external {
        swift framework ""
        swift converter "ColorConverter"
    }

    red: Float
    green: Float
    blue: Float
    alpha: Float
}

@Swift("URLCredential.Persistence")
enum Persistence {
    external {
        swift framework "FoundationNetworking"
    }

    none,
    forSession,
    permanent
}

enum Season {
    external {
        swift framework ""
        swift converter "SeasonConverter"
    }

    WINTER,
    SPRING,
    SUMMER,
    AUTUMN
}

class UseSwiftExternalTypes {
    static fun dateIntervalRoundTrip(input: DateInterval): DateInterval
    static fun persistenceRoundTrip(input: Persistence): Persistence
    static fun colorRoundTrip(input: SystemColor): SystemColor
    static fun seasonRoundTrip(input: Season): Season

    static fun structRoundTrip(input: SwiftExternalTypesStruct): SwiftExternalTypesStruct
    static fun veryBooleanUnbox(input: VeryBoolean): Boolean
}

struct SwiftExternalTypesStruct {
    dateInterval: DateInterval
    persistence: Persistence
    color: SystemColor
    season: Season
}

@Swift("PseudoBoolean")
struct VeryBoolean {
    external {
        swift framework ""
        swift converter "BooleanConverter"
    }

    value: Boolean
    constructor make(value: Boolean)
}
