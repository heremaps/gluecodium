# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

interface OuterInterface {
    class InnerClass {
        fun foo(input: String): String
    }
    interface InnerInterface {
        fun foo(input: String): String
    }

    fun foo(input: String): String
}

class OuterClass {
    class InnerClass {
        fun foo(input: String): String
    }
    struct InnerStruct {
        foo: Int
    }
    interface InnerInterfaceInClass {
        fun foo(input: String): String
    }
    enum InnerEnum {
        FOO,
        BAR
    }

    fun foo(input: String): String

    typealias InnerTypedef = UByte
    lambda InnerLambda = () -> Void
}

interface InterfaceRefersNestedEnumAsReturnValue {
    fun foo(): OuterClass.InnerEnum
    fun bar(): OuterClass
}

interface InterfaceRefersNestedClassAsReturnValue {
    fun foo(): OuterClass.InnerClass
    fun bar(): OuterClass
}

interface InterfaceRefersNestedStructAsReturnValue {
    fun foo(): OuterClass.InnerStruct
    fun bar(): OuterClass
}

interface InterfaceRefersNestedTypedefAsReturnValue {
    fun foo(): OuterClass.InnerTypedef
    fun bar(): OuterClass
}

interface InterfaceRefersNestedLambdaAsReturnValue {
    fun foo(): OuterClass.InnerLambda
    fun bar(): OuterClass
}

class LevelOne {
    class LevelTwo {
        class LevelThree {
            fun foo(input: OuterInterface.InnerClass): OuterInterface.InnerClass
            struct LevelFour {
                stringField: String
                static fun foo_factory(): LevelFour
                const FOO: Boolean = false
            }
        }
    }
}

open class NestedContainersParentClass {
    fun parentFun()
    property parentProperty: String
}

class OuterClassWithInheritance : NestedContainersParentClass {
    class OuterClassInnerClass {
        fun bar(input: String): String
    }
    interface OuterClassInnerInterface {
        fun baz(input: String): String
    }

    fun foo(input: String): String
}
