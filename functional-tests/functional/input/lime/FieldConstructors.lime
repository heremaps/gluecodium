# Copyright (C) 2016-2021 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

struct FieldConstructorsPartialDefaults {
    stringField: String
    intField: Int
    boolField: Boolean = true
    @Dart("withTrue")
    field constructor(intField, stringField)
    @Dart(Default)
    field constructor(boolField, intField, stringField)
}

struct FieldConstructorsAllDefaults {
    stringField: String = "nonsense"
    intField: Int = 42
    boolField: Boolean = true
    @Dart("withAll")
    field constructor()
    @Dart("withTrueNonsense")
    field constructor(intField)
    @Dart("withTrue")
    field constructor(intField, stringField)
    @Dart(Default)
    field constructor(boolField, intField, stringField)
}

struct MutableStructNoClash {
    stringField: String = "nonsense"
    intField: Int = 42
    boolField: Boolean = true
    @Dart("withAll")
    field constructor()
}

@Immutable
struct ImmutableStructNoClash {
    stringField: String = "nonsense"
    intField: Int = 42
    boolField: Boolean = true
    @Dart("withAll")
    field constructor()
}

@Immutable
struct ImmutableStructWithClash {
    stringField: String = "nonsense"
    intField: Int = 42
    boolField: Boolean = true
    @Dart("withAll")
    field constructor()
    @Dart(Default)
    field constructor(boolField, intField, stringField)
}

struct FieldCustomConstructorsMix {
    stringField: String = "nonsense"
    intField: Int = 42
    boolField: Boolean = true
    @Dart("withTrueNonsense")
    field constructor(intField)
    @Dart(Default)
    constructor createMe(intValue: Int, dummy: Double)
}

struct FieldConstructorsInternalFields {
    stringField: String = "nonsense"
    intField: Int = 42
    internal boolField: Boolean = true
    @Dart(Default)
    field constructor()
    @Dart("withTrue")
    field constructor(intField, stringField)
}

struct FieldConstructorsInternal {
    publicField: String = "foo"
    internalField: Double = 42
    @Dart("withAll")
    internal field constructor()
    @Dart("withFortyTwo")
    internal field constructor(publicField)
    @Dart("withFoo")
    internal field constructor(internalField)
    @Dart(Default)
    internal field constructor(internalField, publicField)
}

struct FieldConstructorsExposeInternal {
    internal internalField: String = "bar"
    @Dart("withAll")
    internal field constructor()
    @Dart(Default)
    field constructor(internalField)
}

@Skip(Java, Dart)
struct FieldConstructorsWithLabels {
    stringField: String = "nonsense"
    intField: Int = 42
    boolField: Boolean = true
    field constructor(@Swift(Label="value") intField, @Swift(Label="_") boolField)
    field constructor(stringField, @Swift(Label="value") intField, @Swift(Label="_") boolField)
}

@Skip(Java, Dart)
struct FieldConstructorsParameterDefaults {
    stringField: String = "nonsense"
    intField: Int
    boolField: Boolean = true

    @Swift(ParameterDefaults)
    field constructor(intField)
    @Swift(ParameterDefaults)
    field constructor(intField, boolField)
    @Swift(ParameterDefaults)
    field constructor(stringField, intField, boolField)
}
