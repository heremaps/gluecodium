# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package `external`

struct ExternalStruct {
    external {
        cpp include "include/ExternalTypes.h"
    }

    string_field: String
    externalStringField: String external {
        cpp getterName "get_some_string"
        cpp setterName "set_some_string"
    }
    externalArrayField: List<Int> external {
        cpp getterName "getSomeArray"
        cpp setterName "setSomeArray"
    }
    externalStructField: AnotherExternalStruct external {
        cpp getterName "aStruct"
        cpp setterName "_set_aStruct"
    }
}
struct AnotherExternalStruct {
    external {
        cpp include "include/ExternalTypes.h"
        cpp name "::external::even_more_external::AlienStructure"
    }
    int_field: Int
}
struct Yet_Another_External_Struct {
    external {
        cpp include "include/ExternalTypes.h"
    }
    string_Field: String
}
struct ExternalStringPair {
    external {
        cpp include "string, utility"
        cpp name "::std::pair< ::std::string, ::std::string >"
    }
    first: String
    second: String
}
enum ExternalEnum {
    external {
        cpp include "include/ExternalTypes.h"
        cpp name "::external::even_more_external::AlienEnum"
    }
    Foo,
    Bar
}
enum Very_External_Enum {
    external {
        cpp include "include/ExternalTypes.h"
    }
    FOO,
    BAR
}
typealias ExternalStructArray = List<ExternalStruct>
typealias ExternalEnumArray = List<ExternalEnum>

struct ExternalTypesWithoutTypeTraits {
    struct IntStruct {
        external {
            cpp include "include/ExternalTypesWithoutTypeTraits.h"
            cpp name "::external::IntStruct"
        }
        int_field: Int
    }
}

class ClassWithOverloads {
    external {
        cpp include "include/ExternalTypes.h"
    }
    fun oneOverloadNotExposed(): String
    fun allOverloadsExposed(input: String): String
    @Dart("allOverloadsExposedList")
    fun allOverloadsExposed(inputList: List<String>): String
    @Dart("allOverloadsExposedTwo")
    fun allOverloadsExposed(inputString: String, inputBool: Boolean): String
}

class StandaloneExternalType {
    external {
        cpp include "external/StandaloneExternalType.h"
        cpp name "::external::StandaloneExternalType"
    }
    fun foo()
}

class external_Interface {
    external {
        cpp include "include/ExternalTypes.h"
    }
    struct some_Struct {
        some_Field: String
    }
    enum some_Enum {
        some_Value
    }
    fun some_Method(
        some_Parameter: Byte
    )
    property some_Attribute: String {
        get external { cpp name "get_Me" }
    }
}

class VeryExternalInterface {
    external {
        cpp include "include/ExternalTypes.h"
        cpp name "::external::fOo_iTnerface"
    }
    struct some_Struct {
        some_Field: String
    }
    enum some_Enum {
        some_Value
    }
    fun some_Method(
        some_Parameter: Byte
    )
    property some_Attribute: String {
        get external { cpp name "get_Me" }
        set external { cpp name "set_Me" }
    }
}

enum StandaloneExternalEnum {
    external { cpp include "include/ExternalTypes.h" }

    foo
}
