# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

class PlainDataStructuresImmutable {
    struct Point {
        x: Double = 0.0
        y: Double = 0.0
    }
    // Immutable struct type containing all builtin and a custom data type
    @Immutable
    @Java(Builder)
    struct AllTypesImmutableStruct {
        int8Field: Byte
        uint8Field: UByte
        int16Field: Short
        uint16Field: UShort
        int32Field: Int
        uint32Field: UInt
        int64Field: Long
        uint64Field: ULong
        floatField: Float
        doubleField: Double
        stringField: String
        booleanField: Boolean
        pointField: Point
    }
    struct NestingImmutableStruct {
        structField: AllTypesImmutableStruct
    }
    struct DoubleNestingImmutableStruct {
        nestingStructField: NestingImmutableStruct
    }
    struct StructWithArrayOfImmutable {
        arrayField: ArrayOfImmutable
    }
    @Cpp(Accessors)
    @Immutable
    struct ImmutableStructWithCppAccessors {
        stringField: String
    }
    typealias ArrayOfImmutable = List<AllTypesImmutableStruct>
    typealias MapToImmutableStruct = Map<Int, AllTypesImmutableStruct>

    static fun immutableStructRoundTrip(input: AllTypesImmutableStruct): AllTypesImmutableStruct
    static fun nestingImmutableStructRoundTrip(
        input: NestingImmutableStruct
    ): NestingImmutableStruct
    static fun immutableStructWithAccessorsRoundTrip(
        input: ImmutableStructWithCppAccessors
    ): ImmutableStructWithCppAccessors
    static fun mapOfImmutablesRoundTrip(input: MapToImmutableStruct): MapToImmutableStruct
}
