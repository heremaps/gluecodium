#!/bin/bash
#
# Script to create a new version commit
#
# Semantic Versioning: MAJOR.MINOR.PATCH

SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. "${SCRIPT_DIR}/inc.constants"
. "${SCRIPT_DIR}/inc.functions"

if [ $# -ne 1 ] ; then
    die "Usage: $0 [VERSION_NAME]\n\n\tExample: $0 0.0.1"
fi

# Increase SDK version (used as versionName in most modules)
OLD_VERSION=$(get_version "${TRANSPILER_VERSION_FILE}")
NEW_VERSION=$1

if [ "$NEW_VERSION" \< "$OLD_VERSION" -o "$NEW_VERSION" = "$OLD_VERSION" ] ; then
    die "Error: We are already at version $OLD_VERSION"
fi

sed -i -e "s|version = $OLD_VERSION|version = $NEW_VERSION|" "${TRANSPILER_VERSION_FILE}"

# Create a commit with appropriate git tag
git commit \
    "${TRANSPILER_VERSION_FILE}" \
    -m "Release version $NEW_VERSION"

# We can't tag here, gerrit will almost always rebase the commit. As soon as
# the commit hash changes, the tag points to a stale commit. This will have to
# happen in a gerrit post-commit hook:

#git tag release/$NEW_VERSION
