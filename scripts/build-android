#!/bin/bash
#
# Script to build the "hello" library for an Android consumer. This is
# demonstrated by the platforms/android/app application which is build externally.

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "${SCRIPT_DIR}/inc.functions"

HOST_ARCH=host-$(uname -m)

CMAKE_DEFAULT_PARAMETERS=$(cat <<EOF
-DBUILD_SHARED_LIBS=ON \
-DCMAKE_SYSTEM_VERSION=21 \
-DCMAKE_VERBOSE_MAKEFILE=ON \
-DHELLO_APIGEN_TRANSPILER_GENERATOR=android \
-DHELLO_BUILD_CPP_APP=OFF \
-DHELLO_BUILD_IOS_APP=OFF \
-G Ninja
EOF
)
CMAKE_CROSS_BUILD_PARAMETERS=$(cat <<EOF
-DCMAKE_ANDROID_NDK=$NDK_ROOT \
-DCMAKE_ANDROID_STL_TYPE=gnustl_static \
-DCMAKE_SYSTEM_NAME=Android
EOF
)

# Do cross-compilation build for generating a proper Android Archive
for arch in x86 armeabi-v7a ${HOST_ARCH} ; do
    build_dir=${PWD}/build-android-${arch}
    install_dir=${PWD}/dist/android/${arch}

    [ -d ${build_dir} ] || mkdir -p ${build_dir}
    [ -d ${install_dir} ] || mkdir -p ${install_dir}

    pushd ${build_dir}

    CMAKE_EXTRA_PARAMETERS=
    # Do host-native build for testing on the JVM with Robolectric
    if [ "${arch}" != "host-$(uname -m)" ] ; then
        CMAKE_EXTRA_PARAMETERS="${CMAKE_CROSS_BUILD_PARAMETERS} \
        -DCMAKE_ANDROID_ARCH_ABI=${arch}"
    fi

    safe cmake \
        ${CMAKE_DEFAULT_PARAMETERS} \
        ${CMAKE_EXTRA_PARAMETERS} \
        -DCMAKE_INSTALL_PREFIX=${install_dir} \
        ..

    popd

    safe cmake \
        --build ${build_dir} \
        --target install
done

ANDROID_DIR=${PWD}/platforms/android
DIST_ANDROID_DIR=${PWD}/dist/android
INSTALL_AAR_DIR=${ANDROID_DIR}/app/libs/
TMP_DIR=$(mktemp -d)

# At the moment we build one AAR per target architecture as it is not straightforward
# to do a multi-arch build in one CMake build invocation. However, for simplicity we
# want to include all architectures into one Android Archive. Hence do it in bash:
find ${DIST_ANDROID_DIR} -name *.aar -not -path "*${HOST_ARCH}*" -exec unzip -n {} -d ${TMP_DIR} \;
jar cvf ${INSTALL_AAR_DIR}/hello.aar -C ${TMP_DIR} .

# Copy the host-build shared object into the application folder as well so that it
# can be used for testing
rm -rf ${TMP_DIR}
find ${DIST_ANDROID_DIR}/${HOST_ARCH} -name *.aar -exec unzip -n {} -d ${TMP_DIR} \;
mkdir -p ${INSTALL_AAR_DIR}/${HOST_ARCH}
cp ${TMP_DIR}/jni/* ${INSTALL_AAR_DIR}/${HOST_ARCH}

# Finally build the example app itself and run tests
pushd ${ANDROID_DIR}
safe ./gradlew build
popd
