#!/bin/bash
#
# Script to build the "hello" library for an Android consumer. This is
# demonstrated by the platforms/android/app application which is build externally.

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "${SCRIPT_DIR}/inc.functions"

if [ "$1" == "--publish" ]; then
    publish_local
fi

# Sanity checks
[ $ANDROID_HOME ] || die "ANDROID_HOME environment variable is mandatory"
[ $NDK_ROOT ] || die "NDK_ROOT environment variable is mandatory (NDK can be installed from within Android Studio"


# Constants
TRANSPILER_VERSION="${TRANSPILER_VERSION:-+}"
HOST_ARCH=host-$(uname -m)
CMAKE_DEFAULT_PARAMETERS=$(cat <<EOF
-DBUILD_SHARED_LIBS=ON \
-DCMAKE_SYSTEM_VERSION=21 \
-DCMAKE_VERBOSE_MAKEFILE=ON \
-DHELLO_APIGEN_TRANSPILER_GENERATOR=android \
-DHELLO_APIGEN_TRANSPILER_VERSION=${TRANSPILER_VERSION} \
-G Ninja
EOF
)
CMAKE_CROSS_BUILD_PARAMETERS=$(cat <<EOF
-DANDROID_NDK=${NDK_ROOT} \
-DANDROID_NATIVE_API_LEVEL=26 \
-DANDROID_TOOLCHAIN=clang \
-DCMAKE_TOOLCHAIN_FILE=${NDK_ROOT}/build/cmake/android.toolchain.cmake
EOF
)

# The CMake toolchain shipped with the NDK doesn't work with CMake-3.72
# or 3.9.1. To ensure compatibility, use the shipped cmake binary. See
# https://github.com/android-ndk/ndk/issues/254 or
# https://gitlab.kitware.com/cmake/cmake/issues/16708
NDK_CMAKE_BINARY=$(find $ANDROID_HOME/cmake -executable -type f  -name cmake)

# Do cross-compilation build for generating a proper Android Archive
for arch in x86 armeabi-v7a ${HOST_ARCH} ; do
    build_dir=${PWD}/build-android-${arch}
    install_dir=${PWD}/dist/android/${arch}

    [ -d ${build_dir} ] || mkdir -p ${build_dir}
    [ -d ${install_dir} ] || mkdir -p ${install_dir}

    pushd ${build_dir}

    CMAKE_EXTRA_PARAMETERS=
    # Do host-native build for testing on the JVM with Robolectric using the
    # CMake binary supplied (and supported) by the NDK
    if [ "${arch}" != "host-$(uname -m)" ] ; then
        CMAKE_EXTRA_PARAMETERS="${CMAKE_CROSS_BUILD_PARAMETERS} \
        -DANDROID_ABI=${arch}"
        CMAKE_BINARY=${NDK_CMAKE_BINARY}
    else
        CMAKE_BINARY=cmake
    fi

    safe ${CMAKE_BINARY} \
        ${CMAKE_DEFAULT_PARAMETERS} \
        ${CMAKE_EXTRA_PARAMETERS} \
        -DCMAKE_INSTALL_PREFIX=${install_dir} \
        ..

    popd

    safe ${CMAKE_BINARY} \
        --build ${build_dir} \
        --target install
done

ANDROID_DIR=${PWD}/platforms/android
DIST_ANDROID_DIR=${PWD}/dist/android
INSTALL_AAR_DIR=${ANDROID_DIR}/app/libs/
TMP_DIR=$(mktemp -d)

# At the moment we build one AAR per target architecture as it is not straightforward
# to do a multi-arch build in one CMake build invocation. However, for simplicity we
# want to include all architectures into one Android Archive. Hence do it in bash:
find ${DIST_ANDROID_DIR} -name *.aar -not -path "*${HOST_ARCH}*" -exec unzip -n {} -d ${TMP_DIR} \;
jar cvf ${DIST_ANDROID_DIR}/hello.aar -C ${TMP_DIR} .
cp ${DIST_ANDROID_DIR}/hello.aar ${INSTALL_AAR_DIR}

# Copy the host-build shared object into the application folder as well so that it
# can be used for testing
rm -rf ${TMP_DIR}
find ${DIST_ANDROID_DIR}/${HOST_ARCH} -name *.aar -exec unzip -n {} -d ${TMP_DIR} \;
mkdir -p ${INSTALL_AAR_DIR}/${HOST_ARCH}
cp ${TMP_DIR}/jni/* ${INSTALL_AAR_DIR}/${HOST_ARCH}

# Finally build the example app itself and run tests
pushd ${ANDROID_DIR}
safe ./gradlew build
popd
