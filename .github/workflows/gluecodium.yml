name: CI

on: [push, pull_request]

jobs:
  build:
    name: Build and unit tests
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            !*gluecodium*
            !*lime-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build and test :lime-runtime
        run: ./gradlew :lime-runtime:build
      - name: Build and test :lime-loader
        run: ./gradlew :lime-loader:build
      - name: Build and test :gluecodium
        run: ./gradlew :gluecodium:build
      - name: Build and test :gluecodium-gradle
        run: ./gradlew :gluecodium-gradle:build

  cpp:
    name: C++
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            !*gluecodium*
            !*lime-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: '3.15.7'
      - name: Install ninja
        run: sudo apt install -y ninja-build
      - name: Install valgrind
        run: sudo apt install -y valgrind
      - name: Build and run functional tests
        run: |
          cd examples
          ./scripts/build-cpp --valgrind --buildGluecodium

  android:
    name: Android
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            !*gluecodium*
            !*lime-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: '3.15.7'
      - name: Install ninja
        run: sudo apt install -y ninja-build
      - name: Install Android SDK
        run: |
          ANDROID_API_LEVEL=android-28
          ANDROID_BUILD_TOOLS_VERSION=28.0.3
          ANDROID_CMAKE_VERSION=3.10.2.4988404
          ANDROID_HOME=${HOME}/android-sdk-linux
          PATH=${PATH}:${ANDROID_HOME}/tools/bin
          wget -q "https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip" -O android-sdk-tools.zip
          unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
          mkdir -p ~/.android
          touch ~/.android/repositories.cfg
          yes | sdkmanager --licenses
          yes | sdkmanager "platforms;${ANDROID_API_LEVEL}" > /dev/null
          yes | sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" > /dev/null
          yes | sdkmanager "cmake;${ANDROID_CMAKE_VERSION}" > /dev/null
      - name: Build and run functional tests
        run: |
          export ANDROID_HOME=${HOME}/android-sdk-linux
          export ANDROID_NDK_HOME=${ANDROID_HOME}/ndk-bundle
          export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools
          pushd examples
          ./scripts/build-android --hostOnly --buildGluecodium
          popd
          pushd functional-tests
          ./scripts/build-android --publish
          popd
          pushd cmake
          GLUECODIUM_BUILD_ENVIRONMENT=android-host cmake -P run-cmake-unit-test.cmake
          popd

  swift:
    name: Swift
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            !*gluecodium*
            !*lime-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: '3.15.7'
      - name: Install ninja
        run: sudo apt install -y ninja-build
      - name: Install valgrind
        run: sudo apt install -y valgrind
      - name: Install libcurl4
        run: sudo apt install -y libcurl4
      - name: Install Swift SDK
        run: |
          SWIFT_BRANCH=swift-5.2.5-release
          SWIFT_VERSION=swift-5.2.5-RELEASE
          SWIFT_PLATFORM=ubuntu18.04
          SWIFT_ARCHIVE_NAME=${SWIFT_VERSION}-${SWIFT_PLATFORM}
          SWIFT_URL=https://swift.org/builds/${SWIFT_BRANCH}/$(echo "${SWIFT_PLATFORM}" | tr -d .)/${SWIFT_VERSION}/${SWIFT_ARCHIVE_NAME}.tar.gz
          wget -nv ${SWIFT_URL}
          sudo tar xf ${SWIFT_ARCHIVE_NAME}.tar.gz --directory / --strip-components=1
          sudo chmod -R o+r /usr/lib/swift/CoreFoundation
      - name: Build and run functional tests
        run: |
          pushd examples
          ./scripts/build-swift --valgrind --buildGluecodium
          popd
          pushd functional-tests
          ./scripts/build-swift --valgrind --publish
          popd

  dart:
    name: Dart
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            !*gluecodium*
            !*lime-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: '3.15.7'
      - name: Install ninja
        run: sudo apt install -y ninja-build
      - name: Install Dart SDK
        run: |
          DART_VERSION=2.9.0
          wget -nv https://storage.googleapis.com/dart-archive/channels/stable/release/${DART_VERSION}/linux_packages/dart_${DART_VERSION}-1_amd64.deb
          sudo apt -y install ./dart_${DART_VERSION}-1_amd64.deb
      - name: Build and run functional tests
        run: |
          export PATH="${PATH}:/usr/lib/dart/bin"
          cd examples
          ./scripts/build-dart --buildGluecodium

  dart-asan:
    name: Dart with AddressSanitizer
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            !*gluecodium*
            !*lime-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: '3.15.7'
      - name: Install ninja
        run: sudo apt install -y ninja-build
      - name: Cache Dart SDK
        uses: actions/cache@v2
        with:
          path: |
            ~/dart_sdk
          key: ${{ runner.os }}-dart-2.9.0
          restore-keys: ${{ runner.os }}-dart-2.9.0
      - name: Compile Dart SDK without tcmalloc
        run: |
          export DART_BIN=${HOME}/dart_sdk/bin
          export DART_LIB=${HOME}/dart_sdk/lib
          export PATH=${PATH}:${PWD}/depot_tools:${DART_BIN}
          DART_VERSION=2.9.0
          if [ ! -d "${HOME}/dart_sdk/bin" ]; then
            git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
            mkdir dart-sdk
            pushd dart-sdk
            fetch dart
            pushd sdk
            git fetch --tags
            git checkout tags/${DART_VERSION}
            gclient sync
            ./tools/generate_buildfiles.py
            sed -i 's/dart_use_tcmalloc = true/dart_use_tcmalloc = false/g' ./out/ReleaseX64/args.gn
            ./tools/build.py --mode release --arch x64 create_sdk
            mkdir -p ${DART_BIN}
            pushd out/ReleaseX64/dart-sdk
            pushd bin
            mv dart dart2native dartaotruntime pub utils ${DART_BIN}
            popd
            pushd bin/snapshots
            mkdir -p ${DART_BIN}/snapshots
            mv dart2native.dart.snapshot gen_kernel.dart.snapshot pub.dart.snapshot ${DART_BIN}/snapshots
            popd
            mkdir -p ${DART_LIB}
            mv lib/_internal ${DART_LIB}
          fi
      - name: Build and run functional tests
        run: |
          export PATH="${PATH}:${HOME}/dart_sdk/bin"
          cd examples
          ./scripts/build-dart --buildGluecodium --asan
