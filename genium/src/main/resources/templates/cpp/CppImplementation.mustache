{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>cpp/CppCommentHeader}}

{{#headerInclude}}{{>common/Include}}{{/headerInclude}}
{{#if errorEnums}}#include <string>{{/if}}

{{#namespace}}
namespace {{.}} {

{{/namespace}}
{{#classes}}{{#unless isExternal}}
{{name}}::~{{name}}() = default;

{{#set className=name}}{{#members}}
{{#instanceOf this "CppConstant"}}const {{type.name}} {{className}}::{{name}} = {{value.name}};{{/instanceOf}}
{{#instanceOf this "CppStruct"}}{{>cpp/CppStructImpl}}{{/instanceOf}}
{{/members}}{{/set}}
{{/unless}}{{/classes}}
{{#members}}
{{#instanceOf this "CppConstant"}}const {{type.name}} {{name}} = {{value.name}};{{/instanceOf}}
{{#instanceOf this "CppStruct"}}{{>cpp/CppStructImpl}}{{/instanceOf}}
{{/members}}
{{#errorEnums}}
std::error_code
make_error_code( {{fullyQualifiedName}} value ) noexcept
{
    class {{name}}ErrorCategory: public ::std::error_category
    {
    public:
        ~{{name}}ErrorCategory( ) override = default;

        const char*
        name( ) const noexcept override
        {
            return "{{name}}ErrorCategory";
        }

        std::string
        message( int condition ) const override
        {
            switch( {{fullyQualifiedName}}( condition ) )
            {
            {{#set enumName=fullyQualifiedName}}{{#items}}
            case( {{enumName}}::{{name}} ):
                return "{{enumName}}::{{name}}";
            {{/items}}{{/set}}
            }
            return "Unknown enum value";
        }
    };
    static {{name}}ErrorCategory category{};

    return std::error_code( static_cast<int>( value ), category );
}

{{/errorEnums}}
{{#namespace}}
}
{{/namespace}}
