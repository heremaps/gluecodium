{{>cpp/CppCommentHeader}}

#pragma once

{{#if includes}}
{{#includes}}
{{>common/Include}}
{{/includes}}

{{/if}}
{{#if forwardDeclarations}}
{{#forwardDeclarations}}
{{#namespaces}}
namespace {{.}} {
{{/namespaces}}
    class {{type}};
{{#namespaces}}
}
{{/namespaces}}
{{/forwardDeclarations}}

{{/if}}
{{#namespace}}
namespace {{.}} {

{{/namespace}}
{{#if hasSortedMembers}}
{{#sortedMembers}}
{{#instanceOf this "CppEnum"}}{{>cpp/CppEnum}}{{/instanceOf}}
{{#instanceOf this "CppConstant"}}{{>cpp/CppConstant}}{{/instanceOf}}
{{#instanceOf this "CppUsing"}}{{>cpp/CppUsing}}{{/instanceOf}}
{{#instanceOf this "CppStruct"}}
{{>common/DocComment}}
{{>cpp/CppStruct}}
{{/instanceOf}}
{{/sortedMembers}}
{{/if}}
{{#classes}}
{{>cpp/CppClass}}
{{/classes}}
{{#if members}}

{{/if}}

{{#errorEnums}}
::std::error_code make_error_code( {{.}} value ) noexcept;

{{/errorEnums}}
{{#namespace}}
}
{{/namespace}}
{{#if errorEnums}}

namespace std
{
{{#errorEnums}}
template <>
struct is_error_code_enum <{{.}}> : public std::true_type { };

{{/errorEnums}}
}
{{/if}}
