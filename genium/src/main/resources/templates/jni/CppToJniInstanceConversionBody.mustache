{
    if ( !_ninput )
    {
        return nullptr;
    }

    jobject jResult = {{internalNamespace}}::jni::CppProxyBase::getJavaObject( _ninput.get( ) );
    if ( jResult != nullptr )
    {
        return jResult;
    }

    auto javaClass = _jenv->FindClass( "{{#javaPackages}}{{.}}/{{/javaPackages}}{{javaName}}" );
    auto pInstanceSharedPointer =
        new (::std::nothrow) ::std::shared_ptr<{{cppFullyQualifiedName}}>( _ninput );
    if ( pInstanceSharedPointer == nullptr )
    {
        jclass exceptionClass = _jenv->FindClass( "java/lang/RuntimeException" );
        _jenv->ThrowNew( exceptionClass, "Cannot allocate native memory." );
        _jenv->DeleteLocalRef( exceptionClass );
    }
    jResult = {{internalNamespace}}::jni::create_instance_object(
        _jenv, javaClass, reinterpret_cast<jlong>( pInstanceSharedPointer ) );
    _jenv->DeleteLocalRef( javaClass );

    return jResult;
}
