{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "JniClassCache.h"

namespace {{internalNamespace}}
{
namespace jni
{
{{#models}}{{#structs}}
{{cppStruct.fullyQualifiedName}}
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, {{cppStruct.fullyQualifiedName}}* dummy)
{
    {{#unless cppStruct.hasImmutableFields}}{{cppStruct.fullyQualifiedName}} _nout{};{{/unless}}
{{#fields}}{{#if hasCustomType}}
    {{cppField.type.name}} n_{{cppField.name}} = convert_from_jni(
        _jenv,
        {{internalNamespace}}::jni::get_object_field_value(
        _jenv,
        _jinput,
        "{{javaField.name}}",
        "L{{join javaField.type.packageNames delimiter="/"}}/{{join javaField.type.classNames delimiter="$"}};"),
        ({{cppField.type.name}}*)nullptr );
{{/if}}{{#unless hasCustomType}}
    {{cppField.type.name}} n_{{cppField.name}} = {{internalNamespace}}::jni::get_field_value(
        _jenv,
        _jinput,
        "{{javaField.name}}",
        ({{cppField.type.name}}*)nullptr );
{{/unless}}
    {{#unless cppStruct.hasImmutableFields}}_nout.{{#if cppSetterName}}{{cppSetterName}}({{/if}}{{#unless cppSetterName}}{{cppField.name}} = {{/unless}}n_{{cppField.name}}{{#if cppSetterName}}){{/if}};{{/unless}}
{{/fields}}
    {{#if cppStruct.hasImmutableFields}}return {{cppStruct.fullyQualifiedName}}({{#fields}}std::move(n_{{cppField.name}}){{#if iter.hasNext}}, {{/if}}{{/fields}});{{/if}}{{!!
    }}{{#unless cppStruct.hasImmutableFields}}return _nout;{{/unless}}
}

std::shared_ptr<{{cppStruct.fullyQualifiedName}}>
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, std::shared_ptr<{{cppStruct.fullyQualifiedName}}>* dummy)
{
    return _jinput
        ? std::make_shared<{{cppStruct.fullyQualifiedName}}>(convert_from_jni(_jenv, _jinput, ({{cppStruct.fullyQualifiedName}}*)nullptr))
        : std::shared_ptr<{{cppStruct.fullyQualifiedName}}>{};
}

REGISTER_JNI_CLASS_CACHE({{cppStruct.fullyQualifiedName}}, "{{>jni/JavaClassSignaturePrefix}}{{javaClass.name}}")

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{cppStruct.fullyQualifiedName}}& _ninput)
{
    auto& javaClass = CachedJavaClass<{{cppStruct.fullyQualifiedName}}>::java_class;
    auto _jresult = {{internalNamespace}}::jni::create_object(_jenv, javaClass);
{{#fields}}{{#if hasCustomType}}
    auto j{{cppField.name}} = convert_to_jni(_jenv, {{>getCppFieldValue}});
    {{internalNamespace}}::jni::set_object_field_value(_jenv, _jresult, "{{javaField.name}}",
        "L{{join javaField.type.packageNames delimiter="/"}}/{{join javaField.type.classNames delimiter="$"}};", j{{cppField.name}});
{{/if}}{{#unless hasCustomType}}
    auto j{{cppField.name}} = {{#if type.isJavaArray}}convert_to_jni(_jenv, {{/if}}{{>getCppFieldValue}}{{#if type.isJavaArray}}){{/if}};
    {{internalNamespace}}::jni::set_field_value(_jenv, _jresult, "{{javaField.name}}", j{{cppField.name}});
{{/unless}}{{/fields}}
    return _jresult;
}

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const std::shared_ptr<{{cppStruct.fullyQualifiedName}}> _ninput)
{
    return _ninput ? convert_to_jni(_jenv, *_ninput) : JniReference<jobject>{};
}

{{/structs}}{{/models}}
}
}{{!!

}}{{+getCppFieldValue}}_ninput.{{#if cppGetterName}}{{cppGetterName}}(){{/if}}{{#unless cppGetterName}}{{cppField.name}}{{/unless}}{{/getCppFieldValue}}
