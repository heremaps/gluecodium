{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "JniClassCache.h"

namespace
{
struct DummyNativeBaseType {};
}

namespace {{internalNamespace}}
{
namespace jni
{

REGISTER_JNI_CLASS_CACHE(DummyNativeBaseType, "{{join basePackages delimiter="/"}}/NativeBase")

JniReference<jclass>& get_cached_native_base_class()
{
    return CachedJavaClass<DummyNativeBaseType>::java_class;
}

{{#models}}
REGISTER_JNI_CLASS_CACHE({{cppFullyQualifiedName}}, "{{#javaPackages}}{{.}}/{{/javaPackages}}{{javaName}}")

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const ::std::shared_ptr<{{cppFullyQualifiedName}}> & _ninput)
{
    if ( !_ninput )
    {
        return {};
    }

    auto jResult = {{internalNamespace}}::jni::CppProxyBase::getJavaObject( _ninput.get( ) );
    if ( jResult )
    {
        return jResult;
    }

    auto &javaClass = CachedJavaClass<{{cppFullyQualifiedName}}>::java_class;
    auto pInstanceSharedPointer =
        new (::std::nothrow) ::std::shared_ptr<{{cppFullyQualifiedName}}>( _ninput );
    if ( pInstanceSharedPointer == nullptr )
    {
        auto exceptionClass = find_class(_jenv, "java/lang/OutOfMemoryError" );
        _jenv->ThrowNew( exceptionClass.get(), "Cannot allocate native memory." );
    }
    jResult = {{internalNamespace}}::jni::create_instance_object(
        _jenv, javaClass, reinterpret_cast<jlong>( pInstanceSharedPointer ) );

    return jResult;
}

{{/models}}
}
}
