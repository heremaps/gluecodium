{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "JniClassCache.h"

namespace
{
struct DummyNativeBaseType {};
}

namespace {{internalNamespace}}
{
namespace jni
{

REGISTER_JNI_CLASS_CACHE(DummyNativeBaseType, "{{join basePackages delimiter="/"}}/NativeBase")

JniReference<jclass>& get_cached_native_base_class()
{
    return CachedJavaClass<DummyNativeBaseType>::java_class;
}

{{#models}}
REGISTER_JNI_CLASS_CACHE({{cppFullyQualifiedName}}, "{{#javaPackages}}{{.}}/{{/javaPackages}}{{javaName}}")

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const ::std::shared_ptr<{{cppFullyQualifiedName}}> & _ninput)
{
    if ( !_ninput )
    {
        return {};
    }

    auto jResult = {{internalNamespace}}::jni::CppProxyBase::getJavaObject( _ninput.get( ) );
    if ( jResult )
    {
        return jResult;
    }

    auto &javaClass = CachedJavaClass<{{cppFullyQualifiedName}}>::java_class;
    auto pInstanceSharedPointer =
        new (::std::nothrow) ::std::shared_ptr<{{cppFullyQualifiedName}}>( _ninput );
    if ( pInstanceSharedPointer == nullptr )
    {
        auto exceptionClass = find_class(_jenv, "java/lang/OutOfMemoryError" );
        _jenv->ThrowNew( exceptionClass.get(), "Cannot allocate native memory." );
    }
    jResult = {{internalNamespace}}::jni::create_instance_object(
        _jenv, javaClass, reinterpret_cast<jlong>( pInstanceSharedPointer ) );

    return jResult;
}

{{/models}}
}
}
