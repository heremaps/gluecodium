{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2019 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#include "FieldAccessMethods.h"

namespace {{.}}
{
namespace jni
{

// -------------------- JNI object field getters --------------------------------------------------

jboolean
get_boolean_field( JNIEnv* env,
                   const JniReference<jclass>& javaClass,
                   const JniReference<jobject>& object,
                   const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "Z" );

    return env->GetBooleanField( object.get(), fieldId );
}

jbyte
get_byte_field( JNIEnv* env,
                const JniReference<jclass>& javaClass,
                const JniReference<jobject>& object,
                const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "B" );

    return env->GetByteField( object.get(), fieldId );
}

jshort
get_short_field( JNIEnv* env,
                 const JniReference<jclass>& javaClass,
                 const JniReference<jobject>& object,
                 const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "S" );

    return env->GetShortField( object.get(), fieldId );
}

jint
get_int_field( JNIEnv* env,
               const JniReference<jclass>& javaClass,
               const JniReference<jobject>& object,
               const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "I" );

    return env->GetIntField( object.get(), fieldId );
}

jlong
get_long_field( JNIEnv* env,
                const JniReference<jclass>& javaClass,
                const JniReference<jobject>& object,
                const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "J" );

    return env->GetLongField( object.get(), fieldId );
}

jfloat
get_float_field( JNIEnv* env,
                 const JniReference<jclass>& javaClass,
                 const JniReference<jobject>& object,
                 const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "F" );

    return env->GetFloatField( object.get(), fieldId );
}

jdouble
get_double_field( JNIEnv* env,
                  const JniReference<jclass>& javaClass,
                  const JniReference<jobject>& object,
                  const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "D" );

    return env->GetDoubleField( object.get(), fieldId );
}

std::string
get_string_field( JNIEnv* env,
                  const JniReference<jclass>& javaClass,
                  const JniReference<jobject>& object,
                  const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "Ljava/lang/String;" );
    auto fieldValue = make_local_ref( env, env->GetObjectField( object.get(), fieldId ) );

    return {{.}}::jni::convert_from_jni(
        env,
        fieldValue,
        (std::string*)nullptr );
}

std::shared_ptr< std::vector< uint8_t > >
get_byte_array_field( JNIEnv* env,
                      const JniReference<jclass>& javaClass,
                      const JniReference<jobject>& object,
                      const char* fieldName )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "[B" );
    auto fieldValue = make_local_ref( env, static_cast<jbyteArray>( env->GetObjectField( object.get(), fieldId ) ) );

    return {{.}}::jni::convert_from_jni(
        env,
        fieldValue,
        (std::shared_ptr< std::vector< uint8_t > >*)nullptr );
}

JniReference<jobject>
get_object_field( JNIEnv* env,
                  const JniReference<jclass>& javaClass,
                  const JniReference<jobject>& object,
                  const char* fieldName,
                  const char* fieldSignature )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, fieldSignature );

    return make_local_ref(env, env->GetObjectField( object.get(), fieldId ));
}

// -------------------- JNI object constructor ----------------------------------------------------

JniReference<jobject>
create_object( JNIEnv* env, const JniReference<jclass>& javaClass )
{
    const char* name = "<init>";
    const char* signature = "()V";
    auto theConstructor = env->GetMethodID( javaClass.get(), name, signature );

    return new_object(env, javaClass, theConstructor );
}

// -------------------- JNI instance object constructor -------------------------------------------

JniReference<jobject>
create_instance_object( JNIEnv* env, const JniReference<jclass>& javaClass, jlong instancePointer )
{
    const char* name = "<init>";
    const char* signature = "(J)V";
    auto theConstructor = env->GetMethodID( javaClass.get(), name, signature );

    return new_object(env, javaClass, theConstructor, instancePointer );
}

template<>
JniReference<jobject>
box_uint_in_object( JNIEnv* env, uint8_t param )
{
    auto javaClass = find_class(env, "java/lang/Short" );
    auto theConstructor = env->GetMethodID( javaClass.get(), "<init>", "(S)V" );
    return new_object(env, javaClass, theConstructor, static_cast< int16_t >( param ) );
}

template<>
JniReference<jobject>
box_uint_in_object( JNIEnv* env, uint16_t param )
{
    auto javaClass = find_class(env, "java/lang/Integer" );
    auto theConstructor = env->GetMethodID( javaClass.get(), "<init>", "(I)V" );
    return new_object(env, javaClass, theConstructor, static_cast< int32_t >( param ) );
}

// -------------------- JNI object field setters --------------------------------------------------

void
set_boolean_field( JNIEnv* env,
                   const JniReference<jclass>& javaClass,
                   const JniReference<jobject>& object,
                   const char* fieldName,
                   bool value )
{
    auto fieldID = env->GetFieldID( javaClass.get(), fieldName, "Z" );
    env->SetBooleanField( object.get(), fieldID, value );
}

void
set_byte_field( JNIEnv* env,
                const JniReference<jclass>& javaClass,
                const JniReference<jobject>& object,
                const char* fieldName,
                int8_t value )
{
    auto fieldID = env->GetFieldID( javaClass.get(), fieldName, "B" );
    env->SetByteField( object.get(), fieldID, value );
}

void
set_short_field( JNIEnv* env,
                 const JniReference<jclass>& javaClass,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 int16_t value )
{
    auto fieldID = env->GetFieldID( javaClass.get(), fieldName, "S" );
    env->SetShortField( object.get(), fieldID, value );
}

void
set_int_field( JNIEnv* env,
               const JniReference<jclass>& javaClass,
               const JniReference<jobject>& object,
               const char* fieldName,
               int32_t value )
{
    auto fieldID = env->GetFieldID( javaClass.get(), fieldName, "I" );
    env->SetIntField( object.get(), fieldID, value );
}

void
set_long_field( JNIEnv* env,
                const JniReference<jclass>& javaClass,
                const JniReference<jobject>& object,
                const char* fieldName,
                int64_t value )
{
    auto fieldID = env->GetFieldID( javaClass.get(), fieldName, "J" );
    env->SetLongField( object.get(), fieldID, value );
}

void
set_float_field( JNIEnv* env,
                 const JniReference<jclass>& javaClass,
                 const JniReference<jobject>& object,
                 const char* fieldName,
                 float value )
{
    auto fieldID = env->GetFieldID( javaClass.get(), fieldName, "F" );
    env->SetFloatField( object.get(), fieldID, value );
}

void
set_double_field( JNIEnv* env,
                  const JniReference<jclass>& javaClass,
                  const JniReference<jobject>& object,
                  const char* fieldName,
                  double value )
{
    auto fieldID = env->GetFieldID( javaClass.get(), fieldName, "D" );
    env->SetDoubleField( object.get(), fieldID, value );
}

void
set_string_field( JNIEnv* env,
                  const JniReference<jclass>& javaClass,
                  const JniReference<jobject>& object,
                  const char* fieldName,
                  const std::string& fieldValue )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "Ljava/lang/String;" );
    auto jValue = {{.}}::jni::convert_to_jni( env, fieldValue );
    env->SetObjectField( object.get(), fieldId, jValue.get() );
}

void
set_byte_array_field( JNIEnv* env,
                      const JniReference<jclass>& javaClass,
                      const JniReference<jobject>& object,
                      const char* fieldName,
                      const std::shared_ptr< std::vector< uint8_t > >& fieldValue )
{
    auto fieldId = env->GetFieldID( javaClass.get(), fieldName, "[B" );
    auto jValue = {{.}}::jni::convert_to_jni( env, fieldValue );
    env->SetObjectField( object.get(), fieldId, jValue.get() );
}

void set_object_field( JNIEnv* env,
                       const JniReference<jclass>& javaClass,
                       const JniReference<jobject>& object,
                       const char* fieldName,
                       const char* fieldSignature,
                       const JniReference<jobject>& fieldValue )
{
    auto fieldID = env->GetFieldID( javaClass.get(), fieldName, fieldSignature );
    env->SetObjectField( object.get(), fieldID, fieldValue.get() );
}

}

}