{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

#include "JniClassCache.h"

#include <list>

namespace
{
std::list<{{.}}::jni::CachedJavaClassBase*>& get_registered_class_cache_list()
{
    static std::list<{{.}}::jni::CachedJavaClassBase*> list;
    return list;
}
}

namespace {{.}}
{

namespace jni
{

void
CachedJavaClassBase::init(JNIEnv* env)
{
    for (auto registered_class_base : get_registered_class_cache_list())
    {
        registered_class_base->do_init(env);
    }
    get_registered_class_cache_list().clear();
}

CachedJavaClassBase::CachedJavaClassBase(const char* name) : m_name(name)
{
    get_registered_class_cache_list().push_back(this);
}

CachedJavaClassBase::~CachedJavaClassBase() = default;

void
CachedJavaClassBase::do_init(JNIEnv* env)
{
    auto global_ref = new_global_ref(env, find_class(env, m_name).get());
    set_java_class(make_non_releasing_ref(global_ref.release()));
}

}

}
