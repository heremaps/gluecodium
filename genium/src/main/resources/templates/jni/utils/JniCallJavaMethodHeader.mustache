{{>java/CopyrightHeader}}

#pragma once

#include "JniTemplateMetainfo.h"
#include "JniReference.h"

#include <string>

namespace {{.}}
{

namespace jni
{

template< class ResultType, class ... Args >
ResultType
call_java_method_impl( JNIEnv* jni_env,
                       jobject java_object,
                       jmethodID method_id,
                       Args ... args )
{
    static_assert((JniMethodArgumentTypeChecker<Args...>::are_all_jni_types),
        "Detected attempt to pass to Java method non JNI type parameter");
    static_assert((JniMethodReturnTypeChecker<ResultType>::is_jni_type),
        "Detected attempt to return from Java method non JNI type value");

    auto method_ptr = JniMethodForType<ResultType, IsDerivedFromJObject<ResultType>::value>::method_ptr;
    return static_cast<ResultType>((jni_env->*method_ptr)(java_object, method_id, args...));
}

template< bool IsResultTypeDerivedFromJObject, class ResultType >
struct ProcessJavaMethodCall
{
};

template<class ResultType>
struct ProcessJavaMethodCall<false, ResultType>
{
    template <class ... Args>
    static ResultType call( JNIEnv* jni_env,
                            jobject java_object,
                            jmethodID method_id,
                            Args ... args )
    {
        return call_java_method_impl<ResultType>(jni_env, java_object, method_id, args...);
    }
};

template<class ResultType >
struct ProcessJavaMethodCall<true, ResultType>
{
    template <class ... Args>
    static JniReference<ResultType> call( JNIEnv* jni_env,
                                          jobject java_object,
                                          jmethodID method_id,
                                          Args ... args )
    {
        return make_local_ref(jni_env,
            call_java_method_impl<ResultType>(jni_env, java_object, method_id, args...));
    }
};

template<>
struct ProcessJavaMethodCall<false, void>
{
    template <class ... Args>
    static void call( JNIEnv* jni_env,
                      jobject java_object,
                      jmethodID method_id,
                      Args ... args )
    {
        call_java_method_impl<void>(jni_env, java_object, method_id, args...);
    }
};

template< class ResultType, class JavaObject, class ... Args >
typename std::conditional<IsDerivedFromJObject<ResultType>::value, JniReference<ResultType>, ResultType>::type
call_java_method( JNIEnv* jni_env,
                  const JavaObject& java_object,
                  jmethodID method_id,
                  const Args& ... args )
{
    return ProcessJavaMethodCall<IsDerivedFromJObject<ResultType>::value, ResultType>::call(
        jni_env, jni_reference_unwrap(java_object), method_id, jni_reference_unwrap(args)...);
}

template< class ResultType, class JavaObject, class ... Args >
typename std::conditional<IsDerivedFromJObject<ResultType>::value, JniReference<ResultType>, ResultType>::type
call_java_method( JNIEnv* jni_env,
                  const JavaObject& java_object,
                  const char* method_name,
                  const char* jni_signature,
                  const Args& ... args )
{
    auto jClass = get_object_class( jni_env, java_object );
    jmethodID method_id = jni_env->GetMethodID( jClass.get( ), method_name, jni_signature );
    return call_java_method<ResultType>(jni_env, java_object, method_id, args...);
}

}

}
