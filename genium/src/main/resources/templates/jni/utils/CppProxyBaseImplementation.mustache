{{!!
  !
  ! Copyright (C) 2016-2018 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2018 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#include "CppProxyBase.h"
#include "JniBase.h"
#include <pthread.h>

namespace
{
static pthread_key_t s_thread_key;

JNIEnv*
attach_current_thread( )
{
    JNIEnv* jniEnv;
    JavaVM* jvm = {{.}}::jni::get_java_vm( );
    int envState = jvm->GetEnv( reinterpret_cast< void** >( &jniEnv ), JNI_VERSION_1_6 );
    if ( envState == JNI_EDETACHED )
    {
#ifdef __ANDROID__
        jvm->AttachCurrentThread( &jniEnv, nullptr );
#else   // ifdef __ANDROID__
        jvm->AttachCurrentThread( reinterpret_cast< void** >( &jniEnv ), nullptr );
#endif  // ifdef __ANDROID__
    }

    return jniEnv;
}

void
detach_current_thread( void* )
{
    {{.}}::jni::get_java_vm( )->DetachCurrentThread( );
}

void
make_key_once( )
{
    pthread_key_create( &s_thread_key, NULL );
}

}

namespace {{.}}
{
namespace jni
{
CppProxyBase::ProxyCache CppProxyBase::sProxyCache{};
CppProxyBase::ReverseProxyCache CppProxyBase::sReverseProxyCache{};
CppProxyBase::GlobalJniLock CppProxyBase::sGlobalJniLock{};

JNIEnv*
CppProxyBase::getJniEnvironment( )
{
    // Add cleanup callback to current thread when called the first time
    static pthread_once_t s_key_once = PTHREAD_ONCE_INIT;
    pthread_once( &s_key_once, make_key_once );

    JNIEnv* env;
    if ( ( env = static_cast< JNIEnv* >( pthread_getspecific( s_thread_key ) ) ) == nullptr )
    {
        env = attach_current_thread( );
        pthread_setspecific( s_thread_key, env );
    }

    return env;
}

CppProxyBase::CppProxyBase( JNIEnv* jenv, jobject jGlobalRef, jint jHashCode )
    : jGlobalRef( jGlobalRef )
    , jHashCode( jHashCode )
{
}

CppProxyBase::~CppProxyBase( )
{
    JNIEnv* jniEnv = getJniEnvironment( );

    {
        ::std::lock_guard< GlobalJniLock > lock( sGlobalJniLock );
        sGlobalJniLock.setJniEnvForCurrentThread( jniEnv );
        sProxyCache.erase( ProxyCacheKey{jGlobalRef, jHashCode} );
        sReverseProxyCache.erase( this );
    }

    jniEnv->DeleteGlobalRef( jGlobalRef );
}

bool
CppProxyBase::ProxyCacheKey::operator==( const CppProxyBase::ProxyCacheKey& other ) const
{
    return jHashCode == other.jHashCode &&
        sGlobalJniLock.getJniEnvForCurrentThread( )->IsSameObject( jObject, other.jObject );
}

void
CppProxyBase::GlobalJniLock::lock( )
{
    cacheMutex.lock( );
}

void
CppProxyBase::GlobalJniLock::unlock( )
{
    jniEnvForCurrentThread = nullptr;
    cacheMutex.unlock( );
}

void
CppProxyBase::GlobalJniLock::setJniEnvForCurrentThread( JNIEnv* env )
{
    jniEnvForCurrentThread = env;
}

JNIEnv*
CppProxyBase::GlobalJniLock::getJniEnvForCurrentThread( )
{
    if ( jniEnvForCurrentThread == nullptr )
    {
        jniEnvForCurrentThread = CppProxyBase::getJniEnvironment( );
    }
    return jniEnvForCurrentThread;
}

jint
CppProxyBase::getHashCode( JNIEnv* jniEnv, jobject jObj )
{
    jclass jClass = jniEnv->FindClass( "java/lang/System" );
    jmethodID jMethodId
        = jniEnv->GetStaticMethodID( jClass, "identityHashCode", "(Ljava/lang/Object;)I" );

    jint jResult = jniEnv->CallStaticIntMethod( jClass, jMethodId, jObj );
    jniEnv->DeleteLocalRef( jClass );
    return jResult;
}

jobject
CppProxyBase::getJavaObject( const void* proxy )
{
    ::std::lock_guard< GlobalJniLock > lock( sGlobalJniLock );

    const auto iterator = sReverseProxyCache.find( proxy );
    return iterator != sReverseProxyCache.end( ) ? iterator->second.jObject : nullptr;
}

template<>
void
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    jniEnv->CallVoidMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
}

template<>
jstring
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallObjectMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return static_cast<jstring>( result );
}

template<>
jobject
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallObjectMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

template<>
jboolean
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallBooleanMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

template<>
jbyte
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallByteMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

template<>
jchar
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallCharMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

template<>
jshort
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallShortMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

template<>
jint
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallIntMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

template<>
jlong
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallLongMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

template<>
jfloat
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallFloatMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

template<>
jdouble
CppProxyBase::callJavaMethod( const ::std::string& methodName,
                              const ::std::string& jniSignature,
                              JNIEnv* jniEnv,
                              ... ) const
{
    jclass jClass = jniEnv->GetObjectClass( jGlobalRef );
    jmethodID jmethodId = jniEnv->GetMethodID( jClass, methodName.c_str( ), jniSignature.c_str( ) );
    va_list vaList;
    va_start( vaList, jniEnv );
    auto result = jniEnv->CallDoubleMethodV( jGlobalRef, jmethodId, vaList );
    va_end( vaList );
    return result;
}

}
}
