{{!!
  !
  ! Copyright (C) 2016-2018 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2018 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#include "CppProxyBase.h"
#include "JniBase.h"

namespace {{.}}
{
namespace jni
{
CppProxyBase::ProxyCache CppProxyBase::sProxyCache{};
CppProxyBase::ReverseProxyCache CppProxyBase::sReverseProxyCache{};
CppProxyBase::GlobalJniLock CppProxyBase::sGlobalJniLock{};

JNIEnv*
CppProxyBase::getJniEnvironment( )
{
    return {{.}}::jni::getJniEnvironmentForCurrentThread( );
}

CppProxyBase::CppProxyBase( JNIEnv* jenv, {{.}}::jni::JniReference<jobject> globalRef, jint jHashCode )
    : mGlobalRef( std::move( globalRef ) )
    , jHashCode( jHashCode )
{
}

CppProxyBase::~CppProxyBase( )
{
    JNIEnv* jniEnv = getJniEnvironment( );

    {
        ::std::lock_guard< GlobalJniLock > lock( sGlobalJniLock );
        sGlobalJniLock.setJniEnvForCurrentThread( jniEnv );
        sProxyCache.erase( ProxyCacheKey{mGlobalRef.get(), jHashCode} );
        removeSelfFromReverseCache( );
    }
}

bool
CppProxyBase::ProxyCacheKey::operator==( const CppProxyBase::ProxyCacheKey& other ) const
{
    return jHashCode == other.jHashCode &&
        sGlobalJniLock.getJniEnvForCurrentThread( )->IsSameObject( jObject, other.jObject );
}

void
CppProxyBase::GlobalJniLock::lock( )
{
    cacheMutex.lock( );
}

void
CppProxyBase::GlobalJniLock::unlock( )
{
    jniEnvForCurrentThread = nullptr;
    cacheMutex.unlock( );
}

void
CppProxyBase::GlobalJniLock::setJniEnvForCurrentThread( JNIEnv* env )
{
    jniEnvForCurrentThread = env;
}

JNIEnv*
CppProxyBase::GlobalJniLock::getJniEnvForCurrentThread( )
{
    if ( jniEnvForCurrentThread == nullptr )
    {
        jniEnvForCurrentThread = CppProxyBase::getJniEnvironment( );
    }
    return jniEnvForCurrentThread;
}

jint
CppProxyBase::getHashCode( JNIEnv* jniEnv, jobject jObj )
{
    jclass jClass = jniEnv->FindClass( "java/lang/System" );
    jmethodID jMethodId
        = jniEnv->GetStaticMethodID( jClass, "identityHashCode", "(Ljava/lang/Object;)I" );

    jint jResult = jniEnv->CallStaticIntMethod( jClass, jMethodId, jObj );
    jniEnv->DeleteLocalRef( jClass );
    return jResult;
}

void CppProxyBase::registerInReverseCache( CppProxyBase* proxyBase,
                                           ReverseCacheKey reverseCacheKey,
                                           const ProxyCacheKey& primaryKey )
{
    proxyBase->mReverseCacheKey = reverseCacheKey;
    sReverseProxyCache[ reverseCacheKey ] = primaryKey;
}

void CppProxyBase::removeSelfFromReverseCache( )
{
    if ( mReverseCacheKey != nullptr )
    {
        sReverseProxyCache.erase( mReverseCacheKey );
        mReverseCacheKey = nullptr;
    }
}

jobject
CppProxyBase::getJavaObjectFromReverseCache( ReverseCacheKey reverseCacheKey )
{
    ::std::lock_guard< GlobalJniLock > lock( sGlobalJniLock );

    const auto iterator = sReverseProxyCache.find( reverseCacheKey );
    return iterator != sReverseProxyCache.end( ) ? iterator->second.jObject : nullptr;
}

}
}
