{{!!
  !
  ! Copyright (C) 2016-2018 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2018 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#include "JniCppConversionUtils.h"

namespace {{.}}
{
namespace jni
{

// ------------------- JNI to C++ conversion functions ---------------------------------------------

std::string
convert_string_from_jni( JNIEnv* env, jstring java_string )
{
    if ( env->IsSameObject( java_string, nullptr ) )
    {
        return {};
    }
    const char* jbuffer = env->GetStringUTFChars( java_string, nullptr );
    auto nresult = std::string( jbuffer );
    env->ReleaseStringUTFChars( java_string, jbuffer );
    return nresult;
}

std::string
convert_from_jni( JNIEnv* env, const JniReference<jobject>& jvalue, std::string* )
{
    return convert_string_from_jni( env, static_cast< jstring >( jvalue.get( ) ) );
}

std::string
convert_from_jni( JNIEnv* env, const JniReference<jstring>& jvalue, std::string* )
{
    return convert_string_from_jni( env, jvalue.get( ) );
}

std::shared_ptr< std::vector< uint8_t > >
convert_from_jni( JNIEnv* env, const JniReference<jbyteArray>& jvalue,
                  std::shared_ptr< std::vector< uint8_t > >* dummy )
{
    if ( env->IsSameObject( jvalue.get(), nullptr ) )
    {
        return {};
    }
    size_t size = static_cast< size_t >( env->GetArrayLength( jvalue.get() ) );
    auto nresult = std::make_shared< std::vector< uint8_t > >( size );
    jbyte* jbuffer = reinterpret_cast< jbyte* >( nresult->data( ) );
    env->GetByteArrayRegion( jvalue.get(), 0, size, jbuffer );
    return nresult;
}

// -------------------- C++ to JNI conversion functions --------------------------------------------

JniReference<jstring>
convert_to_jni( JNIEnv* env, const std::string& nvalue )
{
    return make_local_ref(env, env->NewStringUTF( nvalue.c_str( ) ));
}

JniReference<jbyteArray>
convert_to_jni( JNIEnv* env, const std::shared_ptr< std::vector< uint8_t > >& nvalue )
{
    if ( !nvalue )
    {
        return {};
    }

    jsize size = static_cast< jsize >( nvalue->size( ) );
    auto jresult = make_local_ref(env, env->NewByteArray( size ));
    const jbyte* jbuffer = reinterpret_cast< const jbyte* >( nvalue->data( ) );
    env->SetByteArrayRegion( jresult.get(), 0, size, jbuffer );

    return jresult;
}

}
}
