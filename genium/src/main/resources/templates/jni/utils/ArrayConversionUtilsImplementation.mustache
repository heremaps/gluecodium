{{!!
  !
  ! Copyright (C) 2016-2018 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
// -------------------------------------------------------------------------------------------------
// Copyright (C) 2016-2018 HERE Europe B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// License-Filename: LICENSE
//
// -------------------------------------------------------------------------------------------------

#include "ArrayConversionUtils.h"

namespace {{.}}
{
namespace jni
{
jobject
convert_to_jni( JNIEnv* env, const bool nvalue )
{
    return box_value_in_object( env, "java/lang/Boolean", "(Z)V", nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const double nvalue )
{
    return box_value_in_object( env, "java/lang/Double", "(D)V", nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const float nvalue )
{
    return box_value_in_object( env, "java/lang/Float", "(F)V", nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const int8_t nvalue )
{
    return box_value_in_object( env, "java/lang/Byte", "(B)V", nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const int16_t nvalue )
{
    return box_value_in_object( env, "java/lang/Short", "(S)V", nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const int32_t nvalue )
{
    return box_value_in_object( env, "java/lang/Integer", "(I)V", nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const int64_t nvalue )
{
    return box_value_in_object( env, "java/lang/Long", "(J)V", nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const uint8_t nvalue )
{
    return box_uint_in_object( env, nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const uint16_t nvalue )
{
    return box_uint_in_object( env, nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const uint32_t nvalue )
{
    return box_uint_in_object( env, nvalue );
}

jobject
convert_to_jni( JNIEnv* env, const uint64_t nvalue )
{
    return box_uint_in_object( env, nvalue );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, bool& nvalue )
{
    auto javaBooleanClass = env->FindClass( "java/lang/Boolean" );
    auto booleanValueMethodId = env->GetMethodID( javaBooleanClass, "booleanValue", "()Z" );
    nvalue = env->CallBooleanMethod( jvalue, booleanValueMethodId );
    env->DeleteLocalRef( javaBooleanClass );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, double& nvalue )
{
    auto javaDoubleClass = env->FindClass( "java/lang/Double" );
    auto doubleValueMethodId = env->GetMethodID( javaDoubleClass, "doubleValue", "()D" );
    nvalue = env->CallDoubleMethod( jvalue, doubleValueMethodId );
    env->DeleteLocalRef( javaDoubleClass );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, float& nvalue )
{
    auto javaFloatClass = env->FindClass( "java/lang/Float" );
    auto floatValueMethodId = env->GetMethodID( javaFloatClass, "floatValue", "()F" );
    nvalue = env->CallFloatMethod( jvalue, floatValueMethodId );
    env->DeleteLocalRef( javaFloatClass );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, int8_t& nvalue )
{
    auto javaByteClass = env->FindClass( "java/lang/Byte" );
    auto byteValueMethodId = env->GetMethodID( javaByteClass, "byteValue", "()B" );
    nvalue = env->CallByteMethod( jvalue, byteValueMethodId );
    env->DeleteLocalRef( javaByteClass );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, int16_t& nvalue )
{
    auto javaShortClass = env->FindClass( "java/lang/Short" );
    auto shortValueMethodId = env->GetMethodID( javaShortClass, "shortValue", "()S" );
    nvalue = env->CallShortMethod( jvalue, shortValueMethodId );
    env->DeleteLocalRef( javaShortClass );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, int32_t& nvalue )
{
    nvalue = unbox_int_value( env, jvalue );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, int64_t& nvalue )
{
    nvalue = unbox_long_value( env, jvalue );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, uint8_t& nvalue )
{
    nvalue = unbox_long_value( env, jvalue );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, uint16_t& nvalue )
{
    nvalue = unbox_long_value( env, jvalue );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, uint32_t& nvalue )
{
    nvalue = unbox_long_value( env, jvalue );
}

void
convert_from_jni( JNIEnv* env, const jobject& jvalue, uint64_t& nvalue )
{
    nvalue = unbox_long_value( env, jvalue );
}

jint
unbox_int_value( JNIEnv* env, const jobject& jvalue )
{
    auto javaIntegerClass = env->FindClass( "java/lang/Integer" );
    auto intValueMethodId = env->GetMethodID( javaIntegerClass, "intValue", "()I" );
    jint jresult = env->CallIntMethod( jvalue, intValueMethodId );
    env->DeleteLocalRef( javaIntegerClass );
    return jresult;
}

jlong
unbox_long_value( JNIEnv* env, const jobject& jvalue )
{
    auto javaLongClass = env->FindClass( "java/lang/Long" );
    auto longValueMethodId = env->GetMethodID( javaLongClass, "longValue", "()J" );
    jlong jresult = env->CallLongMethod( jvalue, longValueMethodId );
    env->DeleteLocalRef( javaLongClass );
    return jresult;
}

}
}
