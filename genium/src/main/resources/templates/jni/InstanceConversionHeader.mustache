#pragma once

#include <jni.h>
{{#includes}}
{{>common/Include}}
{{/includes}}

#include "ProxyConversion.h"

namespace {{internalNamespace}} {
namespace jni {
template < typename T >
void
convert_from_jni( JNIEnv* _env, jobject _jobj, ::std::shared_ptr< T >& _nresult ) {
    jclass nativeBaseClass = _env->FindClass("{{join basePackages delimiter="/"}}/NativeBase");
    if (_env->IsInstanceOf(_jobj, nativeBaseClass)) {
        if (_jobj != nullptr) {
            auto long_ptr = {{internalNamespace}}::jni::get_long_field(_env, _env->GetObjectClass(_jobj), _jobj, "nativeHandle");
            _nresult = *reinterpret_cast<::std::shared_ptr< T >*> (long_ptr);
        }
    } else {
        ::createCppProxy<>( _env, _jobj, _nresult);
    }
    _env->DeleteLocalRef( nativeBaseClass );
}

{{#models}}
{{>jni/CppToJniInstanceConversionSignature}};

{{/models}}

}
}
