{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#dictionaries}}
internal func copyFromCType(_ handle: _baseRef) -> {{publicName}} {
    var swiftDict: {{publicName}} = [:]
    let iterator_handle = {{cPrefix}}_iterator(handle)
    while {{cPrefix}}_iterator_is_valid(handle, iterator_handle) {

        swiftDict[{{keyType.className}}moveFromCType({{cPrefix}}_iterator_key(iterator_handle))] =
            {{valueType.className}}moveFromCType({{cPrefix}}_iterator_value(iterator_handle)) as {{valueType.publicName}}
        {{cPrefix}}_iterator_increment(iterator_handle)
    }
    {{cPrefix}}_iterator_release_handle(iterator_handle)
    return swiftDict
}

internal func moveFromCType(_ handle: _baseRef) -> {{publicName}} {
    defer {
        {{cPrefix}}_release_handle(handle)
    }
    return copyFromCType(handle)
}

internal func copyToCType(_ swiftDict: {{publicName}}) -> RefHolder {
    let c_handle = {{cPrefix}}_create_handle()
    for (key, value) in swiftDict {
        let c_key = moveToCType(key)
        let c_value = moveToCType(value)
        {{cPrefix}}_put(c_handle, c_key.ref, c_value.ref)
    }
    return RefHolder(c_handle)
}

internal func moveToCType(_ swiftDict: {{publicName}}) -> RefHolder {
    return RefHolder(ref: copyToCType(swiftDict).ref, release: {{cPrefix}}_release_handle)
}
{{!!
Optionals
}}
internal func copyFromCType(_ handle: _baseRef) -> {{publicName}}? {
    guard handle != 0 else {
        return nil
    }
    let unwrappedHandle = {{cPrefix}}_unwrap_optional_handle(handle)
    return copyFromCType(unwrappedHandle) as {{publicName}}
}

internal func moveFromCType(_ handle: _baseRef) -> {{publicName}}? {
    defer {
        {{cPrefix}}_release_optional_handle(handle)
    }
    return copyFromCType(handle)
}

internal func copyToCType(_ swiftDict: {{publicName}}?) -> RefHolder {
    guard let swiftDict = swiftDict else {
        return RefHolder(0)
    }
    let optionalHandle = {{cPrefix}}_create_optional_handle()
    let handle = {{cPrefix}}_unwrap_optional_handle(optionalHandle)
    for (key, value) in swiftDict {
        let c_key = moveToCType(key)
        let c_value = moveToCType(value)
        {{cPrefix}}_put(handle, c_key.ref, c_value.ref)
    }
    return RefHolder(optionalHandle)
}

internal func moveToCType(_ swiftType: {{publicName}}?) -> RefHolder {
    return RefHolder(ref: copyToCType(swiftType).ref, release: {{cPrefix}}_release_optional_handle)
}

{{/dictionaries}}
