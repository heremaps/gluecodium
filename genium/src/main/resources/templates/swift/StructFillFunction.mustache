internal func fillFunction(_ c{{simpleName}}: _baseRef) -> Void {
{{#set structName=simpleName}}
{{#fields}}
{{#switch type.category.toString}}
{{#case "BUILTIN_BYTEBUFFER"}}
    {{>fillDataType}}
{{/case}}
{{#case "STRUCT"}}
    {{>fillStruct}}
{{/case}}
{{#case "CLASS"}}
    {{>fillClass}}
{{/case}}
{{#case "ENUM"}}
    {{>fillEnum}}
{{/case}}
{{#case "ARRAY"}}
    {{>fillArray}}
{{/case}}
{{#case "DICTIONARY"}}
    {{>fillDictionary}}
{{/case}}
{{#case "BUILTIN_STRING" break="false"}}{{/case}}
{{#default}}
    {{>fillBasicType}}
{{/default}}
{{/switch}}
{{/fields}}
{{/set}}
}

{{+fillBasicType}}{{cPrefix}}_{{name}}_set(c{{structName}}, {{name}})
{{/fillBasicType}}

{{+fillDataType}}let {{name}}_handle = byteArray_create()
defer {
    byteArray_release({{name}}_handle)
}
{{name}}.withUnsafeBytes { ({{name}}_ptr: UnsafePointer<UInt8>) in
    byteArray_assign({{name}}_handle, {{name}}_ptr, {{name}}.count)
}
{{cPrefix}}_{{name}}_set(c{{structName}}, {{name}}_handle)
{{/fillDataType}}

{{+fillStruct}}let {{name}}_handle = {{name}}.convertToCType()
defer {
    {{type.cPrefix}}_release({{name}}_handle)
}
{{cPrefix}}_{{name}}_set(c{{structName}}, {{name}}_handle)
{{/fillStruct}}

{{+fillClass}}{{cPrefix}}_{{name}}_set(c{{structName}}, getRef({{name}}).ref)
{{/fillClass}}

{{+fillEnum}}{{cPrefix}}_{{name}}_set(c{{structName}}, {{name}}.rawValue)
{{/fillEnum}}

{{+fillArray}}let {{name}}_conversion = {{name}}.c_conversion()
{{cPrefix}}_{{name}}_set(c{{structName}}, {{name}}_conversion.c_type)
{{name}}_conversion.cleanup()
{{/fillArray}}{{!!

}}{{+fillDictionary}}let {{name}}_conversion = convert{{type.name}}ToCType({{name}})
{{cPrefix}}_{{name}}_set(c{{structName}}, {{name}}_conversion)
{{type.cPrefix}}_release({{name}}_conversion)
{{/fillDictionary}}