{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
//
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}
//
// Automatically generated. Do not modify. Your changes will be lost.
import Foundation

{{#arrays}}
internal class {{implementingClass}}: CollectionOf<{{underlyingType.publicName}}> {
    var c_element: _baseRef?

    init(_ c_element: _baseRef) {
        self.c_element = c_element
        super.init()
        self.startIndex = 0
        self.endIndex = Int({{refName}}_count(c_element))
    }

    deinit {
        {{refName}}_release_handle(c_element!)
    }

    public override subscript(index: Int) -> {{underlyingType.publicName}} {
        let handle = {{refName}}_get(c_element!, UInt64(index)){{!!
        }}{{#switch underlyingType.category.toString}}{{!!
        }}{{#case "STRUCT"}}{{prefixPartial 'structSubscript'   '        '}}{{/case}}{{!!
        }}{{#case "CLASS"}}{{prefixPartial 'classSubscript'   '        '}}{{/case}}{{!!
        }}{{#case "ARRAY"}}{{prefixPartial 'arraySubscript'   '        '}}{{/case}}{{!!
        }}{{#case "ENUM"}}{{prefixPartial 'enumSubscript'   '        '}}{{/case}}{{!!
        }}{{#case "BUILTIN_STRING"}}{{prefixPartial 'stringSubscript'  '        '}}{{/case}}{{!!
        }}{{#case "DICTIONARY"}}{{prefixPartial 'dictionarySubscript'   '        '}}{{/case}}{{!!
        }}{{#default}}{{prefixPartial 'defaultSubscript'  '        '}}{{/default}}{{!!
        }}{{/switch}}
    }

    // This constructor is never called but it's required to conform to ExpressibleByArrayLiteral
    required public init(arrayLiteral elements: Element...) {
        super.init(elements)
    }
}

extension Collection {{>GenericConstraintsRule}}  {
    func c_conversion()-> (c_type: _baseRef, cleanup: () ->Void) {
        let handle = {{refName}}_create_handle()

        for item in self {
{{#switch underlyingType.category.toString}}{{!!
                }}{{#case "STRUCT"}}{{prefixPartial 'structConversion' '            '}}{{/case}}{{!!
                }}{{#case "CLASS"}}{{prefixPartial 'classConversion' '            '}}{{/case}}{{!!
                }}{{#case "ARRAY"}}{{prefixPartial 'arrayConversion'   '            '}}{{/case}}{{!!
                }}{{#case "ENUM"}}{{prefixPartial 'enumConversion'   '            '}}{{/case}}{{!!
                }}{{#case "DICTIONARY"}}{{prefixPartial 'dictionaryConversion'   '            '}}{{/case}}{{!!
                }}{{#default}}{{prefixPartial 'defaultConversion' '            '}}{{/default}}{{!!
            }}{{/switch}}
        }
        let cleanup_function = { () -> Void in
            {{refName}}_release_handle(handle)
        }
        return (handle, cleanup_function)
    }
}

{{/arrays}}

{{+GenericConstraintsRule}}{{!!
 }}where {{#genericParameter.constraints}}{{name}}{{!!
 }}{{#if isProtocol}}:{{/if}}{{#unless isProtocol}} =={{/unless}} {{typeName}}{{!!
 }}{{#if iter.hasNext}}, {{/if}}{{/genericParameter.constraints}}{{/GenericConstraintsRule}}

{{+enumSubscript}}
return {{underlyingType}}(rawValue: handle)!{{/enumSubscript}}

{{+defaultSubscript}}
return handle{{/defaultSubscript}}

{{+structSubscript}}
defer {
    {{underlyingType.cPrefix}}_release_handle(handle)
}
return {{underlyingType}}(c{{underlyingType.simpleName}}: handle){{/structSubscript}}

{{+classSubscript}}
return {{underlyingType.implementingClass}}(c{{underlyingType.simpleName}}: handle){{/classSubscript}}

{{+arraySubscript}}
return {{underlyingType.implementingClass}}(handle){{/arraySubscript}}{{!!

}}{{+dictionarySubscript}}
return convert{{underlyingType.name}}FromCType(handle){{/dictionarySubscript}}{{!!

}}{{+stringSubscript}}
defer {
    std_string_release_handle(handle)
}
return String(data: Data(bytes: std_string_data_get(handle),
              count: Int(std_string_size_get(handle))), encoding: .utf8)!{{/stringSubscript}}

{{+structConversion}}let item_handle = item.convertToCType();
defer {
    {{underlyingType.cPrefix}}_release_handle(item_handle)
}
{{refName}}_append(handle, item_handle){{/structConversion}}

{{+enumConversion}}{{refName}}_append(handle, item.rawValue){{/enumConversion}}

{{+classConversion}}{{refName}}_append(handle, getRef(item).ref){{/classConversion}}

{{+arrayConversion}}let conversion = item.c_conversion()
{{refName}}_append(handle, conversion.c_type)
conversion.cleanup(){{/arrayConversion}}{{!!

}}{{+dictionaryConversion}}let conversion = convert{{underlyingType.name}}ToCType(item)
defer {
    {{underlyingType.cPrefix}}_release_handle(conversion)
}
{{refName}}_append(handle, conversion){{/dictionaryConversion}}{{!!

}}{{+defaultConversion}}{{refName}}_append(handle, item){{/defaultConversion}}
