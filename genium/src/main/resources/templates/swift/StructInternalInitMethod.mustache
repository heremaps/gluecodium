internal init?(c{{simpleName}}: _baseRef) {
{{#set structName=simpleName}}
{{#fields}}
    {{#switch type.category.toString}}
    {{#case "BUILTIN_STRING"}}{{>assignStringType}}{{/case}}
    {{#case "BUILTIN_BYTEBUFFER"}}{{>assignDataType}}{{/case}}
    {{#case "STRUCT"}}{{>assignStruct}}{{/case}}
    {{#case "CLASS"}}{{>assignClass}}{{/case}}
    {{#case "ENUM"}}{{>assignEnum}}{{/case}}
    {{#case "ARRAY"}}{{>assignArray}}{{/case}}
    {{#case "DICTIONARY"}}{{>assignDictionary}}{{/case}}
    {{#default}}{{>assignBasicType}}{{/default}}
    {{/switch}}
{{/fields}}
{{/set}}
}

{{+assignBasicType}}{{name}} = {{cPrefix}}_{{name}}_get(c{{structName}})
{{/assignBasicType}}

{{+assignArray}}{{name}} = {{type.implementingClass}}({{cPrefix}}_{{name}}_get(c{{structName}}))
{{/assignArray}}

{{+assignEnum}}{{name}} = {{type}}.init(rawValue: {{cPrefix}}_{{name}}_get(c{{structName}}))!
{{/assignEnum}}

{{+assignStringType}}do {
    let {{name}}_handle = {{cPrefix}}_{{name}}_get(c{{structName}})
    defer {
        std_string_release({{name}}_handle)
    }
    {{name}} = String(cString: std_string_data_get({{name}}_handle))
}
{{/assignStringType}}

{{+assignDataType}}do {
    let {{name}}_handle = {{cPrefix}}_{{name}}_get(c{{structName}})
    defer {
        byteArray_release({{name}}_handle)
    }
    guard
        let array_data_handle = byteArray_data_get({{name}}_handle)
    else {
        return nil
    }
    {{name}} = Data(bytes: array_data_handle, count: Int(byteArray_size_get({{name}}_handle)))
}
{{/assignDataType}}

{{+assignStruct}}do {
    let {{name}}_handle = {{cPrefix}}_{{name}}_get(c{{structName}})
    defer {
        {{type.cPrefix}}_release({{name}}_handle)
    }
    guard
        let {{name}}_unwrapped = {{type}}(c{{type.simpleName}}: {{name}}_handle)
    else {
        return nil
    }
    {{name}} = {{name}}_unwrapped
}
{{/assignStruct}}

{{+assignClass}}do {
{{#type.optional}}{{!!
}}    {{name}} = {{type}}(c{{type}}: {{cPrefix}}_{{name}}_get(c{{structName}})){{!!
}}{{/type.optional}}{{!!
}}{{^type.optional}}{{!!
}}    guard let {{name}}_unwrapped = {{type}}(c{{type}}: {{cPrefix}}_{{name}}_get(c{{structName}}))
    else {
        return nil
    }
    {{name}} = {{name}}_unwrapped{{!!
}}{{/type.optional}}
}
{{/assignClass}}{{!!

}}{{+assignDictionary}}do {
    let {{name}}_handle = {{cPrefix}}_{{name}}_get(c{{structName}})
    defer {
        {{type.cPrefix}}_release({{name}}_handle)
    }
    {{name}} = convert{{type.name}}FromCType({{name}}_handle)
}
{{/assignDictionary}}
