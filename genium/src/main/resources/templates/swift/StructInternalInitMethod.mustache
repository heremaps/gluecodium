{{!!
  !
  ! Copyright (C) 2016-2018 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
internal init?(c{{simpleName}}: _baseRef) {
{{#set structName=simpleName}}
{{#fields}}
    {{#switch type.category.toString}}
    {{#case "BUILTIN_STRING"}}{{>assignStringType}}{{/case}}
    {{#case "BUILTIN_BYTEBUFFER"}}{{>assignDataType}}{{/case}}
    {{#case "STRUCT"}}{{>assignStruct}}{{/case}}
    {{#case "CLASS"}}{{>assignClass}}{{/case}}
    {{#case "ENUM"}}{{>assignEnum}}{{/case}}
    {{#case "ARRAY"}}{{>assignArray}}{{/case}}
    {{#case "DICTIONARY"}}{{>assignDictionary}}{{/case}}
    {{#default}}{{>assignBasicType}}{{/default}}
    {{/switch}}
{{/fields}}
{{/set}}
}

{{+assignBasicType}}{{name}} = {{cPrefix}}_{{name}}_get(c{{structName}})
{{/assignBasicType}}

{{+assignArray}}{{name}} = {{type.implementingClass}}({{cPrefix}}_{{name}}_get(c{{structName}}))
{{/assignArray}}

{{+assignEnum}}{{name}} = {{type}}.init(rawValue: {{cPrefix}}_{{name}}_get(c{{structName}}))!
{{/assignEnum}}

{{+assignStringType}}do {
    let {{name}}Handle = {{cPrefix}}_{{name}}_get(c{{structName}})
    defer {
        std_string_release({{name}}Handle)
    }
    {{name}} = String(cString: std_string_data_get({{name}}Handle))
}
{{/assignStringType}}

{{+assignDataType}}do {
    let {{name}}FieldHandle = {{cPrefix}}_{{name}}_get(c{{structName}})
    guard
        let dataHandle = byteArray_data_get({{name}}FieldHandle)
    else {
        return nil
    }
    {{name}} = Data(bytes: dataHandle, count: Int(byteArray_size_get({{name}}FieldHandle)))
}
{{/assignDataType}}

{{+assignStruct}}do {
    guard
        let {{name}}Unwrapped = {{type}}(c{{type.simpleName}}: {{cPrefix}}_{{name}}_get(c{{structName}}))
    else {
        return nil
    }
    {{name}} = {{name}}Unwrapped
}
{{/assignStruct}}

{{+assignClass}}do {
{{#type.optional}}{{!!
}}    {{name}} = {{type}}(c{{type}}: {{cPrefix}}_{{name}}_get(c{{structName}})){{!!
}}{{/type.optional}}{{!!
}}{{^type.optional}}{{!!
}}    guard let {{name}}Unwrapped = {{type}}(c{{type}}: {{cPrefix}}_{{name}}_get(c{{structName}}))
    else {
        return nil
    }
    {{name}} = {{name}}Unwrapped{{!!
}}{{/type.optional}}
}
{{/assignClass}}{{!!

}}{{+assignDictionary}}{{name}} = convert{{type.name}}FromCType({{cPrefix}}_{{name}}_get(c{{structName}}))
{{/assignDictionary}}
