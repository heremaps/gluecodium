{{!!
  !
  ! Copyright (C) 2016-2018 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
internal func getRef(_ ref: {{name}}?, owning: Bool = true) -> RefHolder {

    guard let reference = ref else {
        return RefHolder(0)
    }

    if let instanceReference = reference as? NativeBase {
        let handle_copy = {{cInstance}}_copy_handle(instanceReference.c_handle)
        return owning
            ? RefHolder(ref: handle_copy, release: {{cInstance}}_release_handle)
            : RefHolder(handle_copy)
    }

    var functions = {{functionTableName}}()
    functions.swift_pointer = Unmanaged<AnyObject>.passRetained(reference).toOpaque()
    functions.release = {swift_class_pointer in
        if let swift_class = swift_class_pointer {
            Unmanaged<AnyObject>.fromOpaque(swift_class).release()
        }
    }

{{#set className=name}}
{{#methods}}
{{#set delegateToCall="delegateCall2"}}{{>functionTableEntry}}{{/set}}
{{/methods}}
{{#properties}}
{{#set propertyName=name}}{{#propertyAccessors.0}}{{#set delegateToCall="callPropertyGetter"}}{{>functionTableEntry}}{{/set}}{{/propertyAccessors.0}}
{{#unless readonly}}{{#propertyAccessors.1}}{{#set delegateToCall="callPropertySetter"}}{{>functionTableEntry}}{{/set}}{{/propertyAccessors.1}}{{/unless}}{{/set}}
{{/properties}}
    let proxy = {{cInstance}}_create_proxy(functions)
    return owning ? RefHolder(ref: proxy, release: {{cInstance}}_release_handle) : RefHolder(proxy)
}
{{/set}}{{!!
}}{{+functionTableEntry}}
    functions.{{cBaseName}} = {(swift_class_pointer{{#if parameters}}, {{/if}}{{joinPartial parameters "swiftParameter" ", "}}) in
        let swift_class = Unmanaged<AnyObject>.fromOpaque(swift_class_pointer!).takeUnretainedValue() as! {{className}}
        {{#parameters}}{{#switch type.category.toString}}{{!!
        }}{{#case "BUILTIN_STRING"}}
        defer {
            std_string_release_handle({{name}})
        }
        {{/case}}{{!!
        }}{{#case "STRUCT" break=false}}{{/case}}{{!!
        }}{{#case "DICTIONARY"}}
        defer {
            {{type.cPrefix}}_release_handle({{name}})
        }
        {{/case}}{{!!
        }}{{#case "BUILTIN_BYTEBUFFER"}}
        defer {
            byteArray_release_handle({{name}})
        }
        {{/case}}{{!!
        }}{{#case "CLASS"}}
        var swift_object_{{name}}: {{type.publicName}}? = nil
        {{#if type.isInterface}}{{!!
      }}if let swift_pointer_{{name}} = {{type.cPrefix}}_get_swift_object_from_cache({{name}}) {
            swift_object_{{name}} = Unmanaged<AnyObject>.fromOpaque(swift_pointer_{{name}}).takeUnretainedValue() as? {{type.publicName}}
            if swift_object_{{name}} != nil {
                defer {
                    {{type.cPrefix}}_release_handle({{name}})
                }
            }
        }
        {{/if}}{{!!
      }}if swift_object_{{name}} == nil {
            swift_object_{{name}} = {{#type.implementingClass}}{{.}}{{/type.implementingClass}}{{^type.implementingClass}}{{type}}{{/type.implementingClass}}(c{{type}}: {{name}})
        }
        {{/case}}{{!!
        }}{{/switch}}{{/parameters}}
        {{#if returnType}}{{>swiftReturn}}{{/if}}{{!!
      }}{{#unless returnType}}{{include delegateToCall}}{{/unless}}
    }
{{/functionTableEntry}}{{!!
}}{{+swiftParameter}}{{name}}{{/swiftParameter}}{{!!
}}{{+swiftReturn}}{{#switch returnType.category.toString}}{{!!
    }}{{#case "BUILTIN_STRING" break=false}}{{/case}}{{!!
    }}{{#case "STRUCT"}}return {{include delegateToCall}}.convertToCType(){{/case}}{{!!
    }}{{#case "CLASS"}}return getRef({{include delegateToCall}}{{#if returnType.optional}}!{{/if}}, owning: false).ref{{/case}}{{!!
    }}{{#case "ENUM"}}return {{include delegateToCall}}.rawValue{{/case}}{{!!
    }}{{#case "ARRAY"}}return {{include delegateToCall}}.c_conversion().c_type{{/case}}{{!!
    }}{{#case "DICTIONARY"}}return convert{{returnType.name}}ToCType({{include delegateToCall}}){{/case}}{{!!
    }}{{#case "BUILTIN_BYTEBUFFER"}}let result_object = {{include delegateToCall}}
        let result_handle = byteArray_create_handle()
        result_object.withUnsafeBytes { (result_ptr: UnsafePointer<UInt8>) in
            byteArray_assign(result_handle, result_ptr, result_object.count)
        }
        return result_handle{{/case}}{{!!
    }}{{#default}}return {{include delegateToCall}}{{/default}}{{!!
}}{{/switch}}{{/swiftReturn}}{{!!
}}{{+delegateCall2}}swift_class.{{name}}({{joinPartial parameters "swiftParameter2" ", "}}){{/delegateCall2}}{{!!
}}{{+callPropertyGetter}}swift_class.{{propertyName}}{{/callPropertyGetter}}{{!!
}}{{+callPropertySetter}}swift_class.{{propertyName}} = {{#parameters.0}}{{>swiftParameterConversion}}{{/parameters.0}}{{/callPropertySetter}}{{!!
}}{{+swiftParameter2}}{{name}}: {{>swiftParameterConversion}}{{/swiftParameter2}}{{!!
}}{{+swiftParameterConversion}}{{#switch type.category.toString}}{{!!
    }}{{#case "CLASS"}}swift_object_{{name}}!{{/case}}{{!!
    }}{{#case "STRUCT"}}{{type}}(c{{type}}: {{name}}){{/case}}{{!!
    }}{{#case "DICTIONARY"}}convert{{type}}FromCType({{name}}){{/case}}{{!!
    }}{{#case "ARRAY"}}{{type.implementingClass}}({{name}}){{/case}}{{!!
    }}{{#case "BUILTIN_BYTEBUFFER"}}Data(bytes: byteArray_data_get({{name}}), count: byteArray_size_get({{name}})){{/case}}{{!!
    }}{{#case "BUILTIN_STRING"}}String(data: Data(bytes: std_string_data_get({{name}}),
                                                count: Int(std_string_size_get({{name}}))), encoding: .utf8)!{{/case}}{{!!
    }}{{#case "ENUM"}}{{type}}(rawValue: {{name}})!{{/case}}{{!!
    }}{{#default}}{{name}}{{/default}}{{!!
}}{{/switch}}{{/swiftParameterConversion}}
