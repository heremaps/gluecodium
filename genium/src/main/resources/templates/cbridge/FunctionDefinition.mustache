{{!!
  !
  ! Copyright (C) 2016-2018 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>cbridge/FunctionSignature}} {
{{>FunctionBody}}
}

{{+FunctionBody}}{{!!
}}{{#if error}}{{!!
}}{{#if isReturningVoid}}    return {{>callBaseApi}}.value();{{/if}}{{!!
}}{{#unless isReturningVoid}}    auto&& RESULT = {{>callBaseApi}};
    if (RESULT.has_value()) {
        return {true, .returned_value = {{#set delegateToCall="safe_value"}}{{>ReturnConversion}}{{/set}}};
    } else {
        return {false, .error_code = static_cast< {{error.functionReturnType}} >(RESULT.error().value())};
    }{{!!
}}{{/unless}}{{!!
}}{{/if}}{{!!
}}{{#unless error}}    return {{#set delegateToCall="callBaseApi"}}{{>ReturnConversion}}{{/set}};{{/unless}}
{{/FunctionBody}}{{!!


}}{{+ReturnConversion}}{{#switch returnType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{include delegateToCall}}{{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<{{returnType.functionReturnType}}>({{include delegateToCall}}){{/case}}{{!!
    }}{{#case "MAP" break=false}}{{/case}}{{!!
    }}{{#case "ARRAY"}}reinterpret_cast<_baseRef>( new {{returnType.baseApi}}({{include delegateToCall}}) ){{/case}}{{!!
    }}{{#case "CLASS"}}reinterpret_cast<_baseRef>( checked_pointer_copy({{include delegateToCall}}) ){{/case}}{{!!
    }}{{#default}}reinterpret_cast<_baseRef>( new {{returnType.name}}({{include delegateToCall}}) ){{/default}}{{!!
}}{{/switch}}{{/ReturnConversion}}{{!!


}}{{+safe_value}}RESULT.safe_value(){{/safe_value}}{{!!


}}{{+callBaseApi}}{{!!
}}{{^selfParameter}}{{delegateCall}}{{/selfParameter}}{{#selfParameter}}get_pointer<{{selfParameter.mappedType.name}}>({{name}})->get()->{{functionName}}{{/selfParameter}}({{joinPartial parameters "delegateConversion" ", "}}){{!!
}}{{/callBaseApi}}{{!!


}}{{+delegateConversion}}{{#switch mappedType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_STRING"}}std::string({{name}}){{/case}}{{!!
    }}{{#case "BUILTIN_BYTEBUFFER" break=false}}{{/case}}{{!!
    }}{{#case "STRUCT"}}*get_pointer<{{mappedType.name}}>({{name}}){{/case}}{{!!
    }}{{#case "CLASS"}}{{name}} ? *get_pointer<{{mappedType.name}}>({{name}}) : nullptr{{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<{{mappedType.name}}>({{name}}){{/case}}{{!!
    }}{{#case "MAP" break=false}}{{/case}}{{!!
    }}{{#case "ARRAY"}}*get_pointer<{{mappedType.baseApi}}>({{name}}){{/case}}{{!!
    }}{{#default}}{{name}}{{/default}}{{!!
}}{{/switch}}{{/delegateConversion}}
