_baseRef
{{name}}_create_handle( {{#fields}}{{type.cType}} {{name}}{{#if iter.hasNext}}, {{/if}}{{/fields}} )
{
{{#unless hasImmutableFields}}    {{baseApiName}}* _struct = new ( std::nothrow ) {{baseApiName}}();{{/unless}}
{{#fields}}
{{#if hasImmutableFields}}    auto _{{name}} = {{/if}}{{!!
}}{{#unless hasImmutableFields}}    _struct->{{#if baseLayerSetterName}}{{baseLayerSetterName}}( {{/if}}{{!!
}}{{#unless baseLayerSetterName}}{{baseLayerName}} = {{/unless}}{{/unless}}{{!!
}}{{#switch type.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{name}}{{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<{{type.name}}>( {{name}} ){{/case}}{{!!
    }}{{#default}}Conversion<{{type}}>::toCpp( {{name}} ){{/default}}{{!!
}}{{/switch}}{{#if baseLayerSetterName}} ){{/if}};
{{/fields}}
{{#if hasImmutableFields}}    {{baseApiName}}* _struct = new ( std::nothrow ) {{baseApiName}}( {{#fields}}_{{name}}{{#if iter.hasNext}}, {{/if}}{{/fields}} );{{/if}}
    return reinterpret_cast<_baseRef>( _struct );
}

void
{{name}}_release_handle( _baseRef handle )
{
    delete get_pointer<{{mappedType.name}}>( handle );
}

_baseRef
{{name}}_make_optional_handle( _baseRef handle )
{
    return reinterpret_cast<_baseRef>( new ( std::nothrow ) std::shared_ptr<{{baseApiName}}>( reinterpret_cast<{{baseApiName}}*>( handle ) ) );
}

_baseRef
{{name}}_unwrap_optional_handle( _baseRef handle )
{
    return reinterpret_cast<_baseRef>( reinterpret_cast<std::shared_ptr<{{baseApiName}}>*>( handle )->get( ) );
}

void {{name}}_release_optional_handle(_baseRef handle) {
    delete reinterpret_cast<std::shared_ptr<{{baseApiName}}>*>( handle );
}

{{#set structname=name}}
{{#fields}}
{{type.functionReturnType}} {{structname}}_{{name}}_get(_baseRef handle) {
    auto struct_pointer = get_pointer<{{mappedType.name}}>(handle);
{{#switch type.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}return {{>getBaseLayerFieldValue}};{{/case}}{{!!
    }}{{#case "ENUM"}}return static_cast<{{type.functionReturnType}}>({{>getBaseLayerFieldValue}});{{/case}}{{!!
    }}{{#default}}return Conversion<{{type}}>::toBaseRef({{>getBaseLayerFieldValue}});{{/default}}
{{/switch}}
}
{{/fields}}
{{/set}}{{!!

}}{{+getBaseLayerFieldValue}}struct_pointer->{{#if baseLayerGetterName}}{{baseLayerGetterName}}(){{/if}}{{!!
}}{{#unless baseLayerGetterName}}{{baseLayerName}}{{/unless}}{{/getBaseLayerFieldValue}}
