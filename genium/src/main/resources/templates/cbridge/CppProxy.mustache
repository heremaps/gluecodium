{{!!
  !
  ! Copyright (C) 2016-2018 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
class {{name}}Proxy : public {{selfType.name}}::element_type, public CachedProxyBase<{{name}}Proxy> {
public:
    using function_table_t = {{functionTableName}};

    {{name}}Proxy({{functionTableName}}&& functions)
     : mFunctions(std::move(functions))
    {
    }

    virtual ~{{name}}Proxy() {
        mFunctions.release(mFunctions.swift_pointer);
    }

    {{#each inheritedFunctions functions}}
    {{#if selfParameter}}
    {{returnType}} {{functionName}}({{joinPartial parameters "baseApiParameter" ", "}}){{#if isConst}} const{{/if}} override {
        {{>returnConversion}}
    }
    {{/if}}
    {{/each}}

private:
    function_table_t mFunctions;
};

_baseRef {{name}}_create_proxy({{functionTableName}} functionTable) {
    auto proxy = {{name}}Proxy::get_proxy(std::move(functionTable));
    if (proxy) {
        return reinterpret_cast<_baseRef>( new {{selfType}}(std::move(proxy)) );
    } else {
        return 0;
    }
}

const void* {{name}}_get_swift_object_from_cache(_baseRef handle) {
    return handle ? {{name}}Proxy::get_swift_object(get_pointer<{{selfType}}>(handle)->get()) : nullptr;
}

{{+baseApiParameter}}{{#switch mappedType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{mappedType}}{{/case}}{{!!
    }}{{#case "ENUM"}}const {{mappedType}}{{/case}}{{!!
    }}{{#default}}const {{mappedType}}&{{/default}}{{!!
}}{{/switch}} {{name}}{{/baseApiParameter}}
{{+swiftParameter}}{{#switch mappedType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{name}}{{/case}}{{!!
    }}{{#case "BUILTIN_STRING"}}std_string_create_handle({{name}}.c_str()){{/case}}{{!!
    }}{{#case "BUILTIN_BYTEBUFFER" break=false}}{{/case}}{{!!
    }}{{#case "CLASS" break=false}}{{/case}}{{!!
    }}{{#case "ARRAY" break=false}}{{/case}}{{!!
    }}{{#case "MAP" break=false}}{{/case}}{{!!
    }}{{#case "STRUCT"}}reinterpret_cast<_baseRef>( new {{mappedType}}({{name}}) ){{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<uint32_t>({{name}}){{/case}}{{!!
    }}{{#default}}{{name}}{{/default}}{{!!
}}{{/switch}}{{/swiftParameter}}
{{+returnConversion}}{{#switch returnType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}return {{>swiftDelegateCall}};{{/case}}{{!!
    }}{{#case "BUILTIN_BYTEBUFFER" break=false}}{{/case}}{{!!
    }}{{#case "BUILTIN_STRING" break=false}}{{/case}}{{!!
    }}{{#case "ARRAY" break=false}}{{/case}}{{!!
    }}{{#case "MAP" break=false}}{{/case}}{{!!
    }}{{#case "CLASS" break=false}}{{/case}}{{!!
    }}{{#case "STRUCT"}}auto _return_value_ptr = get_pointer<{{returnType}}>({{>swiftDelegateCall}});
        auto _return_value(*_return_value_ptr);
        delete _return_value_ptr;
        return _return_value;
    {{/case}}{{!!
    }}{{#case "ENUM"}}return static_cast<{{returnType}}>({{>swiftDelegateCall}});{{/case}}{{!!
    }}{{#default}}{{>swiftDelegateCall}};{{/default}}{{!!
}}{{/switch}}
{{/returnConversion}}
{{+swiftDelegateCall}}mFunctions.{{name}}(mFunctions.swift_pointer{{#if parameters}}, {{/if}}{{joinPartial parameters "swiftParameter" ", "}}){{/swiftDelegateCall}}
