{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
_baseRef {{name}}_create_handle() {
    return reinterpret_cast<_baseRef>( new {{>baseApi}}() );
}

void {{name}}_release_handle(_baseRef handle) {
    delete get_pointer<{{>baseApi}}>(handle);
}

_baseRef {{name}}_iterator(_baseRef handle) {
    return reinterpret_cast<_baseRef>( new {{>baseApi}}::iterator( get_pointer<{{>baseApi}}>(handle)->begin() ) );
}

void {{name}}_iterator_release_handle(_baseRef iterator_handle) {
    delete reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle );
}

void {{name}}_put(_baseRef handle, {{keyType.functionReturnType}} key, {{valueType.functionReturnType}} value) {
    (*get_pointer<{{>baseApi}}>(handle))[{{#set variableName="key" variableType=keyType}}{{>ConvertToCpp}}{{/set}}]{{!!
       }} = {{#set variableName="value" variableType=valueType}}{{>ConvertToCpp}}{{/set}};
}

bool {{name}}_iterator_is_valid(_baseRef handle, _baseRef iterator_handle) {
    return *reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle ) != get_pointer<{{>baseApi}}>(handle)->end();
}

void {{name}}_iterator_increment(_baseRef iterator_handle) {
    ++*reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle );
}

{{keyType.functionReturnType}} {{name}}_iterator_key(_baseRef iterator_handle) {
    auto& key = (*reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle ))->first;
    return {{#set variableName="key" variableType=keyType}}{{>ConvertFromCpp}}{{/set}};
}

{{valueType.functionReturnType}} {{name}}_iterator_value(_baseRef iterator_handle) {
    auto& value = (*reinterpret_cast<{{>baseApi}}::iterator*>( iterator_handle ))->second;
    return {{#set variableName="value" variableType=valueType}}{{>ConvertFromCpp}}{{/set}};
}{{!!

}}{{+baseApi}}std::unordered_map<{{keyType.name}}, {{valueType.name}}{{#enumHashType}}, {{.}}{{/enumHashType}}>{{/baseApi}}{{!!

}}{{+ConvertToCpp}}{{!!
}}{{#switch variableType.typeCategory.toString}}{{!!
    }}{{#case "STRUCT" break=false}}{{/case}}{{!!
    }}{{#case "CLASS" break=false}}{{/case}}{{!!
    }}{{#case "MAP" break=false}}{{/case}}{{!!
    }}{{#case "ARRAY" break=false}}{{/case}}{{!!
    }}{{#case "BUILTIN_STRING"}}*get_pointer<{{variableType.name}}>({{variableName}}){{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<{{variableType.name}}>({{variableName}}){{/case}}{{!!
    }}{{#default}}{{variableName}}{{/default}}{{!!
}}{{/switch}}{{!!
}}{{/ConvertToCpp}}{{!!

}}{{+ConvertFromCpp}}{{!!
}}{{#switch variableType.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_STRING" break=false}}{{/case}}{{!!
    }}{{#case "STRUCT"}}reinterpret_cast<_baseRef>(new {{variableType.name}} { {{variableName}} }){{/case}}{{!!
    }}{{#case "CLASS"}}reinterpret_cast<_baseRef>(checked_pointer_copy({{variableName}})){{/case}}{{!!
    }}{{#case "MAP" break=false}}{{/case}}{{!!
    }}{{#case "ARRAY"}}reinterpret_cast<_baseRef>(new {{variableType.baseApi}} { {{variableName}} }){{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<{{variableType.functionReturnType}}>({{variableName}}){{/case}}{{!!
    }}{{#default}}{{variableName}}{{/default}}{{!!
}}{{/switch}}{{!!
}}{{/ConvertFromCpp}}
