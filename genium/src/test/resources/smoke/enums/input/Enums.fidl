/*
 * Copyright (C) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package smoke

interface Enums {
    version {
        major 0
        minor 1
    }

    enumeration SimpleEnum {
        // Check that lower case chars are handled correctly
        First
        SECOND
    }

    map ExampleMap {
        SimpleEnum to UInt64
    }

    method methodWithEnumeration {
        in {
            SimpleEnum input
        }
        out {
            SimpleEnum output
        }
    }

    enumeration InternalError {
        ERROR_NONE
        ERROR_FATAL = 999
    }

    struct ErrorStruct {
        InternalError type
        String message
    }

    enumeration ExternalEnum {
        Foo_Value
        Bar_Value
    }

    method flipEnumValue {
        in {
            InternalError input
        }
        out {
            InternalError output
        }
    }

    method extractEnumFromStruct {
        in {
            ErrorStruct input
        }
        out {
            InternalError output
        }
    }

    method createStructWithEnumInside {
        in {
            InternalError type
            String message
        }
        out {
            ErrorStruct output
        }
    }

    method methodWithExternalEnum {
        in {
            ExternalEnum input
        }
    }
}

typeCollection EnumsInTypeCollection {
    version {
        major 0
        minor 1
    }

    enumeration TCEnum {
        FIRST
        SECOND
    }

}

interface EnumsInTypeCollectionInterface {
    version {
        major 0
        minor 1
    }

    method flipEnumValue {
        in {
            EnumsInTypeCollection.TCEnum input
        }
        out {
            EnumsInTypeCollection.TCEnum output
        }
    }
}
