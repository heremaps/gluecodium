/*
 * Copyright (C) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package smoke

interface TypeDefs {

    version {
        major 0
        minor 1
    }

    attribute PrimitiveTypeDef[] primitiveTypeAttribute

    struct StructHavingAliasFieldDefinedBelow
    {
        PrimitiveTypeDef field
    }

    typedef NestedIntTypeDef is PrimitiveTypeDef
    typedef PrimitiveTypeDef is Double

    method methodWithPrimitiveTypeDef {
        in {
            PrimitiveTypeDef input
        }
        out {
            PrimitiveTypeDef output
        }
    }

    struct TestStruct
    {
        String something
    }
    array StructArray of TestStruct
    typedef ComplexTypeDef is StructArray

    method methodWithComplexTypeDef {
        in {
            ComplexTypeDef input
        }
        out {
            ComplexTypeDef output
        }
    }

    typedef TestStructTypeDef is TestStruct
    typedef NestedStructTypeDef is TestStructTypeDef

    method returnNestedIntTypeDef {
        in {
            NestedIntTypeDef input
        }
        out {
            NestedIntTypeDef output
        }
    }

    method returnTestStructTypeDef {
        in {
            TestStructTypeDef input
        }
        out {
            TestStructTypeDef output
        }
    }

    method returnNestedStructTypeDef {
        in {
            NestedStructTypeDef input
        }
        out {
            NestedStructTypeDef output
        }
    }

    method returnTypeDefPointFromTypeCollection {
        in {
            TypeCollection.PointTypeDef input
        }
        out {
            TypeCollection.PointTypeDef output
        }
    }
}

typeCollection TypeCollection {

    version {
        major 0
        minor 1
    }

    typedef PointTypeDef is Point

    struct Point {
        Double x
        Double y
    }

    struct StructHavingAliasFieldDefinedBelow
    {
        StorageId field
    }

    typedef StorageId is UInt64
    const StorageId INVALID_STORAGE_ID = 0
}
