/*
 * Copyright (c) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package smoke

import smoke.* from "./TypeCollection.fidl"
import smoke.* from "./StructsInstance.fidl"

interface Structs {
    version {
        major 0
        minor 1
    }

    public struct Point {
        Double x
        Double y
    }

    struct Color {
        UInt8 red
        UInt8 green
        UInt8 blue
    }

    struct Line {
        Point a
        Point b
    }

    struct ColoredLine {
        Line line
        Color color
    }

    struct AllTypesStruct {
        Int8 int8Field
        UInt8 uint8Field
        Int16 int16Field
        UInt16 uint16Field
        Int32 int32Field
        UInt32 uint32Field
        Int64 int64Field
        UInt64 uint64Field
        Float floatField
        Double doubleField
        String stringField
        Boolean booleanField
        ByteBuffer bytesField
        Point pointField
    }

    struct ExternalStruct {
        String stringField
        String externalStringField
        Int8[] externalArrayField
        AnotherExternalStruct externalStructField
    }

    struct AnotherExternalStruct {
        Int8 intField
    }

    enumeration FooBar {
        FOO
        BAR
    }

    method createPoint {
        in {
            Double x
            Double y
        }
        out {
            Point point
        }
    }

    method swapPointCoordinates {
        in {
            Point input
        }
        out {
            Point output
        }
    }

    method createLine {
        in {
            Point pointA
            Point pointB
        }
        out {
            Line output
        }
    }

    method createColoredLine {
        in {
            Line line
            Color color
        }
        out {
            ColoredLine output
        }
    }

    method returnColoredLine {
        in {
            ColoredLine input
        }
        out {
            ColoredLine output
        }
    }

    method returnAllTypesStruct {
        in {
            AllTypesStruct input
        }
        out {
            AllTypesStruct output
        }
    }

    method modifyAllTypesStruct {
        in {
            AllTypesStruct input
        }
        out {
            AllTypesStruct output
        }
    }

    method getExternalStruct {
        out {
            ExternalStruct output
        }
    }

    method getAnotherExternalStruct {
        out {
            AnotherExternalStruct output
        }
    }
}

interface StructsInheritance {
    version {
        major 0
        minor 1
    }

    struct ColoredLineInherited extends Structs.Line {
        TypeCollection.Color color
    }

    method methodWithInheritedType {
        in {
            ColoredLineInherited input
        }
        out {
            ColoredLineInherited output
        }
    }
}

interface StructsFromTypeCollection {
    version {
        major 0
        minor 1
    }

    method createPoint {
        in {
            Double x
            Double y
        }
        out {
            TypeCollection.Point point
        }
    }

    method swapPointCoordinates {
        in {
            TypeCollection.Point input
        }
        out {
            TypeCollection.Point output
        }
    }

    method createLine {
        in {
            TypeCollection.Point pointA
            TypeCollection.Point pointB
        }
        out {
            TypeCollection.Line output
        }
    }

    method createColoredLine {
        in {
            TypeCollection.Line line
            TypeCollection.Color color
        }
        out {
            TypeCollection.ColoredLine output
        }
    }

    method modifyAllTypesStruct {
        in {
            TypeCollection.AllTypesStruct input
        }
        out {
            TypeCollection.AllTypesStruct output
        }
    }
}
