plugins {
    id 'com.diffplug.gradle.spotless' version '3.15.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
}

dependencies {
    compile 'com.android.tools.build:manifest-merger:25.3.0'
    compile 'com.github.DanielKamkha:franca:0.13.1.201807231814'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-text:1.1'
    compile 'org.eclipse.core:runtime:3.10.0-v20140318-2214'
    compile 'org.eclipse.xtext:org.eclipse.xtext.generator:2.11.0'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-jdk14:1.7.25'
    compile 'org.trimou:trimou-core:2.2.0.Final'

    compileOnly 'org.projectlombok:lombok:1.18.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.2'

    testCompile 'com.github.stefanbirkner:system-rules:1.16.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.9.0'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.0'
    testCompile 'org.powermock:powermock-classloading-xstream:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.7.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.2'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.2'
}

apply plugin: 'application'
mainClassName = 'com.here.genium.Genium'

jar {
    manifest {
        attributes ('Main-Class': 'com.here.genium.Genium',
                    'Class-Path': configurations.runtime.files.collect { it.getName() }.join(' '))
    }
}

task geniumStandaloneJar(type: Jar) {
    baseName = project.name + '-standalone'
    manifest {
        attributes('Main-Class': 'com.here.genium.Genium',
                   'Class-Path': configurations.runtime.files.collect { it.getName() }.join(' '))
    }
    from {
        configurations.runtime.files.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.8.1'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }
}
jacocoTestReport {
    reports {
        csv.enabled true
        html.enabled true
        xml.enabled true

        csv.destination file("${buildDir}/reports/coverage/coverageReport.csv")
        html.destination file("${buildDir}/reports/coverage/html")
        xml.destination file("${buildDir}/reports/coverage/coverageReport.xml")
    }
}

apply plugin: 'checkstyle'
checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle-hard.xml')
    toolVersion = '7.8.2'
    ignoreFailures false
}
checkstyleMain {
    maxErrors=0
    maxWarnings=0
}
checkstyleTest {
    maxErrors=0
    maxWarnings=0
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

apply plugin: 'pmd'
pmdMain {
    ruleSetFiles = files(rootProject.file('config/pmd/pmd-hard.xml'))
    rulePriority = 3
}
pmdTest {
    ruleSetFiles = files(rootProject.file('config/pmd/pmd-tests.xml'))
    rulePriority = 3
}

apply from: "$rootDir/gradle/spotless.gradle"

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
