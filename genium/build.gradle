plugins {
    id 'com.diffplug.gradle.spotless' version '3.15.0'
    id 'com.jfrog.artifactory' version '4.8.1'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
    id "de.undercouch.download" version "3.4.3"
}

repositories {
    jcenter()
}

dependencies {
    compile files({ tasks.unzipFrancaZip.extractedJars })

    compile 'com.android.tools.build:manifest-merger:25.3.0'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-text:1.1'
    compile 'org.eclipse.core:runtime:3.10.0-v20140318-2214'
    compile 'org.eclipse.xtext:org.eclipse.xtext.generator:2.11.0'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-jdk14:1.7.25'
    compile 'org.trimou:trimou-core:2.2.0.Final'

    testCompile 'com.github.stefanbirkner:system-rules:1.16.1'
    testCompile 'io.mockk:mockk:1.8.13'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.9.0'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.0'
    testCompile 'org.powermock:powermock-classloading-xstream:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.7.0'
}

task downloadFrancaZip(type: Download) {
    src 'https://github.com/franca/franca/releases/download/v0.13.1/site_franca_0.13.1.201807231814.zip'
    dest file("$buildDir/franca.zip")
    overwrite true
    onlyIfModified true
}

task unzipFrancaZip(dependsOn: downloadFrancaZip, type: Sync) {
    def extractDir = "$buildDir/libs"
    ext.extractedJars = fileTree(extractDir) {
        include 'plugins/org.franca.core_*.jar',
                'plugins/org.franca.core.dsl_*.jar',
                'plugins/org.franca.deploymodel.dsl_*.jar'
        builtBy 'unzipFrancaZip'
    }

    from zipTree(downloadFrancaZip.dest)
    into extractDir
}

compileJava.dependsOn unzipFrancaZip
compileKotlin.dependsOn unzipFrancaZip

apply plugin: 'application'
mainClassName = 'com.here.genium.Genium'

jar {
    manifest {
        attributes('Main-Class': 'com.here.genium.Genium',
                'Class-Path': configurations.runtime.files.collect { it.getName() }.join(' '))
    }
    from {
        tasks.unzipFrancaZip.extractedJars.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.8.1'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }
}
jacocoTestReport {
    reports {
        csv.enabled true
        html.enabled true
        xml.enabled true

        csv.destination file("${buildDir}/reports/coverage/coverageReport.csv")
        html.destination file("${buildDir}/reports/coverage/html")
        xml.destination file("${buildDir}/reports/coverage/coverageReport.xml")
    }
}

apply plugin: 'checkstyle'
checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle-hard.xml')
    toolVersion = '7.8.2'
    ignoreFailures false
}
checkstyleMain {
    maxErrors = 0
    maxWarnings = 0
}
checkstyleTest {
    maxErrors = 0
    maxWarnings = 0
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

apply from: "$rootDir/gradle/spotless.gradle"

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// Publishing

Properties properties = new Properties()
properties.load(project.rootProject.file('genium/src/main/resources/version.properties').newDataInputStream())
version = properties.getProperty('version')
group = 'com.here'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing.publications {
    mavenJava(MavenPublication) {
        groupId
        artifactId project.name
        version this.version

        from components.java
        artifact sourcesJar
        artifact javadocJar

        pom {
            name = 'Genium'
            description = 'Cross-language bindings generator'
            url = 'https://github.com/heremaps/genium'
            licenses {
                license {
                    name = 'The Apache License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            scm {
                connection = 'scm:git:git://github.com/heremaps/genium.git'
                developerConnection = 'scm:git:ssh://github.com/heremaps/genium.git'
                url = 'https://github.com/heremaps/genium'
            }
        }
    }
}

artifactory {
    contextUrl = project.properties['artifactory.contextUrl']
    publish {
        repository {
            username = project.properties['artifactory.username']
            password = project.properties['artifactory.password']
            repoKey = project.properties['artifactory.repoKey']
        }
        defaults {
            publications 'mavenJava'
        }
    }
}
