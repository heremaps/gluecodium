/*
 * Copyright (C) 2016-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

plugins {
    id 'com.diffplug.gradle.spotless' version '3.13.0'
    id "de.undercouch.download" version "3.4.3"
}

dependencies {
    compile files({ tasks.unzipFrancaZip.extractedJars })
    compile 'com.android.tools.build:manifest-merger:25.3.3'
    compile 'commons-io:commons-io:2.5'
    compile 'org.eclipse.core:runtime:3.10.0-v20140318-2214'
    compile 'org.eclipse.xtext:org.eclipse.xtext.generator:2.11.0'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-jdk14:1.7.25'
    compile 'org.trimou:trimou-core:2.2.0.Final'
    compile 'org.apache.commons:commons-text:1.1'

    compileOnly 'org.projectlombok:lombok:1.18.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.2'

    testCompile 'com.github.stefanbirkner:system-rules:1.16.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.9.0'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.0'
    testCompile 'org.powermock:powermock-classloading-xstream:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.7.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.2'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.2'

    // Work around IntelliJ bug not finding (test) resources.
    // https://youtrack.jetbrains.com/issue/IDEA-91952
    // https://youtrack.jetbrains.com/issue/IDEA-119280
    // https://issuetracker.google.com/issues/36988115
    runtime files('build/resources/main')
    testRuntime files('build/resources/test')
}

task downloadFrancaZip(type: Download) {
    src 'https://github.com/franca/franca/releases/download/v0.13.1/site_franca_0.13.1.201807231814.zip'
    dest file("$buildDir/franca.zip")
    overwrite true
    onlyIfModified true
}

task unzipFrancaZip(dependsOn: downloadFrancaZip, type: Sync) {
    def extractDir = "$buildDir/libs"
    ext.extractedJars = fileTree(extractDir) {
        include 'plugins/org.franca.core_*.jar',
                'plugins/org.franca.core.dsl_*.jar',
                'plugins/org.franca.deploymodel.dsl_*.jar'
        builtBy 'unzipFrancaZip'
    }

    from zipTree(downloadFrancaZip.dest)
    into extractDir
}

compileJava.dependsOn unzipFrancaZip
compileKotlin.dependsOn unzipFrancaZip

apply plugin: 'application'
mainClassName = 'com.here.genium.Genium'
run {
    /* By default gradle doesn't forward the command line arguments to main.
     This allows to provide a -Dexec.args="args" when the user calls gradle
     :genium:run. This way args will map to the args in main. */
    if (System.getProperty("exec.args") != null) {
        List<String> splitArgs = new ArrayList<String>();
        java.util.regex.Matcher matcher = java.util.regex.Pattern
                .compile("\\s*(([^\"']\\S*)|[\"'](.+?)[\"'])\\s*")
                .matcher(System.getProperty('exec.args'))
        while (matcher.find()) {
            splitArgs.add(matcher.group(2) == null
                    ? matcher.group(3)
                    : matcher.group(2))
        }
        args splitArgs
    }
}

jar {
    manifest {
        attributes ('Main-Class': 'com.here.genium.Genium',
                    'Class-Path': configurations.runtime.files.collect { it.getName() }.join(' '))
    }
    from {
        tasks.unzipFrancaZip.extractedJars.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.8.1'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }
}
jacocoTestReport {
    reports {
        csv.enabled true
        html.enabled true
        xml.enabled true

        csv.destination file("${buildDir}/reports/coverage/coverageReport.csv")
        html.destination file("${buildDir}/reports/coverage/html")
        xml.destination file("${buildDir}/reports/coverage/coverageReport.xml")
    }
}

apply plugin: 'checkstyle'
checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle-hard.xml')
    toolVersion = '7.8.2'
    ignoreFailures false
}
checkstyleMain {
    maxErrors=0
    maxWarnings=0
}
checkstyleTest {
    maxErrors=0
    maxWarnings=0
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

apply plugin: 'pmd'
pmdMain {
    ruleSetFiles = files(rootProject.file('config/pmd/pmd-hard.xml'))
    rulePriority = 3
}
pmdTest {
    ruleSetFiles = files(rootProject.file('config/pmd/pmd-tests.xml'))
    rulePriority = 3
}

apply from: "$rootDir/gradle/spotless.gradle"
